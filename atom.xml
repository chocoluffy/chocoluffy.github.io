<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[余舜哲的 One Piece]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://chocoluffy.com/"/>
  <updated>2016-07-19T03:33:24.000Z</updated>
  <id>http://chocoluffy.com/</id>
  
  <author>
    <name><![CDATA[Shunzhe Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[webpack与react hot reload开发工具库]]></title>
    <link href="http://chocoluffy.com/2016/07/18/webpack%E4%B8%8Ereact-hot-reload%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <id>http://chocoluffy.com/2016/07/18/webpack与react-hot-reload开发工具库/</id>
    <published>2016-07-19T03:28:05.000Z</published>
    <updated>2016-07-19T03:33:24.000Z</updated>
    <content type="html"><![CDATA[<p>对Dan Abramov开源的react hot loader boilplate的浅探， 同时复习一下webpack与react搭配开发时的常用配置。<a href="https://github.com/chocoluffy/react-hot-boilerplate" target="_blank" rel="external">Github Source</a></p>
<a id="more"></a>
<h2 id="Babel">Babel</h2><p>通常用到的plugin, 在package.json里面保存的module有： “babel-loader”\”babel-preset-es2015”\”babel-preset-react”， 使用babel-loader, 一是可以在<code>.babelrc</code>这个文件里面写出使用另外两个module的配置， 或者， 在webpack里面的loaders部分添加相应的code来实现同样的功能。其中”babel-preset-es2015”是将es6的js语法compile成es2015的， 虽然现在IE9以上及大部分的主流浏览器目前都支持ES6语法了。</p>
<blockquote>
<p>至于ES6和ES2015有什么区别， 以及即将到来的ES7有什么意义， 集成了大部分的functional programming的特性， 本来可能需要引用underscore.js的函数现在可能直接就可以用了。</p>
</blockquote>
<p>而“babel-preset-react”则是将JSX译成JS的插件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [<span class="string">'./client/client.js'</span>], <span class="comment">// 将entry下的client.js最终打包成dist/bundle.js。</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// 利用正则表达式来匹配所有以.js结尾的文件， 同时排除node_modules里面的js文件。</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意在express里面， 我们通常会调整前端index.html引用资源的路径为“./dist”:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'./dist'</span>));</span><br></pre></td></tr></table></figure>
<p>这样的在index.html里面引用bundle.js就可以直接：<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code>就好了。</p>
<p>然后在webpack.config.js写好之后， <code>webpack --config webpack.config.js</code>可以run webpack。然后<code>nodemon server.js</code>就可以开始运行了。当然webpack也有hot reloading的功能。不用每一次都rebuild一次webpack， 而是可以在react里面看到更新component的变化。</p>
<h2 id="React_Hot_Reloading">React Hot Reloading</h2><p>具体的做法是将webpack当成一个middleman来hook服务器。相比nodemon， webpack的好处就是， 它并没有restart server, nodemon是会watching整个”*”， 而webpack只是更新改变的部分。所以我们希望的是让webpack来管理关于react component的部分， 而nodemon只是来监听剩下的部分， 例：<code>nodemon server.js --ignore components</code>， 这样nodemon会忽略所有components文件夹下面的改动。</p>
<p>要使用hot module reload，下载一个babel的插件， 其实babel主要的功能还是在compile上， webpack的主要作用还是在project building这个过程， 然后中间有很多相关的插件是相互联系的， 比如我们现在准备使用的这个“babel-preset-react-hmre”。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// updated webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">    <span class="string">'./client/client.js'</span></span><br><span class="line">    ], <span class="comment">// source file</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="built_in">require</span>(<span class="string">"path"</span>).resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// search all files with ".js" as last.</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>, <span class="string">'react-hmre'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前写的基本都是babel的插件， 现在引入了<code>npm install --save webpack</code>的插件， 同时为了避免多次执行<code>webpack --config webpack.config.js</code>，我们把webpack.config.js引入express server. </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../webpack.config.js'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;noInfo: <span class="literal">true</span>, publicPath: config.output.publicPath&#125;));</span><br><span class="line">app.use(webpackHotMiddleware(compiler));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.resolve(<span class="string">'client/index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Express server listening on port"</span>, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="React_Hot_Boilerplate">React Hot Boilerplate</h2><p>最后的成果见这里， <a href="https://github.com/chocoluffy/react-hot-boilerplate/blob/master/webpack.config.js" target="_blank" rel="external">minimum react hot boilerplate</a>， fork自redux的作者dan abramov。他写的react hot loader boilerplate是我看过的最好的使用starter kit!</p>
<p>最后还想提出的一点， 主要关于ES6里面关于函数的this binding的问题， 通常来说，ES6的arrow可以解决这个问题，或者说在每次render里面调用函数的时候加上<code>.bind(this)</code>。 但是最好的办法还是写在constructor里面， 这样的函数只会bind一次之后都可以一直用。下面附上官方的使用范例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;count: props.initialCount&#125;;</span><br><span class="line">    <span class="keyword">this</span>.tick = <span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;count: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.tick&#125;</span>&gt;</span> // don't need to use arrow type or bind function here anymore since bind in contructor.</span><br><span class="line">        Clicks: &#123;this.state.count&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Counter.propTypes = &#123; initialCount: React.PropTypes.number &#125;;</span><br><span class="line">Counter.defaultProps = &#123; initialCount: <span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>不得不说， 这个starter kit和chrome的react dev tool搭配用起来， 写react的项目真的是一种享受。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对Dan Abramov开源的react hot loader boilplate的浅探， 同时复习一下webpack与react搭配开发时的常用配置。<a href="https://github.com/chocoluffy/react-hot-boilerplate">Github Source</a></p>]]>
    
    </summary>
    
      <category term="react" scheme="http://chocoluffy.com/tags/react/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactNative-简易个人博客客户端]]></title>
    <link href="http://chocoluffy.com/2016/07/03/ReactNative-%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://chocoluffy.com/2016/07/03/ReactNative-简易个人博客客户端/</id>
    <published>2016-07-03T15:25:11.000Z</published>
    <updated>2016-07-03T15:39:57.000Z</updated>
    <content type="html"><![CDATA[<p>记录了学习React Native过程中一开始的上手项目， 对初学者提供对比参考。<a href="https://github.com/chocoluffy/ReactNativeEveryday/tree/master/Day3SimpleNavigator" target="_blank" rel="external">Github Source</a></p>
<a id="more"></a>
<h2 id="Demo">Demo</h2><p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f5h54wb0ung20dc0ob4qu.gif" style="height: 486px; margin: 0 auto;"></p>
<h2 id="Dependency">Dependency</h2><p>react native components:</p>
<ul>
<li>TabBarIOS</li>
<li>Navigator</li>
<li>WebView</li>
</ul>
<p>third library:</p>
<ul>
<li>react-native-vector-icons</li>
</ul>
<h2 id="Trouble_Shooting">Trouble Shooting</h2><h3 id="Use_rnpm_to_link_with_third-party_libraries">Use <code>rnpm</code> to link with third-party libraries</h3><p>Sometimes the third-party libraries not fully integrated into the project even doing <code>rnpm link</code>. In such case, delete the node_modules folder and install again, <code>rm -rf node_modules &amp;&amp; npm install</code>, then do <code>rnpm link</code> to help link with IOS libraries instead of doing it mannually.</p>
<h3 id="How_to_center_an_image_of_fixed_size">How to center an image of fixed size</h3><p>Apply <code>flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39;</code> styling on image’s parent element, then for that image’s styling, only specify its fixed height and width will work!</p>
<h3 id="TouchableHighlight">TouchableHighlight</h3><p>TouchableHighlight component can only has one child element, thus if we want to have multiple children elements, wrap them into a single view container.</p>
<h3 id="Navigator">Navigator</h3><p>Finally using Navigator instead of NavigatorIOS, there are several important things to remember:</p>
<ul>
<li>we have an <code>renderScene</code> method in index.ios.js that defines what component to render when there is an scene being pushed.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In parent component, we define renderScene method:</span></span><br><span class="line">renderScene(route, navigator) &#123;</span><br><span class="line">   <span class="keyword">if</span>(route.name == <span class="string">'Main'</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">Main</span> <span class="attribute">navigator</span>=<span class="value">&#123;navigator&#125;</span> &#123;<span class="attribute">...route.passProps</span>&#125; /&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">   if(route.name == 'Home') &#123;</span><br><span class="line">     return <span class="tag">&lt;<span class="title">Home</span> <span class="attribute">navigator</span>=<span class="value">&#123;navigator&#125;</span> &#123;<span class="attribute">...route.passProps</span>&#125; /&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// And in child component, we put all data we want to pass to next scene in route object.</span><br><span class="line">_navigate(property)&#123;</span><br><span class="line">  this.props.navigator.push(&#123;</span><br><span class="line">    name: 'Home',</span><br><span class="line">    passProps: &#123;</span><br><span class="line">      name: property</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">TouchableHighlight</span> <span class="attribute">onPress</span>=<span class="value">&#123;</span> () =&gt;</span> this._navigate('Hello World') &#125;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="title">Text</span>&gt;</span>GO To View<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">TouchableHighlight</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>And utilizing the spread syntax of passing properties, we can easily allow next scene to use the data passed from the previous scene, the one being trigger(ususally by pressing).</p>
<ul>
<li>The problem of “this”. In the above example, we use the ES6 arrow syntax, which automatically bind “this” for us, which means that the “this” inside the function we called points to the current component. However, if we use common function assignment like <code>onPress={this.onPress.bind(this)}</code>, we have to manually bind this to it!!!</li>
</ul>
<p>check <a href="https://medium.com/@dabit3/react-native-navigator-navigating-like-a-pro-in-react-native-3cb1b6dc1e30#.1kuxzxyps" target="_blank" rel="external">this post</a> for more information. And refer to the source code of example <a href="https://rnplay.org/apps/9_1QSA" target="_blank" rel="external">navigator example</a>.</p>
<h3 id="TabBarIOS">TabBarIOS</h3><p>Check <a href="https://devdactic.com/react-native-tab-bar/" target="_blank" rel="external">this post</a> for more helpful information.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">TabBarIOS</span> <span class="attribute">selectedTab</span>=<span class="value">&#123;this.state.selectedTab&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TabBarIOS.Item</span></span><br><span class="line">          <span class="attribute">selected</span>=<span class="value">&#123;this.state.selectedTab</span> =<span class="value">==</span> '<span class="attribute">welcome</span>'&#125;</span><br><span class="line">          <span class="attribute">systemIcon</span>=<span class="value">"featured"</span></span><br><span class="line">          <span class="attribute">onPress</span>=<span class="value">&#123;()</span> =&gt;</span> &#123;</span><br><span class="line">              this.setState(&#123;</span><br><span class="line">                  selectedTab: 'welcome',</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="title">Welcome</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">TabBarIOS.Item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TabBarIOS.Item</span></span><br><span class="line">          <span class="attribute">selected</span>=<span class="value">&#123;this.state.selectedTab</span> =<span class="value">==</span> '<span class="attribute">more</span>'&#125;</span><br><span class="line">          <span class="attribute">systemIcon</span>=<span class="value">"featured"</span></span><br><span class="line">          <span class="attribute">onPress</span>=<span class="value">&#123;()</span> =&gt;</span> &#123;</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    selectedTab: 'more',</span><br><span class="line">                &#125;);</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="title">More</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">TabBarIOS.Item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">TabBarIOS</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Test_on_real_device">Test on real device</h3><ul>
<li>Change from localhost to my computer’s IP.</li>
<li><a href="https://gist.github.com/andrewsardone/91797ff9923b9ac6ea64" target="_blank" rel="external">Add one more key to info.plist</a></li>
</ul>
<h3 id="Image_not_rendering_from_ListView">Image not rendering from ListView</h3><ul>
<li>One weird thing happened is that using the same uri from Day2 project, I want to render luffy on each row of ListView, but it doesn’t show up. Then, I change to a <em>small and https-sourced</em> image from facebook’s github repo, then it works. Not sure how to deal with it yet.</li>
<li>Some one from issue panel says that image may not be updated in ListView and you have to add an “ID” attribute to forcely update it, it can be saved for later’s use.</li>
</ul>
<h2 id="Data">Data</h2><h3 id="Grab_data_from_RSS">Grab data from RSS</h3><p>Here is a handy website that transforms rss feed into json, and provides a API for that: <a href="http://rss2json.com/" target="_blank" rel="external">http://rss2json.com/</a>. For example, my blog’s rss feed being transformed to json is: <a href="http://rss2json.com/api.json?rss_url=http%3A%2F%2Fchocoluffy.com%2Fatom.xml" target="_blank" rel="external">http://rss2json.com/api.json?rss_url=http%3A%2F%2Fchocoluffy.com%2Fatom.xml</a>. Then using this json file, we can have a much more consistent and clear structure to formatize into RN app.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录了学习React Native过程中一开始的上手项目， 对初学者提供对比参考。<a href="https://github.com/chocoluffy/ReactNativeEveryday/tree/master/Day3SimpleNavigator">Github Source</a></p>]]>
    
    </summary>
    
      <category term="react native" scheme="http://chocoluffy.com/tags/react-native/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VRTO展会游记]]></title>
    <link href="http://chocoluffy.com/2016/06/27/VRTO%E5%B1%95%E4%BC%9A%E6%B8%B8%E8%AE%B0/"/>
    <id>http://chocoluffy.com/2016/06/27/VRTO展会游记/</id>
    <published>2016-06-27T12:49:07.000Z</published>
    <updated>2016-06-28T01:48:11.000Z</updated>
    <content type="html"><![CDATA[<p>记录在VR Toronto展会第一次尝试Oculus和Vive的使用体验。</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f59mz8yt2sj20ww0jhwiy" alt="down hall"></p>
<p>先是有多大Steve Mann教授的开幕panel演讲， 其实内容和上学期ECE516的课程slides重合度非常高， 主要关于教授这四十年左右对VR的研究和总结， 以及他draft的三条关于VR的laws， 更多具体内容和demo可以在课程网页上找到。 </p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f59n0318qmj20vj0ki783" alt="lecture"></p>
<p>我还记得在课上Steve展示的频率可视化手环和水波乐器， 都在昨天和今天的会场展示了， 错过的同学们可以在教授的个人主页上看到更详细的介绍。</p>
<div class="video-container"><br>    <iframe width="560" height="315" src="https://www.youtube.com/v/Z9qiWqRPrcw" frameborder="0" allowfullscreen></iframe><br></div>

<p>接下来是一系列VR相关的演讲和demo展示， 尝试了目前市场比较流行的Oculus和Vive， 有很多游戏和服务行业开发公司都将各自的应用带到了展台， 大致的感受是：Oculus画质暂时比较差， 场景移动快的demo会导致轻微眩晕感， Vive的画质和human interaction相比之下都更加得细腻出色。</p>
<p>但同时不可否认的是， Facebook旗下的Oculus受到更多开发者的青睐， 拥有更多的游戏选择和强大的技术支持, 但最近曝出来的Oculus强制要求某些游戏开发商的优先发行权还是有损企业形象。Sony的VR头盔暂时没有出现在今天的展示中， 但基于PS4成熟市场规模和玩家预期来说， 仍是最值得期待和大规模流行的VR设备。Vive，在我今天的体验之后， 也给我留下了很深刻的印象， 一个三维画画的游戏应用， 见配图， 将手指slide\click\hold的操作融合得很棒， slide换画板， click选择不同的画笔画布装备， hold来画画， 也的确是本场最immersive的应用之一。</p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f5a31m8ag3j20pu0klmzn" alt="demo"></p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f5a30nl323j20qg0mo75v" alt="ada"></p>
<p>苹果也一直既往地选择观望态度， 短期内没有推出的VR设备的计划。微软Hololens作为AR设备， 相比VR， 拥有更大的生活场景应用空间， 今天体验到的Internet of Things， 包括家具电器灯泡的控制， 餐馆点餐是菜单的选择… 这个demo应该是今天最惊艳的展示了， 也感觉这一两年着力布局家居科技环境的苹果也将加入AR的市场。</p>
<div class="video-container"><br>    <iframe width="854" height="480" src="https://www.youtube.com/v/xG3hslceFqo" frameborder="0" allowfullscreen></iframe><br></div>

<p>同时讲座上提及的myo手环， 曾计划是写个应用给朋友庆祝生日的， 结果用户体验实在太差（动作捕捉不准确）， 不得不放弃myo， 目前市场上较实用的motion detection的设备更多时候还是参考大公司的产品风险比较小。</p>
<p>综上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录在VR Toronto展会第一次尝试Oculus和Vive的使用体验。</p>]]>
    
    </summary>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="虚拟现实" scheme="http://chocoluffy.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写给高考三年后自己的一封信]]></title>
    <link href="http://chocoluffy.com/2016/06/11/%E5%86%99%E7%BB%99%E9%AB%98%E8%80%83%E4%B8%89%E5%B9%B4%E5%90%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <id>http://chocoluffy.com/2016/06/11/写给高考三年后自己的一封信/</id>
    <published>2016-06-11T20:49:24.000Z</published>
    <updated>2016-06-25T22:27:42.000Z</updated>
    <content type="html"><![CDATA[<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p>
<a id="more"></a>
<blockquote class="blockquote-center">“One Piece到底存不存在，我不想知道。”</blockquote>

<p><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f4ryvevg44j21fn0cl79q" alt="one piece"></p>
<p>3年前， 我刚结束高考， 坐在爸妈的车上一起从学校回家， 路上没多少车， 很像我当时空空的心。</p>
<p>我是一个很容易有抽离感的人， 和周围的人与声音闹腾久了， 仿佛像一根针戳破了泡泡，我会安静下来。 还记得那天高考最后一门结束之后， 一群家长拥挤了课室， 突然一下子把我推进了陌生的热气腾腾。 然而我已经不记得当时的我送上了多少笑脸， 但我清楚的记得那种从未有过的空旷， 是高考的戛然而止意犹未尽也好， 还是一种抵达终点的疲态彷徨， 我站在那里， 听着最熟悉而陌生的寒暄， 无所适从。直到在人群里瞅见了爸爸妈妈， 我才回过了神， 当时就想一直抱着他们。</p>
<p>太多人的掌声和欢呼让你觉得高考就是终点， 可没有多少人理解你的彷徨和张望。</p>
<p>“好像一下子什么都结束了……”</p>
<p>3年后，或是命运的偶然和眷顾， 我碾转在中山大学， 加州伯克利大学， 并于去年落脚在多伦多大学。 回望高中毕业这几年我走过的脚印， 太多太多的人与事牵扯着我， 震撼着我， 改变着我。 相比现在能够掌握着自己努力的痕迹和方向， “高考”两字对现在的我而言， 更像是翻看儿时日记那般哭笑不得旳嫌弃和惋惜。 嫌弃当时自己那种不能够再真实的空阔无助， 惋惜， 或许能够更早些为热爱的东西付出更多的机会。也正是这份切切实实的想法， 有时候让我发梦：如果让我回去三年前， 看着课桌前傻乎乎的自己， 我会和自己说写什么。</p>
<p>一、</p>
<p>我相信偶然， 不是否定去勤奋、去努力的意义， 不是去反驳人定胜天、铁杵成针的精神， 而是我希望更多的宽容。初中高中大量大量不需要天赋而强调记忆的训练， 中考高考前弥漫的三个月苦学逆袭的故事与激励， 太容易让我们去接受一个线性因果论的世界， 因为我这般这般的“付出”与训练， 我一定能得到即时可见的成果， 而往往成绩也很服气的提高更让我相信， “这条路我没有选错， 只是我还不够努力而已”， “他们的成绩还没有提高， 一定是还不够努力”的幻想。 很难讲这种思路对那个人的高考帮助到底大不大， 但这却是一种很残酷的逻辑。</p>
<p>试想想， 在一个付出就有回报的世界里， 你所有的成功与荣光， 都只与你自己相关， 别人的失手挫折， 都只因为他们付出的不够多； 富人的富， 是天经地义的， 而穷人的穷， 也都无非是他们活该； 善良与同情变得胆怯了， 伸出的援手好像也因为“到底他值不值得我的帮助”的打量而颤抖， 我们生活在这样的世界里， 太容易变得坚硬而自负， 人定胜天不再是面对过程的鼓励而成了面对结果的嚣张。一个失去了尊重和惊喜的世界， 我不喜欢。</p>
<p>我们想要尊重与惊喜， 我们会因此想要理解对方的不同和允许那变幻莫测的运气， 会想起宽容。 不是“如何如何原谅别人的错误”，而是相信自己的任何成就都离不开周遭人的相助与教诲， 都离不开前人的经验和教训， 相信没有那么理所当然。 感觉又像说起了大道理， 可对于一个高中生， 乃至现在许多的成年人过分的自我价值追求， 这最最简单的一条， 却一直不肯承认。</p>
<p>我记得很清楚， 我初高中时候的“努力轨迹”。到初三前一直是吊车尾， 只到发现自己玩的最好的一群小伙伴和自己喜欢的女生都可以毫不费力地进省级重点班， 这成了自己当时努力的理由； 一直喜欢听宣布自己理科成绩的那一刻的掌声和赞叹， 这成了我选择奥数、奥化的理由； 因为老师在作业本上给我写了个“有灵气”， 成了我那三年那门课必须考满分的理由； 因为想要证明我比另一个同学更厉害， 成了我必须保持年纪前列不断去争第一的理由。林林总总的理由， 有笑有泪其中不乏充满了记忆与感动的理由， 只可惜， 没有一个理由是因为我喜欢……</p>
<p>我所谓的成就， 不过是在某学科某考试上考的相对好一点罢了， 可我所付出的， 却是一段“太专注”的冲刺， 以致于根本没来得及想自己的热情和兴趣所在， 而自顾自地认为“我值得一切结果与荣誉”。 就像跑在跑道里的我们， 从来好像都没有质疑过跑道的方向， 而越跑越忘记了自己所属的那个方向， 乃至奔跑的意义。</p>
<p>每个人都有走近舞台中央的时刻， 学会宽容打在自己身上的光，学会理解运气和偶然， 想的清楚别人的扶持与帮助， 更看得清自己究竟属不属于这个舞台， 毕竟这个世界上最简单而粗暴的忽悠， 就是叫你去看着别人跑到哪儿， 你也去那儿。 </p>
<p>二、</p>
<p>没有一个能解决所有问题的答案， 但是可以有一个更倾向改变的角度。</p>
<p>下面这个故事是我在知乎上看到的一个印象很深刻的故事。 2016年普利兹克建筑奖得主Alejandro Aravena在2014年Ted论坛上的讲述他的设计哲学，开篇说道：如果设计有任何力量的话，那就是整合的力量。</p>
<p>事情的起因源于12年前Alejandro曾接到的一个项目，他要为智利北部伊基克市中心非法占据了半公顷土地的100个家庭设计一套社会保障性住房。而得到的预算是1万美元。1万美元的用途，包括买地，建房子，以及建相关基础设施。绝对的资金匮乏让他提出了一个绝妙的方案：“一个普通中产家庭拥有80平方米的住房是可接受的，但如果资金不够，这个家庭可能只好去买40平方米的小房子。如果我们把这个40平方米的小房子，看做是一个80平方米的“好房子的一半”（half of a good house），来建造并提供给这些家庭，给予这些家庭另外40平方米的可拓展空间，那么这无疑鼓励了这些家庭在未来财力足够的时候“扩建”自己的房子，成功拥有一个完整的好房子。”（摘自知乎原文）很惊喜的是， 这些家庭大部分都同意了兴建， 不仅同意， 在主动助力修建工作， 因为未来的另一半也是要他们自己建的， 这是他们自己的房子。每户家庭想到的不再是如何和政府拉锯谈判， 而是对未来自己的房子的憧憬和期待。一个很简单却也更有人情味的角度， “撬动了人们的自发性，我认为，这就是一种“整合”，就是“设计的力量””。</p>
<p>经济学的小伙伴可能很快就看出来了， 这貌似就是所谓的“外部利益内部化”的一个更经典的例子嘛。 小到多人合租房间的打扫卫生， 工作在大公司成为其中一颗齿轮， 大到保护地球生态环境， “搭便车行为”无所不在， “公地悲剧”也不断上演。 非要深究原因的话， 书上说是因为“公共物品产权难以界定”， 我说， 也不过就是当规模大了， 涉及的人多了， 就慢慢失去了归属感罢了。归属感， 一个带着温度的词语。 我不想去深入探讨“拥有”（所谓的“产权”）和“归属”到底区别在哪里， 简单来讲， 你“拥有的”并不一定能带给你“归属”感， 而归属， 自愿付出， 本身就沾着承诺与责任的味道。</p>
<p>“拥有好房子的一半（half of a good house）”这简单的口号没有解决任何资源稀缺的问题， 而只是， 给了伊基克市中心的居民们重新清晰的归属感， 房子是自己未来好房子的一半， 我会认真粉刷， 仔细打扮， 悉心准备装饰那另一半的到来……没有一个能解决所有问题的答案， 但是可以找到一个更加打动的角度， 一个更有人情味儿的角度， 毕竟所有问题最终归根结底都回到人， 而人， 因为曾被温柔相待的归属， 更倾向改变。</p>
<p>类似地， 精致有心旳设计， 真实客观的摄影， 复杂而饱满的戏剧， 这些艺术解决不了大部分现实问题， 却苦勤于人心。 他们努力提出一个角度， 无谓对与错， 更没办法用高中习惯的判分标准参考答案来审判， 往往出其不意， 往往饱受误解， 可也因那更多数的理解和感动而孵育着改变。很难讲艺术的意义究竟是什么， 但如果一定要用一句话来概括， 我想是：</p>
<p>我也会想成为温柔的人， 因为曾被温柔的人那样对待， 深深了解那种被温柔相待的感觉。</p>
<p>或许这就是改变的初衷吧。</p>
<p>三、</p>
<p>“One Piece到底存不存在，我不想知道。”</p>
<p>《海贼王》里面描述过很多不同身世背景的伙伴和路飞一起战斗的精彩剧情， 但对我来说同样难忘的， 还有另一幕， 当乌索普问冥王雷利， “那个独一无二的大秘宝One Piece， 究竟……”， 还没等乌索普说完， 路飞大吼一声， 谁也没有见过路飞这样严肃的表情， “宝藏在哪里我不想知道，连宝藏又没有我也不想知道， 虽然什么都不知道， 但是大家都是这样赌上性命出海的， 要是在这里就被大叔透露了……我就不当海贼了”。</p>
<p>对于终点和意义的讨论从来没有停止过， 而高考， 在其重大的社会责任下背负了太多塑造一生、决定一生的名声， 可就像生命里其他重要的选择一样， 听过掌声， 走过低谷， 我们依旧要继续上路。意义是很私人的东西， 你做不到让别人帮你生活， 也做不到按图索骥去参悟旅行的意义， 希冀的快乐也远远不同于世界上其他任何人。 过早地接受了终点的模样而擦身而过无数或美妙或苦涩却都精彩无比的可能性， 或许正是所谓的“终点”最大的诅咒了吧。</p>
<p>冥王雷利幽幽地问道， “伟大航路的艰险远远超出了你们的想象， 敌人都很强悍， 你办得到吗？统治这片大海。”， 路飞看着雷利， 咧开一个笑容， “我才不要统治呢， 这片大海上最自由的人， 就是海贼王！”</p>
<p>时间仿佛停止在这一刻， 思绪宛若卷入一幕幕电影场景般跳跃， 肃立在舞台的正中央看着灯光慢慢聚拢， 光脚游走在柔和的森林， 再跳入环游世界的海贼船把手臂高高举起……想起了好多好多， 感慨了好多好多， 终于回过神， 才恍然自己有多么幸运。 高中的学习课余生活让我成长了太多， 在省实也让我认识了可以一起撒娇打诨很久很久的朋友。 但同时我也慢慢意识到， 面向高考的教育仿佛无可避免地让我们更容易接受线性因果的世界观， 存在面面俱到的标准答案和一种风光却道听途说的生活。</p>
<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p>
<p>说实话， 在我刚上高中那年级， 脑子里除了跑跑卡丁车， 就是怪物猎人了吧。 日子过得特别慢， 谁会花功夫想这些折腾呢！</p>
<p>虽然一直不擅于文字， 却很庆幸自己还存留着对文字的眷恋。也是想看看和文字里的自己一起成长吧。 </p>
<p>新世相最近一篇关于高考的文章很有意思， 还记得里面开头的一个提问， 过去很多年，我真的从高考中夺回自己的控制权吗？</p>
<p>Yes, finally.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[socket.io开发多人聊天室教程]]></title>
    <link href="http://chocoluffy.com/2016/05/23/socket-io%E5%BC%80%E5%8F%91%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%99%E7%A8%8B/"/>
    <id>http://chocoluffy.com/2016/05/23/socket-io开发多人聊天室教程/</id>
    <published>2016-05-24T02:43:41.000Z</published>
    <updated>2016-06-15T00:41:31.000Z</updated>
    <content type="html"><![CDATA[<p>用socket.io搭配express写的一个多人聊天室应用， 同时借这个机会复习了一下socket及TCP/IP的一些细节知识， 在UI上用jquery， 简洁而快速地完成一些基础前端样式的开发， 开发时用nodemon和browser-sync来辅助开发流程。<a href="http://52.20.64.23/chatroom" target="_blank" rel="external">在线Demo-网页版</a>, <a href="https://github.com/chocoluffy/chatroom" target="_blank" rel="external">github源代码</a>, 欢迎提交bug issue或者pull request~</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/1a5c1f59080e5cc1.png" alt="socket.io"></p>
<h2 id="什么是socket?">什么是socket?</h2><p>socket是对TCP/IP协议的封装， 本身是一个调用接口， 也就是我们常说的API， 用socket可以让程序员更方便的使用TCP/IP协议而已。 </p>
<p>在学习C语言(csc209)的时候大家接触到的socket的接口函数比如<code>create/listen/connect/accept/send/read/write</code>， 实际上正是针对TCP编程的接口， 在课程里我们用C语言来实现TCP最基础的一个socket链接， 监听， 包括server-client之间的通信，同样的， socket这个调用接口也可以用java, python和nodejs任何后端语言来实现， 也会出现在各种各样需要服务器端和客户端通信的应用中。</p>
<p>而什么是TCP呢？</p>
<p>Transmission Control Protocol (TCP) 就是其中发送文本信息的<strong>规则规范</strong>而已。 TCP依赖更底层的函数实现来在网络上传输binary data。 这里和大家介绍telnet\putty这些利用TCP在command line上帮助你发送和接受纯文本消息的应用， 你可以利用telnet来， 比如， 发送消息到google.com：<code>telnet google.com 80</code> 在端口80连接到google.com(80默认给网络请求)。我们当然不会随便发文本消息给google.com， 因为我们知道google.com不会接受随意的， 没有结构的文本请求。 是的， 我们需要一个<strong>标准(protocol)</strong>来规范交流的方式。我们在浏览器输出<a href="http://google.com，" target="_blank" rel="external">http://google.com，</a> 这意味着：</p>
<ul>
<li>在port 80用TCP协议连接google.com的服务器。</li>
<li>请求返回资源“／”（默认资源）。</li>
<li>将请求用http（hypertext transfer protocol）的形式来规范。</li>
</ul>
<h2 id="什么是socket-io?">什么是socket.io?</h2><p>“Socket.IO goes a step beyond just providing an easy-to-use and more robust API on top<br>of web sockets. It also provides the ability to seamlessly use other real-time protocols if WebSockets are not available. For example, it will fall back on JSON long polling in the absence of WebSocket support.” from Rohit Rai</p>
<p>简单来说，socket.io来socket本身的接口函数上再抽象了一层， 让程序员可以专注应用逻辑的开发， 而由socket.io来操作底层的函数调用和优化， 比如有些时候， 由于浏览器的原因不能使用web socket时， 可以默认用long polling来达到同样的效果。</p>
<p>在socket.io出现之前，我们会采用很多的hack来解决一个问题：<strong>怎样在server和client端更有效率地双向传递信息？</strong>比如上文提到的long polling,  client端发送XHR请求， 然后在server端挂住， 直到server收到数据， 就回传数据， 还是比较常见的hack。</p>
<p>直到HTML5的大规模使用， 出现了两种从服务器端推送数据到客户端的新方法， 一个是Server-Sent Events (SSE)， 另一个是今天的主角， 支持双向通信的WebSockets.</p>
<h2 id="怎么用socket-io?">怎么用socket.io?</h2><h3 id="http模块实现">http模块实现</h3><p>下面用一个简单的例子来说明socket的使用， 很明确， 在服务器段当有新的连接的时候， 向客户端发送一个”greeting-from-server”的消息， 同时还监听客户端发来的”greeting-from-client”的事件，将消息打印在console里面。 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plain http's version of server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">	socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line">	fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if using express framework, we can define router easier!</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	fs.readFile(__dirname + <span class="string">'/index.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">		res.writeHead(<span class="number">200</span>);</span><br><span class="line">		res.end(data);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The above code is used for create a server to serve the static index.html file under the current directory. The following part is the main idea of how to use socket.io to construct and listen to events.</span></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on http://localhost:3000'</span>);</span><br><span class="line"></span><br><span class="line">io = socketIO(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">	socket.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">		greeting: <span class="string">'Hello client!'</span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	socket.on(<span class="string">'greeting-from-client'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(msg);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- client side index.html  --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">            <span class="keyword">var</span> socket = io(<span class="string">'http://localhost:3000'</span>);</span><br><span class="line">            socket.on(<span class="string">'greeting-from-server'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.body.appendChild(</span><br><span class="line">                    <span class="built_in">document</span>.createTextNode(message.greeting)</span><br><span class="line">                );</span><br><span class="line">                socket.emit(<span class="string">'greeting-from-client'</span>, &#123;</span><br><span class="line">                    greeting: <span class="string">'Hello Server'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码很简洁。以上是用node原生的http模块来搭建的本地服务器， 还可以尝试使用express这个最负盛名的node框架之一来重新实现一下相同的逻辑。</p>
<h3 id="Express模块实现">Express模块实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express's version of server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express(),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>),</span><br><span class="line">    server, io;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server = http.Server(app);</span><br><span class="line">server.listen(<span class="number">5000</span>);</span><br><span class="line">io = socketIO(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">      greeting: <span class="string">'Hello Client'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  socket.on(<span class="string">'greeting-from-client'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Express is a collection of HTTP utilities and middleware that make it easier to use Node as a web server.</p>
</blockquote>
<p>用<code>var app = express()</code>来创建一个Express应用，将这个Express app当作第一个参数传入HTTP模块得到本地的简易服务器，we told Node that we wanted to use Express as our handler for HTTP requests. 而这个服务器的作用是在接收到对“／”默认资源的请求时， 将index.html文件传回给客户端，也就是我们的浏览器上显示出内容。</p>
<p>Next, we passed the HTTP server directly to the SocketIO method exactly as we would have if we were using a nonExpress HTTP server. Socket.IO took the server instance to listen for new socket connections on it. </p>
<p>其中一个小细节：用 <code>emit</code> 来传输named message, 用 <code>send</code> 来传输a message without name.</p>
<h2 id="多人在线聊天室">多人在线聊天室</h2><p>下面是对以上应用的一个简单拓展。使用一个轮播(broadcasting)的方式， 将客户端传来的消息显示给每一个在线的用户。</p>
<p><a href="https://github.com/chocoluffy/chatroom" target="_blank" rel="external">github源代码    </a></p>
<p><a href="http://52.20.64.23/chatroom" target="_blank" rel="external">在线Demo-网页版</a></p>
<p>在手机上也是可以用的， 不过UI没有专门针对移动端优化， 会有点糗的感觉😭。有bug汇报到Issue呀， 谢谢~</p>
<h3 id="效果图Demo:">效果图Demo:</h3><p>[1] pick a nickname:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/8d0dd106f5f226f4.png" alt="demo-nickname"></p>
<p>[2] chatroom initialization:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/8b9309129959f85e.png" alt="demo-init"></p>
<p>[3] multi users chatting(one in chrome, another in safari):<br><img src="http://ac-TC2Vc5Tu.clouddn.com/4aa537ca52ea8080.png" alt="demo-multusers"></p>
<h3 id="server端源代码">server端源代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A fragment of server.js</span></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on '</span> + port);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = socketIO(server);</span><br><span class="line"><span class="keyword">var</span> sockets = [];</span><br><span class="line"><span class="keyword">var</span> ID2user = &#123;&#125;; <span class="comment">// username </span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">	sockets.push(socket);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> updateUserNum = <span class="function"><span class="keyword">function</span>(<span class="params">skt</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> people = sockets.length === <span class="number">1</span> ? <span class="string">'person'</span> : <span class="string">'people'</span>;</span><br><span class="line">		skt.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">			greeting: <span class="string">'Welcome! '</span> + sockets.length + <span class="string">' '</span> + people + <span class="string">' online now!'</span></span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	updateUserNum(socket);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// boardcast?!</span></span><br><span class="line">	socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> userlistChanged = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(!ID2user[socket.id])&#123; <span class="comment">// if new user comes in.</span></span><br><span class="line">			<span class="keyword">var</span> profile = &#123;</span><br><span class="line">				username: message.username,</span><br><span class="line">				avatar: message.avatar</span><br><span class="line">			&#125;;</span><br><span class="line">			ID2user[socket.id] = profile;</span><br><span class="line">			userlistChanged = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; sockets.length; i++)&#123;</span><br><span class="line">			sockets[i].emit(<span class="string">'message'</span>, message);</span><br><span class="line">			<span class="keyword">if</span>(userlistChanged)&#123; <span class="comment">// update userlist when new user comes in.</span></span><br><span class="line">				<span class="built_in">console</span>.log(ID2user[socket.id].username + <span class="string">'(id: '</span> + socket.id + <span class="string">' )'</span> + <span class="string">'joins!'</span>);</span><br><span class="line">				sockets[i].emit(<span class="string">'userlist'</span>, ID2user);</span><br><span class="line">				updateUserNum(sockets[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;sockets.length; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sockets[i].id === socket.id)&#123;</span><br><span class="line">				sockets.splice(i, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> usernameOut = ID2user[socket.id].username;</span><br><span class="line">		<span class="keyword">delete</span> ID2user[socket.id]; <span class="comment">// remove user from online users.</span></span><br><span class="line">		<span class="comment">// send to client an updated userlist.</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; sockets.length; i++)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(usernameOut + <span class="string">'(id: '</span> + socket.id + <span class="string">' )'</span> + <span class="string">'leaves...'</span>);</span><br><span class="line">			sockets[i].emit(<span class="string">'userlist'</span>, ID2user);</span><br><span class="line">			updateUserNum(sockets[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"There are "</span> + sockets.length + <span class="string">" active sockets remaining."</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由于我们需要将这个应用放在服务器上看效果， 所以port number就不能一直是本地的localhost了， 需要改成<code>var port = process.env.PORT || 3000;</code>。</p>
<h3 id="达到的效果">达到的效果</h3><ul>
<li>显示同时在线的人数和user list。根据你自己选的nickname在user list上显示。</li>
<li>每当有人加入或者disconnect的时候，更新所有客户端的user list。同时console都会有记录。</li>
<li>每当有客户端发送消息的时候， broadcasting给所有在线用户。</li>
</ul>
<h3 id="TODOs">TODOs</h3><ul>
<li>local cache most frequent online users, to make the message transfer much much more efficient and effective. </li>
<li>support image transfer, which should be quite similar to text message, but rather using binary image data. </li>
<li>introduce animation!! this part should be quite familiar to me but I’s just being lazy……</li>
<li>social media ;)</li>
</ul>
<h3 id="client端源代码">client端源代码</h3><p>下面是部分client端的代码：由于监听了一些事件（毕竟我还是调整了前端的😂）, 所以代码有点长， 下面只显示核心部分：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// part of index.html's script</span><br><span class="line">var socket = io();</span><br><span class="line">socket.on('connect', function()&#123;</span><br><span class="line"></span><br><span class="line">    // ... some codes here ...</span><br><span class="line"></span><br><span class="line">	socket.on('greeting-from-server', function(msg)&#123;</span><br><span class="line">		$('#greeting').empty();</span><br><span class="line">		$('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('headline').text(msg.greeting).appendTo($('#greeting'));</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">    // MAIN IDEA: if message comes, append to right place, and self adjust the view!</span><br><span class="line">	socket.on('message', function(msg)&#123;</span><br><span class="line"></span><br><span class="line">		var container = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').attr('id', 'container');</span><br><span class="line">		var bubble = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('talk-bubble tri-right left-in border');</span><br><span class="line">		var textWrapper = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('talktext').appendTo(bubble);</span><br><span class="line">		$('<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>').html(msg.messageText).appendTo(textWrapper);</span><br><span class="line"></span><br><span class="line">		// append the jquery clone to target destination.</span><br><span class="line">		var nameClone = username2jqy(msg.username);</span><br><span class="line">		var avaClone = avatar2jqy(msg.avatar);</span><br><span class="line"></span><br><span class="line">		avaClone.appendTo(container);</span><br><span class="line">		nameClone.appendTo(container);</span><br><span class="line">		bubble.clone().appendTo(container);</span><br><span class="line">		container.clone().appendTo($('#messages'));</span><br><span class="line"></span><br><span class="line">		$('<span class="tag">&lt;<span class="title">br</span>&gt;</span>').appendTo($('#messages'));</span><br><span class="line"></span><br><span class="line">		// self-adjust scrolling height.</span><br><span class="line">		var msgWrapper = document.getElementById('messages');</span><br><span class="line">		msgWrapper.scrollTop = msgWrapper.scrollHeight;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">    // MAIN IDEA: when user list need to update, do it!</span><br><span class="line">	socket.on('userlist', function(userlist)&#123;</span><br><span class="line">		$('#userlist').empty();</span><br><span class="line">		$('<span class="tag">&lt;<span class="title">h2</span>&gt;</span><span class="tag">&lt;/<span class="title">h2</span>&gt;</span>').text('Online users:').appendTo($('#userlist'));</span><br><span class="line">		Object.keys(userlist).map(function(d)&#123;</span><br><span class="line">			var usrImg = $('<span class="tag">&lt;<span class="title">img</span>&gt;</span><span class="tag">&lt;/<span class="title">img</span>&gt;</span>').attr('src', userlist[d].avatar);</span><br><span class="line">			var usrName = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').text(userlist[d].username).addClass('listname');</span><br><span class="line">			var profileWrapper = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('userlistProfile');</span><br><span class="line">			usrImg.appendTo(profileWrapper);</span><br><span class="line">			usrName.appendTo(profileWrapper);</span><br><span class="line">			profileWrapper.appendTo($('#userlist'));</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="背景知识补充">背景知识补充</h2><p>完成一个小demo的开发同样会需要很多边角料信息的补充， 没有人会记得所有javascript各种处理对象的函数， 也没有人需要记得。留个note给自己， 也再以后查纠的之后方便回忆。</p>
<ul>
<li><a href="http://ios.jobbole.com/85230/" target="_blank" rel="external">微信,QQ这类IM app怎么做——谈谈Websocket</a></li>
<li><a href="http://betterexplained.com/articles/a-simple-introduction-to-computer-networking/" target="_blank" rel="external">A Simple Introduction To Computer Networking</a></li>
<li><code>array.splice(i, 1);</code> will remove one item from ith index in that array, namely, in this case, remove the ith item from array.</li>
<li><code>docuemnt.createTextNode(string) \ document.createElement(&#39;div&#39;); \  document.getElementById(&#39;SOMEID&#39;).appendChild(element);</code> are some common DOM objects munipulations example.</li>
<li>refer to this post: <a href="http://stackoverflow.com/questions/8894226/javascript-submit-textbox-on-enter" target="_blank" rel="external">send message by pressing enter</a>, by adding an eventlistener function to message-box, we listent on the keyCode we press, if it is 13(Enter key), then we trigger the message send function.</li>
<li>refer to this post: <a href="http://codepen.io/Founts/pen/gmhcl" target="_blank" rel="external">styling for chat bubble</a></li>
<li>Know how to create DOM elements in jquery: <code>$(&#39;&lt;div&gt;&lt;/div&gt;&#39;).addClass(&#39;headline&#39;).html(msg).appendTo($(&#39;#greeting&#39;));</code></li>
<li>create modal in a visually good-looking way, refer to this post: <a href="https://github.com/kylefox/jquery-modal" target="_blank" rel="external">jquery.modal.js</a></li>
<li>add user a good-looking avatar! <a href="https://github.com/adorableio/avatars-api" target="_blank" rel="external">adorable avatar!</a></li>
<li>change html input focus, refer to this post: <a href="https://api.jquery.com/focus/" target="_blank" rel="external">html input focus</a></li>
<li>auto-adjust the scrolling top to the latest message, refer to this post: <a href="http://stackoverflow.com/questions/15432691/css-overflow-value-for-chat" target="_blank" rel="external">srollTop = scrollHeight</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>用socket.io搭配express写的一个多人聊天室应用， 同时借这个机会复习了一下socket及TCP/IP的一些细节知识， 在UI上用jquery， 简洁而快速地完成一些基础前端样式的开发， 开发时用nodemon和browser-sync来辅助开发流程。<a href="http://52.20.64.23/chatroom">在线Demo-网页版</a>, <a href="https://github.com/chocoluffy/chatroom">github源代码</a>, 欢迎提交bug issue或者pull request~</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://chocoluffy.com/tags/AWS/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发工具库[第一期]-npm script]]></title>
    <link href="http://chocoluffy.com/2016/05/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93-%E7%AC%AC%E4%B8%80%E6%9C%9F-npm-script/"/>
    <id>http://chocoluffy.com/2016/05/15/前端开发工具库-第一期-npm-script/</id>
    <published>2016-05-15T21:48:45.000Z</published>
    <updated>2016-05-27T18:54:26.000Z</updated>
    <content type="html"><![CDATA[<p>在自动构建工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>为什么我们需要自动构建工具？</p>
<p>在前端开发的时候，会遇到很多实际产品开发之外上的需求，比如开发者希望做到“所写即所得”，可以一边在编辑器里面修改和开发代码，浏览器可以同步更新而不需要我们手动去refresh页面； 比如我们希望可以压缩最后的成品代码， 图片资源的大小，让每次浏览器下载所需要的js代码的时间可以更短，或者考虑CDN； 比如我们希望我们写的scss可以适配任何类型的浏览器等等。</p>
<p>很多功能曾经是要开发者手动引入script文件的，但鉴于npm上活跃的开发者将很多需求的module开发并发布出来， 我们可以利用npm这个包管理器来配置使用这些方便的module，在能够达到同样功能的工具里面比如bower, grunt, gulp，我认为对于一个轻量的小项目， 个人项目来说, npm script是最方便的， 最容易上手的。<strong>没有最好的工具， 只有最合适的使用场景。</strong></p>
<p>而今天的主题：在配置工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p>
<p><strong>因为simplicity matters。</strong>没有必要在需要用的时候才去找那些数量有限的grunt, gulp plugins，而直接将node modules拿来用。对于个人开发和维护的小项目， 有没有必要花时间去研究Gruntfile.js怎么去配置， 或者说， 在配置上花的时间相对短期集中开发的时间来说值不值？不是说反对使用grunt, gulp和webpack等工具， 而是我们没有必要拿大炮去打蚊子， 我们想要agile development。 也正是simplicy， 所以才有RoR, meteor等全栈框架的出现来挑战java等较为臃肿的开发流程不是么？</p>
<p>下图是截止至今年1月为止的各平台的插件数量，仍在不断地增加中。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/f247d4b81bd3044a.png" alt="npm script"></p>
<h2 id="什么是npm_script">什么是npm script</h2><p>其实npm script就是希望执行的command的alias， 类似与command line里面的make， 通过提前设置希望执行的命令， 我们可以通过<code>npm run &lt;alias&gt;</code>来执行我们预先设置的命令。</p>
<h2 id="如何config你的npm_script">如何config你的npm script</h2><p>而目前npm上有很多很棒的module可以直接处理项目， 下面列出来的是我平时自己经常使用的module: </p>
<p>比如: browserfy将文件的各种文件和浏览器同步; postcss和autofixer可以将css文件添加适配各种浏览器的前缀同时进行压缩; js-lint用来检查js文件的各种格式细节; uglify用来压缩js文件的大小; imagemin用来压缩各种图片文件的大小， 在各种大型网站中， 图片的大小占据了大部分。</p>
<h3 id="node－sass">node－sass</h3><p>下面是一些具体使用的例子：比如我们想将sass compile成css。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev node-sass</span><br></pre></td></tr></table></figure>
<p>将<code>node-sass</code>这个module装在developing环境之后，可以直接<code>node-sass --output-style compressed -o dist/css src/scss</code>来将”src/scss“这个文件夹下面的sass文件compile出来并保存在”dist/css“文件夹下面； 或者一个更便捷的做法，是使用npm script：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"scss"</span>: <span class="string">"node-sass --output-style compressed -o dist/css src/scss"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在console里run <code>npm run scss</code>就可以执行这个相同命令了。和makefile的原理和使用习惯可以类比， 只不过使用场景和平台不同。</p>
<h3 id="autoprefixer">autoprefixer</h3><p>同理对上文提到的autoprefixer这个module， <code>npm install --save-dev postcss-cli autoprefixer</code>来安装， 然后配置script：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"autoprefixer"</span>: <span class="string">"postcss -u autoprefixer -r dist/css/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么<code>npm run autoprefixer</code>这个效果就相当于<code>postcss -u autoprefixer --autoprefixer.browsers &#39;&gt; 5%, ie 9&#39; -r dist/css/*</code>。</p>
<h3 id="eslint">eslint</h3><p>类似地还有eslint这个对js文件进行syntax testing的常用module：<code>npm install --save-dev eslint</code>或者使用shortcut：<code>npm i -D eslint</code>, 然后配置package.json的script部分：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"lint"</span>: <span class="string">"eslint src/js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目源代码示例">项目源代码示例</h2><p>一个实战项目的源代码使用在这里和大家分享：</p>
<p>考虑到开发和生产环境的不同，还需要配置不同的环境，这个项目在开发上有浏览器同步更新，语法检查，压缩源文件， 监听端口， s3同步备份的自动化优势， 还引入了前端的jade框架代替html， stylus框架代替css，mocha的testing框架和karma驱动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"npm-scripts-example"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"An example of how to use npm scripts"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"browserify"</span>: <span class="string">"^6.3.2"</span>,</span><br><span class="line">    <span class="string">"hashmark"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"http-server"</span>: <span class="string">"^0.7.3"</span>,</span><br><span class="line">    <span class="string">"jade"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="string">"jshint"</span>: <span class="string">"^2.5.10"</span>,</span><br><span class="line">    <span class="string">"karma"</span>: <span class="string">"^0.12.28"</span>,</span><br><span class="line">    <span class="string">"karma-browserify"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"karma-cli"</span>: <span class="string">"^0.0.4"</span>,</span><br><span class="line">    <span class="string">"karma-mocha"</span>: <span class="string">"^0.1.10"</span>,</span><br><span class="line">    <span class="string">"karma-phantomjs-launcher"</span>: <span class="string">"^0.1.4"</span>,</span><br><span class="line">    <span class="string">"live-reload"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="string">"minifyify"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="string">"nodemon"</span>: <span class="string">"^1.2.1"</span>,</span><br><span class="line">    <span class="string">"opener"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line">    <span class="string">"parallelshell"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"rimraf"</span>: <span class="string">"^2.2.8"</span>,</span><br><span class="line">    <span class="string">"s3-cli"</span>: <span class="string">"^0.11.1"</span>,</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"^0.49.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"clean"</span>: <span class="string">"rimraf dist/*"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"prebuild"</span>: <span class="string">"npm run clean -s"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"npm run build:scripts -s &amp;&amp; npm run build:styles -s &amp;&amp; npm run build:markup -s"</span>,</span><br><span class="line">    <span class="string">"build:scripts"</span>: <span class="string">"browserify -d assets/scripts/main.js -p [minifyify --compressPath . --map main.js.map --output dist/main.js.map] | hashmark -n dist/main.js -s -l 8 -m assets.json 'dist/&#123;name&#125;&#123;hash&#125;&#123;ext&#125;'"</span>,</span><br><span class="line">    <span class="string">"build:styles"</span>: <span class="string">"stylus assets/styles/main.styl -m -o dist/ &amp;&amp; hashmark -s -l 8 -m assets.json dist/main.css 'dist/&#123;name&#125;&#123;hash&#125;&#123;ext&#125;'"</span>,</span><br><span class="line">    <span class="string">"build:markup"</span>: <span class="string">"jade assets/markup/index.jade --obj assets.json -o dist"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"karma start --singleRun"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"watch"</span>: <span class="string">"parallelshell \"npm run watch:test -s\" \"npm run watch:build -s\""</span>,</span><br><span class="line">    <span class="string">"watch:test"</span>: <span class="string">"karma start"</span>,</span><br><span class="line">    <span class="string">"watch:build"</span>: <span class="string">"nodemon -q -w assets/ --ext '.' --exec 'npm run build'"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"open:prod"</span>: <span class="string">"opener http://example.com"</span>,</span><br><span class="line">    <span class="string">"open:stage"</span>: <span class="string">"opener http://staging.example.internal"</span>,</span><br><span class="line">    <span class="string">"open:dev"</span>: <span class="string">"opener http://localhost:9090"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"deploy:prod"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/prod-site/"</span>,</span><br><span class="line">    <span class="string">"deploy:stage"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/stage-site/"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"http-server -p 9090 dist/"</span>,</span><br><span class="line">    <span class="string">"live-reload"</span>: <span class="string">"live-reload --port 9091 dist/"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"npm run open:dev -s &amp;&amp; parallelshell \"npm run live-reload -s\" \"npm run serve -s\" \"npm run watch -s\""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很多时候就是因为准备的工具效率高， 开发者也因此得以集中精力于产品逻辑， 在更短的时间内开发出更好更稳定的产品。</p>
<h2 id="后记小结">后记小结</h2><p>npm script不是没有缺点的，就像我一再强调的，没有最好的工具， 只有最合适的使用场景， 在个人小项目适合的npm script，在大项目， 动辄几十万的前端项目的构建和测试下， npm script会显得特别臃肿和难以维护。 而目前大热的grunt\gulp\webpack也迎来了他们的舞台。下一期，集中介绍grunt和webpack，公司里使用的也是grunt，为什么它会在众多工具中脱颖而出。</p>
<h2 id="参考链接">参考链接</h2><ul>
<li><a href="https://www.zybuluo.com/yangfch3/note/249328" target="_blank" rel="external">用npm搭配脚本执行</a> npm 不仅可以用于模块管理，还可以用于执行脚本。对于多个任务的操作很方便！</li>
<li><a href="https://www.nczonline.net/blog/2016/03/mimicking-npm-script-in-node-js/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+nczonline+%28NCZOnline+-+The+Official+Web+Site+of+Nicholas+C.+Zakas%29" target="_blank" rel="external">Mimicking npm script in Node.js</a> The underlying mechanism of using npm script is that npm modifies the PATH environment variable so that it affects the lookup of executables. Run <code>npm install --save-dev eslint</code>, then do <code>npm run lint</code>, it works because npm script is actually running <code>node_modules/.bin/eslint</code>.</li>
<li><a href="http://gon.to/2015/02/26/gulp-is-awesome-but-do-we-really-need-it/" target="_blank" rel="external">Gulp is awesome, but do we really need it?</a></li>
<li><a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/" target="_blank" rel="external">How to Use npm as a Build Tool</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在自动构建工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[另一种鼓声-读《途客圈》有感]]></title>
    <link href="http://chocoluffy.com/2016/05/13/%E5%8F%A6%E4%B8%80%E7%A7%8D%E9%BC%93%E5%A3%B0-%E8%AF%BB%E3%80%8A%E9%80%94%E5%AE%A2%E5%9C%88%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://chocoluffy.com/2016/05/13/另一种鼓声-读《途客圈》有感/</id>
    <published>2016-05-14T01:45:08.000Z</published>
    <updated>2016-05-27T19:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>“如果你清醒地知道你要去哪儿，脑海中还保留着那份憧憬，那么你就能逢山开路，遇水搭桥，所有的阻碍都将成为一个个里程碑，被踩在你的身后……”</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/7c3aa7a1e64bda62.png" alt="生命不能承受之重"></p>
<h2 id="前言">前言</h2><p>在<a href="http://chocoluffy.com/2016/04/25/%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%EF%BC%8C-%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/">关于创业, 那些不能说的秘密</a>里主要记录了阅读<the hard="" thing="" about="" things="">的阅读手记， 而另一本几乎同时完成的书&lt;途客圈创业记&gt;的阅读记录思考，在这里分享。</the></p>
<p>在一个充斥着来自CEO乃至风险投资人视角的创业回顾的环境下， 一个来自技术合伙人(CTO)的视角显得尤为可贵。 从最早的技术选型， 到带领其它技术人员的开发和维护， 到技术过渡和商业选择， 陈天给了一份很详细和真挚的参考选项。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/6ceefbf6929babac.png" style="display: block; margin: 0 auto;"></p>
<p>每本书， 每个文字对不同的人意义都是不同的。 下面纪录了我在看完这本书之后的想法。</p>
<h2 id="关于创业，那所有无关技术的事">关于创业，那所有无关技术的事</h2><p>一开始不要设置过高的期权池， 期权池的主要目的是未来吸引和留住人才。期权与股权不同，股权代表所有权，期权代表的则是在特定的时间、以特定的价格购买特定所有权的权利，它可被视作是员工与公司之间关于股权买卖的一份合同。行权之后员工获得的股份是普通股。</p>
<h3 id="在创新工场里的打拼">在创新工场里的打拼</h3><p>在和创新工场就入驻细节的交谈中：</p>
<ul>
<li><p>清算优先权</p>
</li>
<li><p>反稀释条款</p>
</li>
</ul>
<p>如何雇佣到最好的人， 的确拥有创新工场这个名字更容易发现更好的技术人员。</p>
<p>nanfang就是通过创新工厂的招聘进来的。同时alex的官方博客和知乎都可以用来获取人才的来源。</p>
<h3 id="技术选型和工具库">技术选型和工具库</h3><p>当时作者使用的是amazon的四台最小免费计算单元， 用4个账号注册的。一台用来跑翻译， 一台跑wordpress， 一台跑toureet.com， 和另一台。 现在国内的云服务可以考虑阿里云。</p>
<p>在UI上要直观和实用。 一定要在第一轮宣传之前完成UI的设计和构架， 毕竟第一轮宣传之后， 往后的宣传的力度和效果都将大大不如之前。</p>
<p>同时也需要考虑的就是域名和注册的问题!!</p>
<p>要把钱花在刀刃上， 要舍得去花钱。app的制作是必须的!!!!!!!!尽管大家使用web的时间很多， 但是下载了一个app就是护城河。</p>
<p><strong>对于一些特别优秀的人， 一定要和他们经常讨论产品的发展方向， 因为对于他们来说， 他们之所以加入你， 已经不是因为技术的吸引力了， 而是因为他的声音很可能在塑造他准备推出的产品， 因为从未有的对产品的掌控力。而这， 也是创业的魅力吧!</strong></p>
<h3 id="市场推广">市场推广</h3><p>历时一个月的推广大赛， 烧了30万（加上员工的工资）， 换来的是一次性的用户， 看热闹的用户， 注册了3万多人， 然而没有什么用。</p>
<p>如果你战略上不是很清晰，你再做什么也是没有用的，<strong>是在用战术性的疲劳掩盖战略上的懒惰</strong>。百场汇不停地在战略层面做一些调整，所以战术上大家不会那么辛苦。一年来，百场汇全公司只有一个人离职。这对初创公司来说是很不容易的。</p>
<h2 id="关于功能的实用和噱头">关于功能的实用和噱头</h2><p>有没有想过如果微信把朋友圈的功能作为每一次打开的初始页面？而不是一直以来的群组或者单聊？首屏一定要放你最最核心的功能， 而社交是最为用户粘性的方式之一， 绝对不能喧宾夺主。或者说， 所有的工具式网站， 都应该考虑围绕那个工具所最最合适的社交场景。</p>
<p>比如微信的工具属性是：即时通讯和群聊， 那么聊天的社交场景就应该是： 让更多的人发现聊天的内容， 也从纯文字转换到图片和视频和直播， 乃至可以让更多的人加入和感受到聊天的这个场景里面。</p>
<p>比如网易云音乐的工具属性是： 发现和享受高品质音乐， 那么找音乐和听音乐的社交场景就应该是： 让更多的人去发现你喜欢和收藏的音乐， 并基于这些音乐进行进一步的交流。而我觉得一个非常非常棒的功能就是， 不仅仅允许用户分享他们自己创作的歌单， 而且允许把他们最常听的那25首歌显示出来。你不会欺骗你自己的耳朵。如果可以把这一栏更突出地显示会更好？！</p>
<h2 id="关于工具和社区的交叠和矛盾">关于工具和社区的交叠和矛盾</h2><p>每一个需求在被解决的时候， 产品是被工具化的， 而希望推广这种解决方案的时候， 产品是被社区化的。 现在大部分围绕工具性产品还是社区性产品的讨论， 如果被抽象出了产品本身要解决的问题的话， 基本都是废话和干扰。 拿两种使用场景和频率比较不同的方向做比较， 比如听音乐和旅游这两个商业方向。 </p>
<p>人们听音乐的两个需求， 在自己疲惫不爽的时候听到自己最喜欢的音乐， 和发现那些不认识却好听的音乐； 当然， 人们还会从分享自己组好的歌单或者评论里面得到分享和反馈的满足，但我认为这种行为是因为社区化带来的，因为在人群中， 所以也想得到人群的温暖和共鸣 ，但这种社会心理的需求我暂不归于听音乐本身的需求。 就拿网易云音乐APP作例子， 其本身在很多细节上做得很棒了， 但是我认为还可以提高的地方：</p>
<p>基于喜欢同一个专辑的乐众的社交兴趣小组。人们对自己喜欢的东西永远都有如数家珍般的热情。</p>
<p>从你不会骗自己的耳朵， 你最最经常听的25首歌。</p>
<p>同样发现别人最最经常听的25首歌。</p>
<p>用户对收集到歌曲的分类的自我重组。 应当支持双向的标记， 一是tag， 二是collection。像管理笔记一样去管理音乐， 同时将任何collection都注重社交化的分享， 像pinterest的理念学习。</p>
<p>评论分为两栏， 一栏是trending， 一栏是历史最热。 trending要像hackernews一样的不断让新事物涌现来代替旧评论， 而历史最热， 则是就硬碰硬的质量。原因？你不会去参加一个高低胜负已经分明的比赛。你之所倚评论， 你总会有被反馈的渴望， 而看见自己的文字被淹没是最最失落的， 哪怕你知道这的确不是最好的文字~</p>
<h2 id="关于期权池">关于期权池</h2><p>以下内容， 来源自知乎。可参考：<a href="http://zhuanlan.zhihu.com/p/20726127" target="_blank" rel="external">知乎专栏</a>, 作者：黄海, 著作权归作者所有。</p>
<p>可能有创业者会问了：我给了员工股份，他3个月以后就跳槽了，我不就亏了。当然不会，首先记住这是股权池，不是股份池。给的是股权，不是直接送股份。所谓股权，就是一定时候，可以以行使价格买入股票，这个行使价格由董事会决定，一般特别低。</p>
<h3 id="有股权的员工和创始人的区别">有股权的员工和创始人的区别</h3><p>你最早的员工可能和你一起度过了创业的全过程，而且还通过股权池获得股权，那你可能会问，那他们算创始人么？</p>
<p>答案是，他们与创始人还是有很大不同的。首先，如果他们不行使权利，他们甚至都不算是股东，话语权当然不一样。另外创始人开始都是、没有工资，甚至自己就是投资人，承担了所有的风险。员工就很不一样，依然是雇佣关系，除了失业风险较大，同时劳资可能相对低，但这些都是个人风险，而不是企业风险。所以还是有很大区别的。</p>
<p>越迟加入公司的员工需要冒的风险越低。</p>
<p>创始人应该最终拿整个公司大约50%的股份。首层下面的5层员工的每一层最终都分别分到大约10%的公司股份，每一层的员工都将平分这10%的股份。</p>
<p>现在，你搞定了一个公平的份股系统，但还有一个重要的原则：你必须执行“股份绑定”(vesting)。股份绑定期最好是 4 到 5 年。任何人都必须在公司做够起码 1 年才可持有股份（包括创始人）。好的股份绑定计划一般是头一年给 25%，然后接下来每个月落实 2%。否则，你的合作创始人将加入公司 3 个星期后跑掉，然后 7 年后又出现，并声称他拥有公司的 25% 的股份。</p>
<p>没有“股份绑定”条款，你派股份给任何人都是不靠谱的！</p>
<p>没有执行“股份绑定”是极其普遍的现象，后果可以十分严重。你看到有些公司的 3 个创始人没日没夜地工作了 5 年，然后你发现有些混蛋加入后 2 个星期就离开，这混蛋还以为他仍然拥有公司 25% 的股份，就因为他工作过的那 2 个星期。</p>
<p>好了，让我们清理一下整个设计蓝图中没搞定的小问题。</p>
<p>如果你的公司融资了，股份如何分割？</p>
<p>投资可以来自任何方向，一个天使投资人，一个风险投资公司，或者是某人的老爸。基本上，回答很简单：</p>
<p>新的投资将“稀释”所有人的股份。</p>
<p>千万不要用分配股权来解决这些问题。</p>
<p>其实，你只需要针对每位创始人拿的工资做好记帐：不拿工资创始人就给 她记着工资“欠条”。当公司有了足够现金，就根据这个工资欠条补发工资给她。接下来的几年中，当公司现金收入逐步增加，或者当完成第一轮风险投资后，你可 以给每一位创始人补发工资，以确保每一位创始人都可从公司得到完全一样的工资收入。</p>
<h3 id="创业构想提出者应该多拿股份吗？">创业构想提出者应该多拿股份吗？</h3><p>不拿。构想基本上是不值钱的。仅仅因为提出创业构想就获得更多股 权，因此导致纷争是不值得的。如果你们当中有人首先提出的创业构想，但你们都同时辞工并同时开始创业，你们应该拿同等的股份。为公司工作才是创造价值的原 因，而你洗澡的时候突发奇想的“创业点子”根本不值什么钱。</p>
<h3 id="创始人不全职投入工作？">创始人不全职投入工作？</h3><p>那么，他（们）就不能算是“创始人”。在我的概念中，如果 一个人不全职投入公司的工作就不能算是创始人。任何边干着他们其它的全职工作边帮公司干活的人只能拿工资或者工资“欠条”，但是不要给股份。如果这个“创 始人”一直干着某份全职工作直到公司拿到风投，然后辞工全职过来公司干活，他（们）和第一批员工相比好不了多少，毕竟他们并没有冒其他创始人一样的风险。</p>
<h3 id="如果有人给公司提供有价值的东西？">如果有人给公司提供有价值的东西？</h3><p>比如提供了设备， 专利或者是域名。</p>
<p>很好啊。按这些东西的价值支付现金或开个“欠条”咯，别给股份。你准确算一下他给公司带来的那台电脑的价值，或者他们自带的某个聪明的字处理专利的价格，给他们写下欠条，公司有钱后再偿还即可。在创业初期就用股权来购买某些公司需要的东西将导致不平等，纷争和不公平。</p>
<p><strong>再重复一遍!! 用欠条， 而不是股份解决问题!!!!解决大部分的资金纷争和各种帮助!!</strong></p>
<p>今天买来的用户，明天还是不会成为你的品牌用户。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>“如果你清醒地知道你要去哪儿，脑海中还保留着那份憧憬，那么你就能逢山开路，遇水搭桥，所有的阻碍都将成为一个个里程碑，被踩在你的身后……”</p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="商业评论" scheme="http://chocoluffy.com/tags/%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular入门-module和service]]></title>
    <link href="http://chocoluffy.com/2016/05/12/Angular%E5%85%A5%E9%97%A8-module%E5%92%8Cservice/"/>
    <id>http://chocoluffy.com/2016/05/12/Angular入门-module和service/</id>
    <published>2016-05-13T02:43:51.000Z</published>
    <updated>2016-05-27T19:03:20.000Z</updated>
    <content type="html"><![CDATA[<p>自己学习angular时候记录的学习笔记，这一篇主要讨论module和service。</p>
<a id="more"></a>
<h2 id="How_to_define_a_module?">How to define a module?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define a module</span></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>,</span><br><span class="line">    [<span class="string">'notesApp.ui'</span>, <span class="string">'thirdCompany.fusioncharts'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// look up a module.</span></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>);</span><br></pre></td></tr></table></figure>
<p>Also, make sure the file that defines the module is loaded first.</p>
<p>After defining the module, we use Angular to use these modules to bootstrap the application. <code>ng-app</code> takes an optional argument, the name of the modulr to load.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello AngularJS<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">      Hello &#123; &#123; 1 + 1 &#125; &#125;nd time AngularJS</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, []); </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Controller_in_Angular">Controller in Angular</h2><ul>
<li>fetching data from server to UI.</li>
<li>presentation logic.</li>
<li>user interaction, what will happen when user clicks something. </li>
</ul>
<p>An AngularJS controller is almost always directly linked to a view or HTML. We will <strong>never have a controller that is not used in the UI</strong> (that kind of business logic goes into services).</p>
<h3 id="HTML_code">HTML code</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, []) .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// Controller-specific code goes here</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'MainCtrl has been created'</span>);</span><br><span class="line">        &#125;]);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above code define a module that depends on nothing, and a controller and its dependencies in the second argument, an array(the last argument in that array is the actual function itself).</p>
<p>We also introduce a new directive, ng-controller. This is used to tell AngularJS to go instantiate an instance of the controller with the given name, and attach it to the DOM element. In this case, it would load MainCtrl, which would end up printing the console.log() statement.</p>
<h3 id="Angular_code">Angular code</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Notes App<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as ctrl"</span>&gt;</span></span><br><span class="line">      &#123; &#123; ctrl.helloMsg &#125; &#125; AngularJS.</span><br><span class="line">      <span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">      &#123; &#123; ctrl.goodbyeMsg &#125; &#125; AngularJS</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.helloMsg = <span class="string">'Hello '</span>;</span><br><span class="line">    <span class="keyword">var</span> goodbyeMsg = <span class="string">'Goodbye '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The reason why it only shows the the hello message it that: We <strong>defined the variable helloMsg on the controller’s instance</strong> (using the “this” keyword, and it is how we expose the data from controller to front-end UI), and the variable goodbyeMsg as a local inner variable in the controller’s in‐ stance (using the var keyword).</p>
<p>By using <code>ng-controller</code>, it allows us to associate an instance of controller with a UI element, in this case, the <body> tag.</body></p>
<p>“This” in javascipt, since it will be easily modified by whoever call the function, which causes the case that “this” inside and outside the function(the asychcronous function) may refer to two different objects. Thus, using a proxy variable will help!! Since with the help of the closure, that proxy varibale will always stay the same(pointing to “this”) inside the function.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> &#123; &#123; note.label &#125; &#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"status"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.done"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The two methods appear above are the same effect, but we recommend the second way, since the second one will be replaced before the the first one. </p>
<h2 id="Angular’s_working_flow">Angular’s working flow</h2><p>After the entire HTML is loaded, angular.js starts to find the <code>ng-app</code> directive, then using that directive, it looks for the angular modules defined and attached to that DOM element. </p>
<p>Then it starts to find other directive and binding elements inside the range. Every it meets <code>ng-controller</code> or <code>ng-repeat</code>, it creates a scope for that part of element. <strong>scopr is the context of that element</strong>, and it dictates what each DOM has access to in terms of functions, variables and so on.</p>
<p>Angular also adds <strong>watcher and listeners</strong> on HTML’s DOM element.</p>
<p>The way angular update the UI, only happens for a certain events including XHR, server calls, page loads and user interaction such clicks and type.</p>
<h3 id="what_is_XHR?">what is XHR?</h3><p>XMLHttpRequest (XHR) is an API available to web browser scripting languages such as JavaScript. It is used to send HTTP or HTTPS requests to a web server and load the server response data back into the script.</p>
<p>Data from the response can be used to alter the current document in the browser window without loading a new web page, and despite the name of the API, this data can be in the form of not only XML, but also JSON, HTML or plain text.</p>
<p>Ajax depends heavily on XHR.</p>
<h2 id="More_directive">More directive</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span> <span class="attribute">ng-class</span>=<span class="value">"ctrl.getNoteClass(note.done)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> &#123; &#123; note.label &#125; &#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"assignee"</span> <span class="attribute">ng-show</span>=<span class="value">"note.assignee"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.assignee"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.getNoteClass = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    done: status,</span><br><span class="line">    pending: !status</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>ng-show</code> and <code>ng-hide</code> can help display or hide the DOM element. <code>ng-class</code> will add class to DOM element depending on the [1] if it is string [2] it is a json object, assign the key by the value of that key. <code>ng-switch on=&quot;&lt;some variable value in scopr&gt;&quot;</code> with <code>ng-switch-when=&quot;&lt;the conditional value of that variable&gt;&quot;</code> will create the if-else effect directly in html.</p>
<h2 id="Testing_in_Angularjs">Testing in Angularjs</h2><h3 id="Test_Runner_Versus_Testing_Framework">Test Runner Versus Testing Framework</h3><p>We have often noticed that developers can sometimes get confused between the test runner and the testing framework. This could be because the same library often handles both responsibilities.</p>
<p>When working with JS (and AngularJS), we have two separate tools/ libraries for each purpose. Karma, which is the test runner, is solely responsible for finding all the unit tests in our codebase, opening browsers, running the tests in them, and capturing results. It does not care what language or framework we use for writing the tests; it sim‐ ply runs them.</p>
<p>Jasmine is the testing framework we will use. Jasmine defines the syntax with which we write our tests, the APIs, and the way we write our assertions. It is possible to not use Jasmine, and instead use something like mocha or some other framework to write tests for AngularJS.</p>
<h2 id="Model_in_angular">Model in angular</h2><p>The <code>ng-bind</code> and “{ {  } }” we see in the above example demonstrates the one-way data-binding in angular, to use two-way data-binding, we opt for <code>ng-model</code>. As expected, such functionality is heavily used in user form.</p>
<h2 id="Angular’s_service">Angular’s service</h2><p>service refers to reuseable api that can be shared across the applications. One obvious difference between controllers and services is <strong>services are independent of views</strong>, while controllers drives UI.  </p>
<h3 id="Dependency_injection">Dependency injection</h3><p><strong>Dependency injection is a concept that started more on the server side.</strong> Dependency injection states that instead of creating an instance of the dependent service when we need it, the class or function should ask for it instead and the “injector” will be responsible for figuring out how to create it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Without Dependency Injection</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDashboardData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $http = <span class="keyword">new</span> HttpService();</span><br><span class="line">  <span class="keyword">return</span> $http.get(<span class="string">'my/url'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// With Dependency Injection</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDashboardData</span>(<span class="params">$http</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $http.get(<span class="string">'my/url'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The two probable ways to write service and why the latter is better? In the first example, we use “new” keyword, we have new instance everytime we use service while <strong>service in angular is singletons for the scope of our application, </strong> and two controllers ask for service A will get the vary same instance!</p>
<p>To use built-in services, we should remember that the built-in services are prefixed with “<code>$</code>“ sign like “<code>$log</code>“, “<code>$http</code>“ and so on.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myModule.controller(<span class="string">"MainCtrl"</span>, [<span class="string">"$log"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$log</span>) </span>&#123;&#125;]);</span><br><span class="line"></span><br><span class="line">myModule.controller(<span class="string">"MainCtrl"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$log</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>And here are the two ways we usually inject services, but why we prefer the former one, the one with safe style of dependency injection. </p>
<p>Because of the “uglify” procedure. During the uglifing process, the variable will be shortened to some random string, while at that time, we won’t be able to tell which service it is using! Also, since the “uglify” won’t change string constant, it will help to identify which service we are using. </p>
<p>Why we call “injection”? because the way we use those services like <code>myModule.controller(&quot;MainCtrl&quot;, [&quot;$log&quot;, &quot;$window&quot;, function($l, $w) {}]);</code> is similar to injecting those services for the function to use. </p>
<h3 id="Some_common_services">Some common services</h3><h4 id="$location">$location</h4><p>The <code>$location</code> service in AngularJS allows us to interact with the URL in the browser bar, and get and manipulate its value. Any changes made to the <code>$location</code> service get reflected in the browser, and any changes in the browser are im‐ mediately captured in the <code>$location</code> service. The <code>$location</code> service has the fol‐ lowing functions, which allow us to work with the URL:</p>
<ul>
<li>absUrl. A getter that gives us the absolute URL in the browser (called <code>$location</code>. absUrl()).</li>
<li>url. A getter and setter that gets or sets the URL. If we give it an argument, it will set the URL; otherwise, it will return the URL as a string.</li>
<li>path. Again, a getter and setter that sets the path of the URL. Automatically adds the forward slash at the beginning. So <code>$location.path()</code> would give us the current path of the application, and <code>$location.path(&quot;/new&quot;)</code> would set the path to /new.</li>
<li>search. Sets or gets the search or query string of the current URL. Calling <code>$location.search()</code> without any arguments returns the search parameter as an ob‐ ject. Calling <code>$location.search(&quot;test&quot;)</code> removes the search parameter from the URL, and calling <code>$location.search(&quot;test&quot;, &quot;abc&quot;);</code> sets the search parameter test to abc.</li>
</ul>
<h4 id="$http">$http</h4><p>We will deal with <code>$http</code> extensively in Chapter 6, but it is the core AngularJS service used to make XHR requests to the server from the application. Using the <code>$http</code> service, we can make GET and POST requests, set the headers and caching, and deal with server responses and failures.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.tab = <span class="string">'first'</span>;</span><br><span class="line">    self.open = <span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">      self.tab = tab;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;])</span><br><span class="line">  .controller(<span class="string">'SubCtrl'</span>, [<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ItemService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>; self.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ItemService.list(); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    self.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ItemService.add(&#123;</span><br><span class="line">        id: self.list().length + <span class="number">1</span>,</span><br><span class="line">        label: <span class="string">'Item '</span> + self.list().length</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// we created ItemService using angular's module function: factory. </span></span><br><span class="line">  .factory(<span class="string">'ItemService'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> items = [</span><br><span class="line">      &#123;id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>&#125;,</span><br><span class="line">      &#123;id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items; </span><br><span class="line">      &#125;,</span><br><span class="line">      add: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        items.push(item);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>The point in the above example is that if we add one more item in one of the tabs, we can also see that item in the other tab, because the itemService instance in both tabs are the same. To summerize:</p>
<p>AngularJS guarantees the following:</p>
<ul>
<li>The service will be lazily instantiated. The very first time a controller, service, or directive asks for the service, it will be created.</li>
<li>The service definition function will be called once, and the instance stored. Every caller of this service will get this same, singleton instance handed to them.</li>
</ul>
<h3 id="Factory,_provider_and_service">Factory, provider and service</h3><p><strong>There are several ways to defining a service: factory, provider and service.</strong></p>
<p>we use “factory” if we define the service in a more functional way, like in the previous example, we return an object that contains functions; or we can use “service” if we define the service in a classic class\OO way, which doesn’t return anything. </p>
<p>An example of using “serive” is followed:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ItemService</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [</span><br><span class="line">        &#123;id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>&#125;,</span><br><span class="line">        &#123;id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>&#125;</span><br><span class="line">      ];</span><br><span class="line">  <span class="keyword">this</span>.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        items.push(item);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .service(<span class="string">'ItemService'</span>, [ItemService])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.tab = <span class="string">'first'</span>; self.open = <span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">          self.tab = tab;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;])</span><br><span class="line">  .controller(<span class="string">'SubCtrl'</span>, [<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ItemService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>; self.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ItemService.list(); </span><br><span class="line">    &#125;;</span><br><span class="line">    self.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ItemService.add(&#123;</span><br><span class="line">            id: self.list().length + <span class="number">1</span>,</span><br><span class="line">            label: <span class="string">'Item '</span> + self.list().length</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="Communication_with_server">Communication with server</h3><p><code>$http</code> is a core AngularJS service that allows us to communicate with server endpoints using XHR. Like XHR such tedious task, we usually instantiate a XMLHttpRequest Object and read the response, check the error codes and so on, or using jquery’s <code>$.ajax</code> syntax. </p>
<p>Also, it follows the Promise interface.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'resourceApp'</span>, [<span class="string">'ngResource'</span>])</span><br><span class="line">    .factory(<span class="string">'ProjectService'</span>, [<span class="string">'$resource'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$resource</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $resource(<span class="string">'/api/project/:id'</span>); </span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure>
<p><strong>use <code>ngResource</code> to handle RESTful API </strong> as it will make it extremely easy to send the “GET”\”POST” request to the server. In the above example, we produce a service called “ProjectService”, which depends on the built-in module called “<code>$resource</code>“, which wraps the RESTful endpoint to make our life easier as we can then use:</p>
<ul>
<li>ProjectService.query() to get a list of projects.</li>
<li>ProjectService.save({id: 15}, projectObj) to update a project with ID 15.</li>
<li>ProjectService.get({id: 19}) to get an individual project with ID 19.</li>
</ul>
<p>The following is a full-fledged example, showing how to use <code>ngResource</code> in front end to cooperate with the back end.</p>
<div style="text-align:center" markdown="1"><br>  <iframe src="http://angular-example-dev.us-east-1.elasticbeanstalk.com/http-post-example.html" width="100%" height="500"><br>    <p>Your browser does not support iframes.</p><br>  </iframe><br></div>

<p>The source code is listed as followed:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js (Express 4.0)</span></span><br><span class="line"><span class="keyword">var</span> express        = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> morgan         = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser     = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"><span class="keyword">var</span> app            = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>)); <span class="comment">// this line is important as we will serve those html file directly in screen as option, in those html front-end example, we will use angular's ngResource to create http request for the backend of this server.js (the endpoint we just created using express's router).</span></span><br><span class="line">app.use(morgan(<span class="string">'dev'</span>)); 					<span class="comment">// log every request to the console</span></span><br><span class="line">app.use(bodyParser()); 						<span class="comment">// pull information from html in POST</span></span><br><span class="line">app.use(methodOverride()); 					<span class="comment">// simulate DELETE and PUT</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = [</span><br><span class="line">  &#123;id: <span class="number">1</span>, label: <span class="string">'First Note'</span>, author: <span class="string">'Shyam'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">2</span>, label: <span class="string">'Second Note'</span>, author: <span class="string">'Brad'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">3</span>, label: <span class="string">'Middle Note'</span>, author: <span class="string">'Someone'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">4</span>, label: <span class="string">'Last Note'</span>, author: <span class="string">'Shyam'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">5</span>, label: <span class="string">'Really the last Note'</span>, author: <span class="string">'Shyam'</span>&#125;</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> lastId = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/note'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(notes);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">'/note'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> note = req.body;</span><br><span class="line">  note.id = lastId; <span class="comment">// An smart way to keep track of the last id.</span></span><br><span class="line">  lastId++;</span><br><span class="line">  notes.push(note);</span><br><span class="line">  res.send(note);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/note/:id/done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> noteId = req.params.id;</span><br><span class="line">  <span class="keyword">var</span> note = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; notes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes[i].id == req.params.id) &#123;</span><br><span class="line">      note = notes[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  note.label = <span class="string">'Done - '</span> + note.label;</span><br><span class="line">  res.send(notes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/note/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; notes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes[i].id == req.params.id) &#123;</span><br><span class="line">      res.send(notes[i]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(&#123;msg: <span class="string">'Note not found'</span>&#125;, <span class="number">404</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/note/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; notes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes[i].id == req.params.id) &#123;</span><br><span class="line">      notes[i] = req.body;</span><br><span class="line">      notes[i].id = req.params.id;</span><br><span class="line">      res.send(notes[i]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(&#123;msg: <span class="string">'Note not found'</span>&#125;, <span class="number">404</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'API LOGIN FOR '</span>, req.body);</span><br><span class="line">  res.send(&#123;msg: <span class="string">'Login successful for '</span> + req.body.username&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, router);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Open http://localhost:8000 to access the files now'</span>); <span class="comment">// shoutout to the user</span></span><br></pre></td></tr></table></figure>
<p>And the front-end part code is:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- File: chapter6/public/http-post-example.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>HTTP Post Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">    <span class="class">.item</span> <span class="rules">&#123;</span><br><span class="line">      <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello Servers!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"todo in mainCtrl.items"</span></span><br><span class="line">       <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"todo.label"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>- by <span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"todo.author"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"todo.messege"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">name</span>=<span class="value">"addForm"</span></span><br><span class="line">          <span class="attribute">ng-submit</span>=<span class="value">"mainCtrl.add()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span></span><br><span class="line">             <span class="attribute">placeholder</span>=<span class="value">"Label"</span></span><br><span class="line">             <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.newTodo.label"</span></span><br><span class="line">             <span class="attribute">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span></span><br><span class="line">             <span class="attribute">placeholder</span>=<span class="value">"Author"</span></span><br><span class="line">             <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.newTodo.author"</span></span><br><span class="line">             <span class="attribute">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">placeholder</span>=<span class="value">"messege"</span> <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.newTodo.messege"</span> <span class="attribute">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span></span><br><span class="line">             <span class="attribute">value</span>=<span class="value">"Add"</span></span><br><span class="line">             <span class="attribute">ng-disabled</span>=<span class="value">"addForm.$invalid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span></span><br><span class="line">  <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.11/angular.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">  angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">    .controller(<span class="string">'MainCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      self.items = [];</span><br><span class="line">      self.newTodo = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> fetchTodos = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/note'</span>).then(</span><br><span class="line">            <span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">              self.items = response.data; <span class="comment">// set the items to be the return data.</span></span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span><span class="params">(errResponse)</span> </span>&#123;</span><br><span class="line">              console.error(<span class="string">'Error while fetching notes'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      fetchTodos();</span><br><span class="line"></span><br><span class="line">      self.add = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $http.post(<span class="string">'/api/note'</span>, self.newTodo)</span><br><span class="line">            .then(fetchTodos) <span class="comment">// update items.</span></span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">              self.newTodo = &#123;&#125;; <span class="comment">// clear the form.</span></span><br><span class="line">            &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;]);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="$http_in_detail">$http in detail</h3><p>Promise-style syntax.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.items = [];</span><br><span class="line">    $http.get(<span class="string">'/api/note'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      self.items = response.data;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">errResponse</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">'Error while fetching notes'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>why Promise is better? try thinking about a case when we have to make 3 http request in a row, when the latter ones will depend on the information from the first ones. If using callbacks, we will need to nest them all together!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$http.get(<span class="string">'/api/server-config'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">configResponse</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/api/'</span> + configResponse.data.USER_END_POINT);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">userResponse</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/api/'</span> + userResponse.data.id + <span class="string">'/items'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">itemResponse</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// Display items here</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Common error handling</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Additional_information">Additional information</h2><h3 id="difference_between_Promise_and_callback_in_js?">difference between Promise and callback in js?</h3><p>As for their effect, they are pretty like the same in terms of being asynchronous while Promise’s syntax looks far more clear than nested callbacks.</p>
<p>Promises provide a more succinct and clear way of representing sequential asynchronous operations in javascript. They are effectively a different syntax for achieving the same effect as callbacks. The advantage is increased readability. Something like this</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aAsync()</span><br><span class="line">  .then(bAsync)</span><br><span class="line">  .then(cAsync)</span><br><span class="line">  .done(finish);</span><br><span class="line"><span class="comment">// Promise is much more readable then the equivalent of passing each of those individual functions as callbacks, like:</span></span><br><span class="line"></span><br><span class="line">Async(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bAsync(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cAsync(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            finish()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>简单来说， Promise就是syntactic sugar。Everything that can be written in Promise can be written in nested callbacks.</p>
<h3 id="difference_between_websocket_and_RESTful_API?">difference between websocket and RESTful API?</h3><p>It really depends on the context, whether it requires less interaction like reading a blog, or requires time browsing; or it requires rich interaction and messege sending. For the former, close the connection during reading or browsing may actually save resources, which is exactly what HTTP does, while the latter one calls for websocket!!</p>
<p><strong>HTTP is a pull service, while websocket is bidirectional.</strong></p>
<p>参考<a href="https://www.pubnub.com/blog/2015-01-05-websockets-vs-rest-api-understanding-the-difference/" target="_blank" rel="external">这篇博客</a>介绍得非常详细!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己学习angular时候记录的学习笔记，这一篇主要讨论module和service。</p>]]>
    
    </summary>
    
      <category term="angularjs" scheme="http://chocoluffy.com/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一派胡言[第三期]-民主的不满]]></title>
    <link href="http://chocoluffy.com/2016/05/07/%E4%B8%80%E6%B4%BE%E8%83%A1%E8%A8%80-%E7%AC%AC%E4%B8%89%E6%9C%9F-%E6%B0%91%E4%B8%BB%E7%9A%84%E4%B8%8D%E6%BB%A1/"/>
    <id>http://chocoluffy.com/2016/05/07/一派胡言-第三期-民主的不满/</id>
    <published>2016-05-08T01:07:37.000Z</published>
    <updated>2016-05-12T18:12:40.000Z</updated>
    <content type="html"><![CDATA[<p>我不清楚我的选择会是什么， 但这并不是我拒绝去看这个问题的理由， 或许在相信他们针锋相对的背后， 就是我的立场。</p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/772fc5772b052551.jpeg" alt="flower"></div>

<p>自由， 就在于人们选择他们价值与目标的能力。</p>
<p>我们在政治生活中公民的或者塑造性的一面在很大程度上， 已经让位于自由主义。 而这正是我们现在参与政治活动的困境， 政治， 或者说， 公共哲学， 是否应该具有塑造性。</p>
<p>古代的政治理论， 比如亚里士多德， 认为政治的目标就是培养德行和达到某种的善。而这种达到某种善的观点， 在现在非常容易被反驳， 我们很容易说， 这是价值判断， 什么是善呢？什么是你认为的善的呢？先抛开价值判断的这种做法来说， 毕竟如果在情愿对一件事， 一种态度深入了解之前就放弃了解它的机会的话， 我们会错过很宝贵的东西。回到这种良善的想法， 其实这种观念自然地会发展出一种社会契约论， 而这个契约的目的正是保证人们往那种善的方向发展。它要求人们需要有对公共事务的知识， 归属感， 对集体的关系， 和共同道德的维系， 一种公民的参与感（相比于现在的自由主义）。</p>
<p>对一个共同方向的认可， 意味着牺牲某些个人意愿。这是我们都能想到的， 而这种取舍， 或许就是其中一个定义了自由主义和上述共和主义的区别之一。自由主义的宣扬者会说， 政治理论不是某种特定的良善生活观念， 而是坚持宽容、公正的程序以及尊重个人权利， 从各种美国最高法院的判决案例我们也能看出一些倾向性， 自由言论的权利是被美国人民镌刻在心的一种inborn权利， 法官对任何有可能伤害到这种自由的嗅觉是异常灵敏， 或许也是缘因美国人心里对大政府天生的反感。</p>
<p>我们能不能用之前所说的价值判断这种说法， 来指出共和主义的问题而支持自由主义呢？ 其实仔细想想， 这种价值判断的论断核心是相对主义。 相对主义的一个明显的标志就是， 不去主张什么， 而是变现为质问“谁来判断？谁来决定？”。 他们会问， 什么是良善？什么是高雅和污秽？ 然而我们也可由此问回他们“什么才是他们口中的宽容、自由和公平呢？”。以相对主义来为自由主义辩护根本就算不上是一种辩护。</p>
<p>但仔细去追究自由主义和共和主义， 我们会发现一个经常提出的问题， 权利和善哪个更重要？这里的善， 我们可以想为是一种道德上的义务， 和认同。我们究竟是一副无负荷自我（the unencumbered self）的自由主义形象, 还是为我们家庭、民族、文化的身份所赋予的目标所束缚？在很多情况下， 也正是这些束缚带给我们困境和痛苦。</p>
<p>举一个栗子， 内战前的罗伯特李大将军， 身为联邦军队的一名高级将领， 李将军反对分裂， 然后再战争迫近的时候， 他认为他对弗吉尼亚州的责任超过了他对联邦的责任， 于是他毅然会到家乡， 和他的家乡人民共患难。一个让人心酸的困境。如果我们认为，与自己人民站在一起的召唤是一种道德要求而不是情感表达的话， 这正是印证了前文关于良善， 关于道德义务上的困境。相反， 一个自由主义者， 他们没有这样子的束缚， 他们只为他们选择去承担的责任所约束， 也只去承担他们选择去承担的部分。仔细想想， 我们其实常常崇敬这些像李将军一样的人，不一定是因为他们做出的选择， 而是因为他们的考虑所反映的特质－－作为能够反思自身处境的存在者， 看清楚自己的生命处境并担当起来， 自己深深卷入其中的特定生活对自己有所要求， 而自己又意识到这种生活的特殊性， 也就是说意识到存在更加广阔的世界， 另外的生活方式。</p>
<p>书摘 摘自《民主的不满》</p>
<p>2015.7.26</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我不清楚我的选择会是什么， 但这并不是我拒绝去看这个问题的理由， 或许在相信他们针锋相对的背后， 就是我的立场。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="社会人物" scheme="http://chocoluffy.com/tags/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E7%89%A9/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AWS elastic beanstalk使用体验]]></title>
    <link href="http://chocoluffy.com/2016/05/04/AWS-elastic-beanstalk%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>http://chocoluffy.com/2016/05/04/AWS-elastic-beanstalk使用体验/</id>
    <published>2016-05-05T01:03:58.000Z</published>
    <updated>2016-05-13T17:55:01.000Z</updated>
    <content type="html"><![CDATA[<p>本文对目前市面上的主流Paas(platform as a service)提供商进行了比较， 比如heroku和amazon家的新星elastic beanstalk。并以一个nodejs爬虫的实例部署在了eb的服务器上。很多关于服务器端的概念也因此理清了， 比如reverse proxy server, dynamic IP addressing和后端的一些配置。也在文章中做个小结， 分享给感兴趣的大家。</p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/de08e7610183200c.png" alt="aws"></div>

<h2 id="概览">概览</h2><p>将之前用nodejs写的对<a href="https://cnodejs.org/?tab=good" target="_blank" rel="external">cnode社区精华帖</a>的爬虫放在AWS的EC2 instance下管理， 利用elastic beanstalk来对AWS资源进行分配和调控， 由于使用的还是free-tier的single instance， 则elastic beanstalk所特有的load-balancing的优势没有办法享受到。</p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/69662ed94ae1f3ff.png" alt="ebean"></div>

<p>一开始如果直接按照AWS给的方法, <code>eb init</code>初始化一个elastic beanstalk的项目， <code>eb create</code>创建一个environment和一个EC2实例, 然后<code>eb deploy</code>将.git里面committed的改动push到elastic beanstalk的生产环境里面， 然后用<code>eb open</code>来打开这个IP address， 如果之后需要终止这个app的话， 就<code>eb terminate</code>就好了。</p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/143c21d61cd3cf33.png" alt="heroku"></div>

<p>如果之前有使用heroku的经验的话， 其实你会发现其实amazon elastic beanstalk和heroku提供的服务非常相似， 实际上， 就这两家服务的定位而言， 都是platform as a service（Paas）， 也就是让developer可以将网站， 移动端部署在云端(cloud)不需要顾虑backend server和database的configuration。 而heroku本身相对于其他市面上的Paas在auto-scaling上做得更加出色， 它的computing resources(dyno)可以按照计算的需求而叠加从而满足在高流量下的网站后端流畅运行。而近几年amazon的elastic beanstalk的出现， 在这个Paas的市场给我们developer多一个很好的选择。就自己的使用而言， 感觉两者的command line interface其实设计得差不多， 都很简洁方便， 不过相比heroku， amazon的AWS还涉及租用到计算单元EC2, 就配置的操作来说， 你在配置AWS的服务上需要花更多的时间去设置环境变量和考虑密钥存储， 毕竟你可能有时候有ssh远程登陆amazon linux服务器的需求。相比之下， heroku的配置就是很简单的在<code>~/.bashrc</code>文件里面添加toolbelt文件夹的路径了。</p>
<blockquote>
<p> 其实heroku它本身就是deploy在了AWS上的呀😂， 所以理论上在performance上不会有太大的差别。</p>
</blockquote>
<p>而在pricing上， 我认为AWS的价格和服务会更加的实惠， 毕竟考虑到你有一张信用卡就可以申请到你一年的free-tier的single instance的使用权利， 而single instance对一些小型的side project来说完完全全是够用的呀。即便不够用， 换成large instance也是several clicks away， 反正也是按用量收费， 经济实惠!</p>
<h2 id="遇到的问题">遇到的问题</h2><p>第一个使用EB部署的应用是一个nodejs爬虫， 负责爬去cnode社区的精华帖， 然后返回一个json object收集精华帖的link, 标题和作者avatar， 为了显示的直观， 我并没有写前端的样式， 而是直接<code>JSON.stringify(json)</code>然后send会浏览器。之后如果仅仅作为REST API使用的话， 还需要在router上修饰一下URL。目前还是有点粗糙的。<a href="https://github.com/AirLoft/web-scraper" target="_blank" rel="external">github链接</a></p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/9fd7dd3d203d2d91.png" alt="demo"></div>

<p>一开始我直接将在本地localhost运行的版本deploy到了elastic beanstalk上， 由于缺少了这一行配置<code>var port = process.env.PORT || 3000;</code>， 我直接把port定在了3000， 而elastic beanstalk是有应该占用的port的， 所以得到了“502 bad gateway error”。</p>
<p>还有一点需要注意的是<code>npm start</code>这个npm script里面的配置， AWS elastic beanstalk会找到这条指令并去执行来执行相应的js文件， 比如我把写cnode网站的爬虫写在了cnode.js里面， 那么我需要</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node cnode.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>来保证服务器执行的是我对cnode这个网站的爬虫。</p>
<h2 id="Q&amp;A">Q&amp;A</h2><p>以下内容是我在自己折腾Elastic Beanstalk的时候收集的一些比较简练而准确的总结， 在这里分享给大家。 其实amazon的AWS教程写得非常详细的， 大家自己如果有能力最好去尝试自己阅读和实践它给的例子!</p>
<p><strong>How elastic beanstalk works?</strong><br>Now you have a web app running in AWS Elastic Beanstalk. As Elastic Beanstalk creates your environment, it <strong>interacts with several other AWS services</strong> to create the resources required to run your web app securely and resiliently.</p>
<p><strong>How EC2 instance works?</strong><br>EC2 instance – A virtual machine that runs Amazon Linux or Microsoft Windows Server and that is configured to run web apps on the platform that you choose.<br>Each platform runs a different set of software, configuration files, and scripts to support a specific language version, framework, web container, or combination thereof. Most platforms <strong>use either Apache or nginx as a reverse proxy</strong> that sits in front of your web app, forwards requests to it, serves static assets, and generates access and error logs.</p>
<p><strong>What is reverse proxy server?</strong><br>A proxy server is a go-between or intermediary server that forwards requests for content from multiple clients to different servers across the Internet. A reverse proxy server is a type of proxy server that typically <strong>sits behind the firewall in a private network</strong> and directs client requests to the appropriate backend server. A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.</p>
<p>Common uses for a reverse proxy server include:</p>
<ul>
<li>Load balancing – A reverse proxy server can act as a “traffic cop,” sitting in front of your backend servers and distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer redirects traffic to the remaining online servers.</li>
<li>Web acceleration – Reverse proxies can compress inbound and outbound data, as well as cache commonly requested content, both of which speed up the flow of traffic between clients and servers. They can also perform additional tasks such as SSL encryption to take load off of your web servers, thereby boosting their performance.</li>
<li>Security and anonymity – By intercepting requests headed for your backend servers, a reverse proxy server protects their identities and acts as an additional defense against security attacks. It also ensures that multiple servers can be accessed from a single record locator or URL regardless of the structure of your local area network.</li>
</ul>
<p><strong>What is amazon s3 bucket?</strong><br>Amazon S3 bucket – A storage location for your source code, logs, and other artifacts that are created when you use Elastic Beanstalk.</p>
<p><strong>How your domain will look like?</strong><br>Domain name – A domain name that routes to your web app in the form subdomain.region.elasticbeanstalk.com.</p>
<p><strong>When should I use AWS Lambda versus Amazon EC2?</strong></p>
<p>Amazon Web Services offers a set of compute services to meet a range of needs.</p>
<p>Amazon EC2 offers flexibility, with a wide range of instance types and the option to customize the operating system, network and security settings, and the entire software stack, allowing you to easily move existing applications to the cloud. With Amazon EC2 you are responsible for provisioning capacity, monitoring fleet health and performance, and designing for fault tolerance and scalability. AWS Elastic Beanstalk offers an easy-to-use service for deploying and scaling web applications in which you retain ownership and full control over the underlying EC2 instances. Amazon EC2 Container Service is a scalable management service that supports Docker containers and allows you to easily run distributed applications on a managed cluster of Amazon EC2 instances.<br>AWS Lambda makes it easy to execute code in response to events, such as changes to Amazon S3 buckets, updates to an Amazon DynamoDB table, or custom events generated by your applications or devices. With Lambda you do not have to provision your own instances; Lambda performs all the operational and administrative activities on your behalf, including capacity provisioning, monitoring fleet health, applying security patches to the underlying compute resources, deploying your code, running a web service front end, and monitoring and logging your code. AWS Lambda provides easy scaling and high availability to your code without additional effort on your part.</p>
<p><strong>To create a hosted zone in Amazon Route 53</strong></p>
<ul>
<li>Open the Amazon Route 53 management console.</li>
<li>Choose Hosted Zones.</li>
<li>Choose Create Hosted Zone.</li>
</ul>
<p>For Domain Name, type the domain name that you own. For example: example.com.</p>
<p>Choose Create.</p>
<p>Next, add a CNAME record to the hosted zone. A CNAME record registers a domain name that you own as an alias of your web app environment’s elasticbeanstalk.com subdomain.</p>
<p>When an Amazon Route 53 DNS server receives a name request for your custom domain name, it resolves to the elasticbeanstalk.com subdomain, which resolves to the public DNS name of your Elastic Load Balancing load balancer, which resolves to your web app’s IP address.</p>
<p>Note<br>In a single-instance environment, the elasticbeanstalk.com subdomain resolves to an Elastic IP address attached to the instance running your web app.</p>
<p><strong>关于elastic beanstalk的价格</strong><br>有小伙伴在comment里面提问， 如果用完了一年的free-tier的话， 价格怎么计算呢? 可以参考下amazon的<a href="https://aws.amazon.com/elasticbeanstalk/pricing/" target="_blank" rel="external">这篇介绍</a>里面详细记录了EC2, S3, DB等等AWS相关服务的价格。如果是个人的side project, 对CPU和图片等用户信息存储的需求不是特别大的话， 免费的plan或者是micro的instance是完全够用的， 如果是在某方面的需求特别大， 比如说unsplash这个高清摄影图片分享的社区。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/bb0b5ef1d0298d11.png" alt="unsplash"></p>
<p> unsplash将用户上传的照片存储在Amazon的S3服务上会比较安全和便捷，(搭配着Imgix这个service使用)， 具体的网站花销可以参考<a href="http://backstage.crew.co/what-does-unsplash-cost/" target="_blank" rel="external">这篇博文</a>， 里面记录了unsplash一个月网站使用的各种服务的明细记录， 也可以给一些希望做图片分享社区的创业者们一个参考。一个值得注意的点是， unsplash的花销是比较适合借鉴的， 因为unsplash和目前许多的创业公司一样， 选择将自己的主服务host在heroku这个平台， 选择S3等等主流的服务， 不像一些更geeky的公司可能为了省钱就自己来搭建和管理自己的服务器和数据库。 当然， 管理成本和维护成本都要考虑进去， 所以综上我才认为unsplash的例子是非常值得借鉴的!</p>
<h2 id="参考链接">参考链接</h2><p>下面的链接是我在自己尝试搭建环境时参考的内容， 以及我选择free-tier的configuration的页面。其中就有以express为例子的服务端环境搭建。</p>
<ul>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html#set_aes_home_linux" target="_blank" rel="external">setting up EC2 cli on mac</a> we store EC2 api tool, aws-access-key and aws-secret-key in <code>~/.bashrc</code>, so that we can use the shortcut commands to do <code>init\create\deploy\open</code>. The common commands are listed as followed.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eb init</span><br><span class="line">eb create</span><br><span class="line">eb deploy</span><br><span class="line">eb open</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://docs.aws.amazon.com/quickstarts/latest/webapp/welcome.html" target="_blank" rel="external">A high level explanation of what EB does and what can we config</a> trying to give a high-level description of what is the use and purpost of each AWS service, including EC2, the reverse proxy server sitting in front of servers, router 53 and so on so forth.</li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html" target="_blank" rel="external">A detailed explanation of how to host an express app on EB full-step tutorial</a> The tutorial uses an express app to explain how to use EB.</li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs.html" target="_blank" rel="external">How to deploy a nodejs project to EB</a> similar to the previous tutorial post.</li>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html" target="_blank" rel="external">how to connect to EC2 instance using ssh</a><br>by using <code>ec2-describe-instances</code>, we can get the id of my instance.</li>
</ul>
<p>So after we have created an project, we go to the elastic beanstalk console, we will see the dashboard of all the application I host on EB such as the recent one(webscraper). The following is a screen capture of the configuration of that application on EB as in a free-tier plan:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/7c3a33a6cfab0843.png" alt="configuration"> In this page, we can set the scaling option from single instance to load-balanced configuration, and when we add a load-balancer, it will automatically adjust the number of instances depending on the need.</p>
<p>When you turn on load balancing, Elastic Beanstalk creates a load balancer, deletes the Elastic IP address from your environment, and provisions a new EC2 instance. Elastic Beanstalk also updates DNS records to point the web app’s domain name to the load balancer instead of to the IP address of a single instance.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文对目前市面上的主流Paas(platform as a service)提供商进行了比较， 比如heroku和amazon家的新星elastic beanstalk。并以一个nodejs爬虫的实例部署在了eb的服务器上。很多关于服务器端的概念也因此理清了， 比如reverse proxy server, dynamic IP addressing和后端的一些配置。也在文章中做个小结， 分享给感兴趣的大家。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://chocoluffy.com/tags/AWS/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[第一期]AirLoft组织动员宣言]]></title>
    <link href="http://chocoluffy.com/2016/04/27/%E7%AC%AC%E4%B8%80%E6%9C%9F-AirLoft%E7%BB%84%E7%BB%87%E5%8A%A8%E5%91%98%E5%AE%A3%E8%A8%80/"/>
    <id>http://chocoluffy.com/2016/04/27/第一期-AirLoft组织动员宣言/</id>
    <published>2016-04-28T01:46:44.000Z</published>
    <updated>2016-04-28T01:49:28.000Z</updated>
    <content type="html"><![CDATA[<p>The best education comes from inside. </p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/b000a844b66d48d1.jpg" alt="pink"></div>

<h2 id="Orientation">Orientation</h2><p>这个ada内部组织airloft成立的目的， 是我希望大家能在一个更加紧密和熟悉的环境下分享和学习课外知识， 采用github托管的形式是因为它管理代码的高协作效率和peer review的便捷。</p>
<p>为了保证大家自学步骤的一致性和自由发挥的空间， 我决定采取的是任务发布形式。 <strong>每周会由我或我指定的负责人发布1-2篇的教程或任务</strong>， 任务内容从刚入门的git的使用与协作， 到之后的网站样式布局， 移动端，动效设计，后端编程都会涉及， 而教程则主要来源于<strong>所有有心人对某些创意点子的实现过程无论成败的记录(任何人都可以发布)</strong>。 我不会在任务完成度上给大家太多压力， 但是所有的任务都会指向最终AirLoft移动端APP及一系列配套web app的诞生， 能够深入互动参与每个方向讨论和实践并自己动手coding的人， 也会收获远比完成一个作品， 一个产品更多也更重要的东西， being insightful and clear of what you really want to do。</p>
<p>组织内部大致的方向：<br>我主导的 - AirLoft reactive native的开发， 并将Airloft网站端从angular1.4全部由react重写。<br>朱子宁主导的 - 爬虫scripts， 对于校园内部热门活动消息，教务信息和周边消息的收集和呈现。<br>Joyce主导的 - 走进多大的web app及html5微信移动页面。<br>Jerry主导的 - 基于GPS的餐饮外卖信息呈现和成交平台。</p>
<p>每个方向都由不同的coding侧重点， 每个人可自由参与任意方向， <strong>不强制任务进度， 但强制定期分享。</strong>就最终成果而言， 作品与作品之间可以相互配合和改善， 举个例子， 我会使用服务器端的爬虫来收集兴趣小组的讯息， 会在之后的宣传阶段用html5写移动端的宣传页面， 而基于GPS本身就是AirLoft的功能基础。</p>
<p>而需要再强调一遍的是， <strong>任何人， 在任何时候， 都可以提出新的开发方向和想法， 无论关乎技术还是设计还是美工还是用户体验。</strong>我会欢迎脑洞， 折腾些好玩却可能“无用”的东西， 比如哪一周主题或许就是自学Sketch来给AirLoft换个图标？或者就开个repo去参加HackerRank？能带你自己一直走下去的， 不是压力， 是兴趣。</p>
<p>很多人会好奇我自己的成长轨迹， 而如果真的往回看， 我是在2015年3月29号那天， 在交换时期参加的一次hacker meeting上， 第一次见识到html\css\js， 那天的主题是用meteor.js和mongo在5min内搭建一个todo应用， 嘉宾是伯克利大二的一个学生。到现在学CS大概有1年了吧， 从一开始写javascript各种运动框架开始， 到用ruby on rails自己前后端折腾了5， 6个中型blogging, social或者API网站， 到上学期用react重写各种网站及耗时一个月的SPA应用Airloft， 和现在react native。 我并不觉得自己已经有能力开始回顾自己过去的作品和荣誉， 只是最近挺多人问我“如果想做课外的项目应该学些什么的问题”， 我把我自己的轨迹拿出来给大家参考。永远没有一步登天的成就， 去凭着兴趣摸索， 因为好奇而坚持， 是我能给的最好的建议。</p>
<p>Orientation动员会的最后， 和大家分享两句话， 第一句来自自己的体会， 第二句来自ECE516 prof: Steve Mann：</p>
<ul>
<li>the best education comes from inside.</li>
<li>the best way to learn is to teach.</li>
</ul>
<h2 id="第一期任务">第一期任务</h2><p>学会git的简单使用, 直接在org内创建一个新的repo， 添加一个readme.md文件， 在里面写上你对两件事的想法， <strong>1、关于社区建造。 你认为应该怎样打造一个经久不衰的社区？举个现实生活中的例子？为什么？ 怎么设计回馈和奖励机制能够造就一个好的社区？哪些设计体现或者暗示了这些机制？2、你对哪个具体开发方向感兴趣？如果在这方面有充足的能力， 你可以怎样贡献到哪个任务里？做出怎样的作品？</strong>， 或者直接在github网页端操作创建新的repo和添加新文件， 或者更佳推荐的方式是本地代码备份然后关联到github的相关repo再push你的本地修改。</p>
<p>创建好之后， 做第三件事， <strong>3、至少在其他一个别人的repo里面的issue panel提出你对他这个想法的看法和补充</strong>。</p>
<blockquote>
<p>任务解释， 比如我喜欢看hackernews， 我对它的投票机制特别感兴趣， 我就拿这个社区的各种机制来举例， 又或者我喜欢B站， 去尝试分析B站哪些设计是特别有用户吸引力的， 记录下来， 新创repo分享。所有可能遇到的问题， 尝试记录下来自己解决， 找不到办法， open一个新的issue然后在微信群里讨论讨论。</p>
</blockquote>
<p>参考的链接， 我在第二期任务发布的时候公布。开始折腾起来吧。</p>
<h2 id="题外话">题外话</h2><ul>
<li>暑假就是要好好浪的。周末去骑trail， 打球， 聚餐什么的都要约起来啊。</li>
<li>我喜欢爱折腾的小伙伴。 有什么想说的话都可以私戳我。</li>
<li>认真对待梦想。 可能这个时代最一文不值和被轻易低估的， 就是梦想了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The best education comes from inside. </p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于创业, 那些不能说的秘密]]></title>
    <link href="http://chocoluffy.com/2016/04/25/%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%EF%BC%8C-%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://chocoluffy.com/2016/04/25/关于创业，-那些不能说的秘密/</id>
    <published>2016-04-26T03:39:01.000Z</published>
    <updated>2016-05-15T18:05:23.000Z</updated>
    <content type="html"><![CDATA[<p>每个人， 在每个阶段， 都会有个不容分说的理由。</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/88dd510b8366b952.jpg" alt="preface image"></p>
<p>趁着考完期末考的一段自由时间， 把之前一直积压着的两本书给读完了。</p>
<div style="text-align:center" markdown="1"><br><img src="http://ac-TC2Vc5Tu.clouddn.com/e98f89a56b7989aa.jpeg" alt="the hard thing about hard things"><br></div>

<p>第一本是来自Ben Horowitz的创业维艰， 前半段描述了他管理Loudcloud到Opsware将一个濒临破产的公司带到最后以16亿美元的价格被惠普收购的传奇经历， 后半段则记录下了他对公司管理的各个细节的心得思考。巧合的时， 就在我阅读这本书的期间， 曾任多家上市公司董事， Ben的精神导师Bill Campbell逝世了。 他对Ben说的那句， “要和员工一起宣布这个消息”的告诫仿佛还历历在目， 通过Ben的描述， 看得出Campbell极其富有同理心(empathy)的领袖气质。 向Campbell致敬。</p>
<div style="text-align:center" markdown="1"><br> <img src="http://ac-TC2Vc5Tu.clouddn.com/6ceefbf6929babac.png" alt="toureet"><br></div>

<p> 第二本书是硅谷创业者陈天的随笔。 在一个充斥着来自CEO乃至风险投资人视角的创业回顾的环境下， 一个来自技术合伙人(CTO)的视角显得尤为可贵。 从最早的技术选型(为什么用Django)， 到带领其它技术人员的开发和维护(4台EC2)， 到技术过渡和商业选择， 陈天给了一份很详细和真挚的参考选项， 也让一个非商圈的学生， 慢慢了解到国内白手起家创业的一条非常有代表性的道路。感激陈天老师的分享。</p>
<p>曾经一直以为， 创业是一件离自己很远的事情。直到一个月前， 一个多伦多大学毕业的直系师兄找到我来聊聊创业的可能。 他希望我能够以技术合伙人的身份帮他做出一个类似airbnb的网站和移动端， 已经有另外两个商科毕业已经工作的学姐愿意参与市场营销和推广， 万事具备， 就差个程序员了。</p>
<p>也是第一次， 我感觉到创业， 其实也只是一种选择罢了， 突然想到一句微博上看到的话， “对有能力的人来说， 很多事情不是机会， 而是选择。”， 我当然不觉得我自己有能力和把握在这个阶段就合适技术合伙人的身份， 只是当我在一个旁观者的角度去看我身边的故事时， 好像创业， 也并没有倾家荡产， 孤注一掷般的惊天动地， 好像创业， 更像是创始人在生命某个时期赴的一场约， 选择了一条人迹罕至的路， 也由此义无反顾。</p>
<p>下面是我在阅读时记录下的文字， 从我的角度出发， 或摘录， 或直接是自己的感受， 像《金蔷薇》里那个收集着金色尘土的老人， 我把它们留在这里：</p>
<h2 id="The_hard_thing_about_hard_things">The hard thing about hard things</h2><ul>
<li>在团队有十几个人的时候， 我招了一个人力管理人员， 专门帮我们招聘最聪明的人从硅谷。</li>
<li>Ben从一个同事分享的mosaic浏览器， 发现这就是未来， 于是第二天就去面试mosaic公司。</li>
<li><strong>究竟为什么要上市？</strong> 在文中， 作者是在2000年互联网泡沫的时候， 发现私人资金已经没有出路的时候， 想到公开上市， 认为公开市场， 会有更多的人来给自己投资， 而不是一直以来私人投资者的钱。</li>
<li><strong>如何做资产重组？</strong> 在Ben即将破产的时候， 他问他自己， 如果要退出， 他会怎么做， 他说他会把opsware带出来卖给别人用， 因为这是他自己开发的， 他知道这个特别好用， 但是基于当时的情况， 这个软件被限制住， 没法和loudcloud分离开用， 于是他回去分配了一个精英小组去尝试从现有软件分离出来。</li>
<li>在紧急情况的时候， 有很有多人议论你， 他们有些人是因为同情， 因为关心， 也可能是想摧毁你。 也会有很多人想帮你， 想帮你摆脱困境， 给出各种各样的建议。 永远从数据和具体情况出发， 没有任何一个旁观者有这个耐心帮你理顺所有的商业策略， 如果你任凭那些根本不了解具体情况的人对公司指手画脚， 那公司就无药可救了。</li>
</ul>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/93c8d666c10be4ba.png" alt="pied piper"></p>
<p><strong>很多时候， 我们都会评论那些伟大的CEO， 很自恋自大， narcisist， 专制。 然而他们只是没有听进去那些愚蠢的建议吧了， 又有谁比他们更清楚公司发展的每一个细节呢？</strong></p>
<ul>
<li><p>EPS真正想要的是tangram这家公司的软件， 而opsware在tangram比较低股价的时候收购了tangram， 让主要负责融洽opsware的EPS负责任frank特别高兴。也就是Ben他的要求， 弄清楚买方到底想要什么， 去提供他最想要的东西， 而不是一个劲地夸自己好。</p>
</li>
<li><p>同时非常重要的也是团队会议， Ben在两次会议中表现都超出了我的意料。第一次在计划从loudcloud中分离出opsware的时候， Ben将新公司的股票送给所有人， 同时允许有人决定退出。 “我不会送你出门， 但我汇帮你找份新的工作。要明确自己此刻所站的位置， 哪些人可以依靠。告诉大家你的决定。”<br>第二次， 在遇到bladelogic这个强劲的对手的时候， Ben再次开了一个全体的会议， 和大家说明白， 他需要大家， 在未来的6个月里面卯足了劲， “我要你们和你们最关心的人认真地谈一次话， 我们需要一次达成目标。”</p>
</li>
<li><p>研发出好产品是创新者的职责， 而不是客户。 <strong>客户只知道根据现在的产品体验来判断自己想要什么。</strong></p>
</li>
<li><p>在会议中添加一项， “我现在没有做什么” 的议程。而大家觉得的还没有做到的事， 都是一致的。那就是自动化。在公司慢慢做大的时候， 会有很多收购的声音， 其中， 你也会<strong>仅仅因为别人打算收购的意愿而得到股票的溢价</strong>， 要看清楚自己的价值。 同时， 也充分了解自己的直系下属他们的意愿。</p>
</li>
<li><p>而对于一个CEO能力的最好的考量， 是逆境不是顺境， 是专心致志的能力， 和在走投无路的时候选择最佳路线的能力。不是去如何不犯错误， 而是在犯错误之后如何去深刻理解那些你必须要做的事。</p>
</li>
<li><p>当你意识到一个CEO的职责就是为公司解决问题的时候， 你就知道， 有些没有用的空话可以省去了。</p>
</li>
<li><p><strong>在人类的所有交往中， 沟通量和信任程度成反比。</strong>现在很多的公司文化会阻碍坏消息的传播， 真相如果永远只能被戏谑地说出来， 那么等到采取行动的时候就晚了。建立一个奖励文化， 对找到问题症结和解决方案的人给予奖励。于此同时， 公司的任何决策必须当机立断， 比如像裁员这一类的重大决定， 如果不小心走漏风声， 当员工过来质问管理层的时候， 管理者就只有两种选择了， 要么表现出不知情， 要么就是撒谎， 而这其中任何的一个行为都会破坏公司文化。</p>
</li>
<li><p>对待裁员。 裁员对公司的最大伤害就是士气。而士气低下的主要表现症状就是怀疑， 所以越是困难的时候， 就越要坦诚相待你的员工。同时， 这是一个非常严重和严肃的时刻， 需要一名直接亲属上司去温和地解决这个事情， 你只要记住， 你的员工可能并无法记得他在这里工作的每一天， 但是他一定会记住他被辞掉的那一天。 <strong>永远记得， 聪明是一种天赋， 而善良是一种选择。</strong> 但是有一点也很重要， <strong>话是说给留下来的人听的</strong>， 你怎么对待那些被辞去的员工， 在困难时候， 就会是留下来的员工的一次自我映照。</p>
</li>
<li><p>一定要明晰什么时候笨办法最有用， 不是欺骗自己说， “产品是完美的， 是没有问题的， 问题出在销售人员， 问题出在用户的三分钟热度。”， 不， 问题是， 产品不够好。</p>
</li>
<li><p>不让这个公司最精英的人才去参与最棘手的问题， 完全就是浪费。<strong>一个人， 无论多出色， 都解决不了他不了解的问题。也就像开源社区所倡导的一样， 只有有足够多的眼镜， 就可以让所有问题浮出水面。</strong></p>
</li>
<li><p>很多时候， 你会吩咐很多指令给你的下属， 但他们并不一定会严格执行， 甚至不会执行这些要求。 而这种现象的背后原因是， <strong>你只告诉了他们应该怎么做， 他们却不知道为什么要这么做。</strong>一个好的工作环境就是， 每个人早上一睁开眼睛就知道自己所做的工作高效有用。管理层需要和每个员工有一对一的会面。当然就有人问了， 好的工作环境和坏的工作环境有什么区别， 是的， 在一切顺利的时候， 没有区别， 你的亮眼成绩会遮住所有可能质疑声的嘴， 问题不是没有， 而是让解决问题的人自我怀疑了。 但是一旦在事情不顺利的时候， 好与坏就是生与死的差别。</p>
</li>
<li><p><strong>如何对生产力进行直观的测量？</strong></p>
</li>
<li><p>好的产品经理会将一些重要问题以书面形式纪录下来， 竞争中的良策， 艰难的架构选择， 艰难的产品选择。而差的产品经理， 只会以口头的方式表达自己的意见。</p>
</li>
<li><p>大公司的主管都是应答式的, 当有事情要实例， 接受到命令之后， 才会去执行。而小公司的主管， 创业公司的管理者， 你不自己主动承担起很多的责任这个公司就倒了啊。一种很危险的情况就是， 在创业公司艰难的时期， 你雇用了一个认股数还不小的高薪高管， 他好像并没有干什么事， 却能够占到一定比例的利润。这就是并不适应节奏的管理层， 对创业公司的奋斗员工有很大的打击。</p>
</li>
<li><p><strong>关于招聘</strong>。 永远要提醒自己， 我们是找谁拥有解决问题的能力， 而不是谁看上去最适合。每个人都会有或多或少的缺点， 他可能不善于表达， 他可能有点自大， 有点脾气躁， 这些特质都不应该迷惑你真正找寻的目标。 尤其是在国内这个鱼龙混杂的招聘市场， 明明优秀的人就已经是凤毛麟角了， 如果你还只关注缺点， 只希望站在高处评论一番自我麻醉的话， 这对公司就太可惜了。<strong>写下你认为检验人才最好的几个问题， 形成面试的规范。</strong></p>
</li>
<li><p>一个好的管理者思考问题从是会有两个角度， 一个是我想怎么做， 另一个是员工会怎么想。</p>
</li>
<li><p>办公室政治</p>
<ul>
<li>如果你的员工给你提加薪的要求？ 拒绝， 如果你接受了这个要求， 其他员工会认为你加薪是因为你提出了这个要求而不是因为你出色的业绩。 这个会让其他人更加跃跃欲试。坏处二， 那些办公室里老实沉默， 或者对这种政治手段不敏感的人， 是不是就错过了加薪的机会呢？其中一个避免的方法就是<strong>保证员工收入和公司收入之间的一致性</strong>。</li>
<li>如果你的员工给你提希望扩大权力范围的要求？一个绝对不能触碰的底线是， 你给他一个口头承诺， 给了小道消息一次机会。 记住， 在公司的决策方案是， <strong>决策即出， 立即执行， 不要在交谈的时候流露出任何口头承诺的倾向</strong>。</li>
</ul>
</li>
</ul>
<ul>
<li><p>不要因为你在业务上缺乏经验就降低对他们工作的要求。很多年经轻轻的CEO， 会因为在公司创立之初媒体发布的几篇正面报道而喜出望外。这个标准太低了。</p>
</li>
<li><p>管理一家创业公司就像驾驶着一辆高速行驶的汽车， 当你以一个高速过弯的时候， 千万别看墙， 如果你看着墙， 你就直接撞上去， 盯着路， 你就安然无恙。</p>
</li>
<li><p>Ben他们建立一个风投公司的初衷， 就是发现了技术性创始人CEO和职业CEO的区别， 那些伟大的技术型驱动的公司都是由创始人经营的， 然而技术型创始人在管理上， 人脉上和营销宣传上有很大的不足。</p>
</li>
</ul>
<blockquote>
<p>后记:对于《途客圈》一书的总结回顾将会分开在另外一篇博文中， 主要探讨工具性和社交性产品的比较和更多创始人必须注意的具体股权结构， 敬请期待。</p>
<p>Edit:《途客圈》一书的阅读手记已完成，👉<a href="http://chocoluffy.com/2016/05/13/%E5%8F%A6%E4%B8%80%E7%A7%8D%E9%BC%93%E5%A3%B0-%E8%AF%BB%E3%80%8A%E9%80%94%E5%AE%A2%E5%9C%88%E3%80%8B%E6%9C%89%E6%84%9F/">另一种鼓声-读《途客圈》有感</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>每个人， 在每个阶段， 都会有个不容分说的理由。</p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创意视频分屏 - HTML5 & JS]]></title>
    <link href="http://chocoluffy.com/2016/04/23/%E5%88%9B%E6%84%8F%E8%A7%86%E9%A2%91%E5%88%86%E5%B1%8F-HTML5-JS/"/>
    <id>http://chocoluffy.com/2016/04/23/创意视频分屏-HTML5-JS/</id>
    <published>2016-04-24T01:53:56.000Z</published>
    <updated>2016-05-31T00:02:05.000Z</updated>
    <content type="html"><![CDATA[<p>和朋友聊天时无意间发现的一个创意视频分屏的想法， 来自<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#at-a-glance" target="_blank" rel="external">beoplay</a>这个高端耳机的宣传页面， 在自己实现的过程中， 也发现了视频自适应居中的这个设计细节， 自己也捣鼓了出来， 话说在之后产品的宣传主页视频可以一试的， 从两个视角去诠释同一个故事， 就是对这样有心思的设计细节没有任何抵抗力呢。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/s/09k1efohvmdkphu/beoplay%20demo.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<h2 id="目标">目标</h2><p>仿造beoplay这款耳机<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#video" target="_blank" rel="external">主页的宣传视频</a>来实现一个类似的视频分屏的效果。</p>
<h2 id="版本1-0（不加视频自适应居中）">版本1.0（不加视频自适应居中）</h2><p><img src="https://dl.dropboxusercontent.com/s/zppojylzfsyk6in/screensplit1.0.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<p>right video是静止的不动的， 同时位于最底层。 目前所有的伸缩都是在控制left video， 同时由于我们设置了left video的<code>z-index</code>为3， 那么左边的视频会覆盖在右边的视频上。接下来的目标就很明确了， 我们需要追踪鼠标在整个container里面的位置(我们会用占宽度的百分比来表示)， 然后， 通过改变左边视频的宽度， 同时也就把位于下面的右边视频暴露出来了， 来达到切换的效果。</p>
<p>理解到这一步之后，目标就是<strong>如何改变视频宽度</strong>了。</p>
<h3 id="如何改变视频宽度">如何改变视频宽度</h3><p>这里其实隐藏着一个陷阱， 就是因为我们不可以直接改变<strong>视频本身的宽度</strong>，因为视频的高宽比在拍摄的时候就决定了， 我们如果只拉长视频而不同时提高高度的话， 就会使得在纵轴上部分内容被遮盖到， 大致意思如图：</p>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f37ixae23nj219e0oe77a.jpg" alt="" style="display: block; margin: 0 auto;"></p>
<p>而这并不是我们想要的效果， 我们希望， 视频可以维持在同一个大小，而改变的只是<strong>视窗的横向移动</strong>，<br>这一步我用到了一个trick， 就是<code>overflow: hidden;</code>， 我们在左边的视频外面包住了一层<code>div</code>， 因为我们控制的就是左边的视频， 然后我们来改变这个“wrapper”的宽度（同时保证保证里面的left video的宽度占比仍然占最外面container的100%）， 来改变我们的视窗， 所以这个wrapper在网页上所包住的部分， 加上了<code>overflow: hidden;</code>遮去了超出部分后， 显示的就是左边的视频了。</p>
<p>比如一开始， 我们希望两个视频都各占一半， 那么左边的视窗一开始就会是占比原container的宽度的50%， 而原视频本身的宽度应该不变， 即container的宽度的100%， 所以我们需要给left video赋上200%的宽度， 理由是这个属性是对其直接父级的div起作用的。</p>
<h3 id="引入视窗">引入视窗</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* clipper 即左侧视频的视窗 */</span></span><br><span class="line"><span class="id">#clipper</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该属性作用于左侧视频  */</span></span><br><span class="line"><span class="id">#clipper</span> <span class="tag">video</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">10</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f37j53tshej21a20o643j.jpg" alt="init"></p>
<p>之后的事情就清楚了， 我们只需要改变<strong>左边视窗的宽度， 并同时保证视频本身相对原容器的宽度不变</strong>。写的js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = videoContainer.getBoundingClientRect(),</span><br><span class="line">offset = e.pageX - videoContainer.offsetLeft,</span><br><span class="line">position = ((e.pageX - videoContainer.offsetLeft) / videoContainer.offsetWidth) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (position &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">	videoClipper.style.width = position+<span class="string">"%"</span>;</span><br><span class="line">	leftVideo.style.width = ((<span class="number">100</span>/position)*<span class="number">100</span>)+<span class="string">"%"</span>;</span><br><span class="line">	leftVideo.style.zIndex = <span class="number">3</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单地说， 只需保证<code>videoClipper.style.width * leftVideo.style.width = 100%</code>即可。</p>
</blockquote>
<p>那最后一个改变<code>z-index</code>的目的， 就是确保左边的视频一直叠加在右边的视频之上。</p>
<h2 id="版本2-0（增加了自适应居中）">版本2.0（增加了自适应居中）</h2><p><img src="https://dl.dropboxusercontent.com/s/8y6fr3ib87yz9h7/screensplit2.0.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<p>初衷： 因为从拍摄的角度， 大部分的时间， 我们都会把拍摄的主体放在视频的中间位置， 而如果我们只是简单地移动视窗而不改变视窗的主角位置的话， 我们在鼠标移动的时候， 就只能看到边边角的视频内容了， 这违反设计直觉。</p>
<p>因此我们希望在移动视窗的同时， <strong>同时移动视频本身的位置来弥补视窗的偏差</strong>。相应的js代码是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">offset = e.pageX - videoContainer.offsetLeft,</span><br><span class="line">offsetRight = videoContainer.offsetWidth - offset,</span><br><span class="line"></span><br><span class="line"><span class="comment">// for adaptive resizing:</span></span><br><span class="line">rightVideo.style.webkitTransform = <span class="string">"translate("</span> + offset / <span class="number">2</span> + <span class="string">"px, 0)"</span>;</span><br><span class="line">leftVideo.style.webkitTransform = <span class="string">"translate(-"</span> + offsetRight / <span class="number">2</span> + <span class="string">"px, 0)"</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>画外音： 使用<code>transform</code>来改变DOM元素的位置相比直接改写他们的”定位属性“有很多好处， 其中最突出的就是， transform使用的是GPU， 而那些<code>top\left</code>等的定位元素使用的是CPU， 我们希望充分利用GPU和它提供的硬件加速， 同时<code>transform</code>也不会触发网页的repaint， 从而在渲染上更加的smooth和fast。</p>
</blockquote>
<p>那这个地方，<code>offset</code>就是鼠标在container里面距离左边边框的距离， 那么我们同时根据这个距离， 让左边的视频在视窗移动时， <strong>往相反的方向以一半的速度移动来弥补视窗偏差</strong>。使得可以在视窗移动的时候， 始终保持视频本身拍摄的主体视角也处于该视窗的主体视角! 原理可以参考这个图：</p>
<p><img src="https://dl.dropboxusercontent.com/s/t99wbc4n3s8c4r7/screensplit3.0.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<p>那么也就大功告成啦!</p>
<h2 id="总结">总结</h2><p>HTML5对media文件更多功能上的支持使得我们可以更好的操作media文件， 包括视频的开始暂停， 以及各种音量的调节， 而这个程序实例， 是一个很好的对相关API的使用的一个示范和一个小小的创意细节。这个项目， 也是饭后和朋友聊天聊出来的实现方案，也希望看到更多的创意脑洞和美的设计!</p>
<p>这个是这个项目的<a href="https://github.com/chocoluffy/screen-split-video" target="_blank" rel="external">github repo</a>, 这个是项目的展示<a href="http://chocoluffy.com/screen-split-video/">demo</a> 欢迎评论和pull request~</p>
<h2 id="Q&amp;A">Q&amp;A</h2><p>后续的一些疑问和解答：(基于V2ex和微博的评论)</p>
<p><strong>跟<a href="http://www.mi.com/hezi3s/" target="_blank" rel="external">这个链接</a>中间的 2K－4K 对比差不多一个意思？</strong><br>A: 哈哈在分屏效果上是类似的， 不过那个对图片的处理就会简单很多啦， 感觉就是在某个位置以左叠加一个高斯模糊的滤镜就可以了~ 相比之下， 对视频的处理还要考虑到视窗和视频本身的移动呢! 不过谢谢分享啦!</p>
<p><strong>多个声音怎么办？两个声音会重叠嘛？</strong><br>A: 我做了音轨的渐变处理， 也就是根据视频的相对大小来相对改变音量， 也就是说， 当某个视频占主体位置的时候， 另一个视频的声音是会渐弱的， 这样可能使用体验更好吧! 在博文最后有 demo 的网址， 你可以试试， 我 host 在了 github pages 上， 对了， 这个 demo 只在桌面端 work ， 在手机端还是实现不了这个效果呢， 有点可惜啦， 如果有改进的建议的话， 希望能提出来啦~</p>
<p><strong>快速拉扯的时候边缘缝隙比较大?</strong><br>A: 啊对的！我调试的时候也发现是有， 原因也很明显， 我只对整个 container 绑定了 mousemove 事件， 而 html 页面其他元素是不会监听 mousemove 的， 因此当鼠标快速移出 container 的时候， 就会发现边缘缝隙较大了， 我现在就改改 code ， 加个 condition ， 如果鼠标在 container 之外， 就把视频宽度订死为全屏~谢谢啦!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>和朋友聊天时无意间发现的一个创意视频分屏的想法， 来自<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#at-a-glance">beoplay</a>这个高端耳机的宣传页面， 在自己实现的过程中， 也发现了视频自适应居中的这个设计细节， 自己也捣鼓了出来， 话说在之后产品的宣传主页视频可以一试的， 从两个视角去诠释同一个故事， 就是对这样有心思的设计细节没有任何抵抗力呢。</p>]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://chocoluffy.com/tags/HTML5/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN全栈开发[第三期-Mongo数据库搭建REST API]]]></title>
    <link href="http://chocoluffy.com/2016/03/22/MEAN%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%89%E6%9C%9F-Mongo%E6%95%B0%E6%8D%AE%E5%BA%93%E6%90%AD%E5%BB%BAREST-API/"/>
    <id>http://chocoluffy.com/2016/03/22/MEAN全栈开发-第三期-Mongo数据库搭建REST-API/</id>
    <published>2016-03-23T02:50:55.000Z</published>
    <updated>2016-03-23T02:55:29.000Z</updated>
    <content type="html"><![CDATA[<p>AirLoft的原型。 第三期， 基于mongodb的mongoose来搭建RESTful API， 主要包括了关于各类涉及到对象的GET, POST, PUT DELETE方法的实现。 在postman上不断的模拟， 也最终搭好一个稳定且flexible的后端API处理， 剩下的就是将数据库和这个Express App的controller结合， 并在前端上灵活的应用啦！如果说前端就像一个人的妆容， 那么数据库以及API处理就是他的谈吐和内涵， 这个应用也有了scaling的能力， 加油!</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/c5ee78b5jw1f26lk141v7j21kw0tjn61.jpg" alt="screenshot"></p>
<h2 id="前言">前言</h2><p>In MVC architecture, we need to have views without content or data. An common way to implement MVC architecture is to <strong>first build up a frontend clickable prototype, then extract the content from the view back to controller(concerned with data structure), then back to model.</strong> And now we are in the second step, we try to put variable in jade file in place of content, and put the content as variable into the controller.</p>
<h2 id="Mongoose">Mongoose</h2><p>First set up a connection URI like: <code>var dbURI = &#39;mongodb://localhost/airloft&#39;;</code>, username, password and port number is optional for localhost.</p>
<p>A stupid mistake!! Need to open the <code>mongod</code> before you tried to connect to it. One thing to notice is that Mongoose connection doesn’t automatically close when the application restarts or stops. In order to do that whenever we restart the <code>nodemon</code>, we will need to listen for nodejs event. Nodemon uses <code>SIGUSR2</code>, application termination uses <code>SIGINT</code>, Heroku uses <code>SIGTERM</code>, like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> graceShutDown = <span class="function"><span class="keyword">function</span>(<span class="params">msg, callback</span>)</span>&#123;</span><br><span class="line">	mongoose.connection.close(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'Mongoose is closed through '</span> + msg);</span><br><span class="line">		callback();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">process.once(<span class="string">'SIGUSR2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	graceShutDown(<span class="string">'nodemon restart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		process.kill(process.pid, <span class="string">'SIGUSR2'</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>use <code>process.once</code> to overwrite the default <code>SIGUSR2</code> function, but then use <code>kill</code> to resend the <code>SIGUSR2</code> signal again, but this time we hook up a msg display functionality. Especially the place, we use <code>process.once()</code> instead of <code>process.on()</code> in the <code>SIGUSR2</code> case, since nodejs will listen for the same event, and if we use <code>on</code>, then it will forms a infinite loop. Note that <code>process.kill()</code> serves the functionality of sending the signal.</p>
<blockquote>
<p>Recap: Basically four step as discussed here, first define a connection URI string, then second setup the db connection; third monitor the mongoose connection events like <code>connected</code> and <code>disconnected</code>, and fourth monitor the node process event in order to close the db connection when we restart.</p>
</blockquote>
<p>From view to controller, finally to store in db is what we have gone through so far. It works pretty well, since the moment we move the data to the controller, we gradually solidy the data structure we want to use!!</p>
<p>Some technical names: “path” is like attribute names in relational database while “property object” is like the values but like other JS object, can be nested. Also, we can add data validation inside the schema, two advantages: </p>
<ul>
<li>save the roundtrip time to datebase</li>
<li>save the code inside the application for validation.</li>
</ul>
<p>Adding indexes can make database search more efficiently, jist like adding index to the files you want to search in your drawer. In order to add a GeoJSON path into your application, you only need to do this: <code>coords: {type: [Number], index: &#39;2dsphere&#39;}</code>; using <code>2dsphere</code> allows mongodb to be able to calculate the geolocation fast, thus <strong>it is helpful to build a location-based application.</strong></p>
<p>Subdocument is helpful when handling nested data structure, one thing to note, when creating attributes like <code>timestamp</code>, we use data type called <code>Date</code>, like:   </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reviewSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	rating: &#123;type: <span class="built_in">Number</span>, <span class="string">"default"</span>: <span class="number">0</span>, min: <span class="number">0</span>, max: <span class="number">5</span>&#125;,</span><br><span class="line">	author: <span class="built_in">String</span>,</span><br><span class="line">	createdOn: &#123;type: <span class="built_in">Date</span>, <span class="string">"default"</span>: <span class="built_in">Date</span>.now&#125;,</span><br><span class="line">	text: <span class="built_in">String</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1f1wrkszhcej218w0u6wib.jpg" alt="mongo"> 这张图讲得很清楚， schema是application-side的东西， 每一个model是的实例instance通过schema可以map到database里面的每一个document, 1:1的对应关系。</p>
<p>While typing in <code>mongod</code> will let you start the mongodatabase, using <code>mongo</code> will start tht shell and let you connect to the test database. And some useful commands in mongo go here:</p>
<ul>
<li><code>show dbs</code> to show all existing database so far.</li>
<li><code>use local</code> to switch to another database. And if that db doesn’t exist yet, mongo will create it for us.</li>
<li><code>show collections</code></li>
<li><code>db.startup_log.find()</code> returns all the content from collection, uesful when we check whether the data has been saved.</li>
<li><code>db.missions.save({...})</code> will savev a new document into collection.</li>
<li><code>db.inventory.remove({})</code> will remove all documents in collection <code>inventory</code>.</li>
<li><code>db.missions.update()</code> will query a document and update its content. The first argument is query string, and second argument use <code>$push</code> to insert subdocuments.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &gt; db.locations.update(&#123; </span><br><span class="line">   name: <span class="string">'Starcups'</span></span><br><span class="line">  &#125;, &#123; </span><br><span class="line">    $push: &#123;</span><br><span class="line">      reviews: &#123;</span><br><span class="line">        author: <span class="string">'Simon Holmes'</span>,</span><br><span class="line">        id: ObjectId(),</span><br><span class="line">        rating: <span class="number">5</span>,</span><br><span class="line">        timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Jul 16, 2013"</span>),</span><br><span class="line">        reviewText: <span class="string">"What a great place. I can't say enough good things about it."</span></span><br><span class="line">      &#125; </span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>So far, we have insert a fake data document in our local computer, but in real life, <strong>we want database to be externally accessible.</strong> use <code>heroku addons:add mongolab</code> to register a db URI at mongolab as a heroku addons.<strong> And use <code>heroku addons:open mongolab</code> to go the website interface to check database details. </strong>In order to get the uri of the database, type <code>heroku config:get MONGOLAB_URI</code>. </p>
<blockquote>
<p>Note that in real practice, I have to fixed a typo bug from my previous data stored in mongolab, I have to first go to the mongo shell to <code>remove({})</code> and <code>insert({...})</code> again, then do the <code>mongodump</code> and <code>mongorestore</code> again to dump the data into the temp folder at <code>~/tmp</code> and push the data to live database. And make sure to press the “Delete all collection” button before we did <code>mongorestore</code> to avoid same key collision.</p>
</blockquote>
<p>After receive URI, we will first dump our localhost data into a folder in local computer, then restore the data to the live database. use <code>mkdir -p ~/tmp/mongodump</code> will create a folder to hold up the dumped data. Note that use <code>-p</code> option will create the non-existed folders on the path like “tmp”.</p>
<ul>
<li>use <code>mongodump -h localhost:27017 -d airloft -o ~/tmp/mongodump</code> to export airloft.missions data into BSON.</li>
<li>use <code>mongorestore -h &lt;host and port number&gt; -d &lt;live database name&gt; -u &lt;username(same as database name)&gt; -p &lt;password&gt; &lt;path to dump data folder&gt;</code> to push the data up to the mongolab live database.</li>
<li>Last step(testing), we can use <code>mongo hostname:port/database_name -u username -p password</code> to change the <code>mongo</code> to interact with an external database. Note that in the last two steps, database name is the same as username. Then, we can use commands introduced before to interact with live database. In summery, we have one source code and can be used to manipulate databases at two locations, one in local computer, a test database, and one in Heroku, a live database.</li>
</ul>
<p>Let application use right database. use <code>heroku config:set NODE_ENV=production</code> to set the environment variable <code>NODE_ENV</code> to be production for Heroku. <strong>Environment variable will affect the way the core process runs.</strong> When we tried to use <code>nodemon</code> to start application, one way to make sure what environemnt we are running in is to prepend a ENV variable before nodemon like <code>NODE_ENV=production nodemon</code>, and corresponds to this change, we also change the code in db.js(with a if-else block) to set the dbURI aligned with environment. In application, we can access to such variable by <code>process.env.NODE_ENV</code>, but since we post it in public repo, we don’t want our credentials to be public. Instead, we use environment variables from Heroku configuration.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dbURI = <span class="string">'mongodb://localhost/airloft'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'production'</span>)&#123;</span><br><span class="line">	dbURI = process.env.MONGOLAB_URI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mongoose.connect(dbURI);</span><br></pre></td></tr></table></figure>
<h2 id="REST_APIs">REST APIs</h2><p>REST is an architecture style, it’s stateless, meaning it will not recognize users or history. Having such program interface will allow us to talk to our database through HTTP and perform CRUD operations then send back a HTTP response. An way to construct URLs is to think about the collections in our database. In ‘airloft.missions’ collection, we may want to allow operations like:</p>
<ul>
<li><code>/missions</code> to create an new mission.</li>
<li><code>/missions</code> to read all missions.</li>
<li><code>/missions/&lt;index&gt;</code> to read a specific mission.</li>
<li><code>/missions/&lt;index&gt;</code> to update a specific mission. And so on so forth.</li>
</ul>
<p>As we can see the urls are same for several operations, and we will use different request methods to tell the server what action to take.</p>
<ul>
<li><code>POST</code> to create new data in database(from submitting form).</li>
<li><code>GET</code> to read data.</li>
<li><code>PUT</code> to update a document.</li>
<li><code>DELETE</code> to delete a document.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// missions</span></span><br><span class="line">router.get(<span class="string">'/missions'</span>, ctrlMissions.missionsListByDistance);</span><br><span class="line">router.post(<span class="string">'/missions'</span>, ctrlMissions.missionsCreate);</span><br><span class="line">router.get(<span class="string">'/missions/:missionid'</span>, ctrlMissions.missionsReadOne);</span><br><span class="line">router.put(<span class="string">'/missions/:missionid'</span>, ctrlMissions.missionsUpdateOne);</span><br><span class="line">router.delete(<span class="string">'/missions/:missionid'</span>, ctrlMissions.missionsDeleteOne);</span><br></pre></td></tr></table></figure>
<p>Then in the corresponding controller files, we define these functions and fill them with the simplest response to display when received such request.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendJsonRes = <span class="function"><span class="keyword">function</span>(<span class="params">res, status, content</span>)</span>&#123;</span><br><span class="line">	res.status(status);</span><br><span class="line">	res.json(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.missionsListByDistance = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	sendJsonRes(res, <span class="number">200</span>, &#123;<span class="string">"status"</span>: <span class="string">"success"</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="“GET”_method_implementation">“GET” method implementation</h2><p>Some useful queries in Mongoose:</p>
<ul>
<li><code>find</code> general search based on query object.</li>
<li><code>findById</code> look for specific ID.</li>
<li><code>findOne</code> get the first match document.</li>
<li><code>geoNear</code> find geo-closef query.</li>
<li><code>geoSearch</code> add query functionality to geoNear operation.</li>
</ul>
<p>After using queries, we use <code>exec</code> method execute the query and passes a callback function that will run when the operation is complete. The callback function should accept two parameters, an error object and the instance of found document.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendJsonRes = <span class="function"><span class="keyword">function</span>(<span class="params">res, status, content</span>)</span>&#123;</span><br><span class="line">	res.status(status);</span><br><span class="line">	res.json(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.missionsReadOne = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	Missions</span><br><span class="line">		.findById(req.params.missionid)</span><br><span class="line">		.exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">200</span>, mission);</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we want to add error checking like this: note that we can also utilize <code>console.log</code> to print out some useful information about the data in terminal since we use <code>nodemon</code>. </p>
<p>In real practice, we may not always want to retrive a whole document from mongodb, we may only just need some specific data. Thus, we can limit the data being passed around to improve speed, using <code>select</code> to retriece only “name” and “reviews” entry from a document in collection. Like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.reviewsReadOne = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(req.params &amp;&amp; req.params.missionid &amp;&amp; req.params.reviewid)&#123;</span><br><span class="line">		Missions</span><br><span class="line">			.findById(req.params.missionid)</span><br><span class="line">			.select(<span class="string">'name reviews'</span>)</span><br><span class="line">			.exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(!mission)&#123;</span><br><span class="line">					sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">						<span class="string">"message"</span>: <span class="string">"missionid not found"</span></span><br><span class="line">					&#125;)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(err)&#123;</span><br><span class="line">					sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">var</span> response, review;</span><br><span class="line">				review = mission.reviews.id(req.params.reviewid);</span><br><span class="line">				<span class="keyword">if</span>(!review)&#123;</span><br><span class="line">					sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">						<span class="string">"message"</span>: <span class="string">"reviewid not found!"</span></span><br><span class="line">					&#125;)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				response = &#123;</span><br><span class="line">					mission: &#123;</span><br><span class="line">						name: mission.name,</span><br><span class="line">						id: req.params.missionid</span><br><span class="line">					&#125;,</span><br><span class="line">					reviews: review</span><br><span class="line">				&#125;;</span><br><span class="line">				sendJsonRes(res, <span class="number">200</span>, response);</span><br><span class="line">			&#125;);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">			<span class="string">"message"</span>: <span class="string">"No missionid or reviewid in request"</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Apart from the error checking in the above code, we can use <code>id</code> to query subdocument the <code>_id</code> entry. <strong>note that in the raw data, I mistakenly put the entry name to be <code>id</code> instead of <code>_id</code>, which causes me to re-insert the data again to let the <code>id()</code> work for subdocument.</strong></p>
<p>These above example codes shows us how to simulate “GET” request for mission and reviews in “missions” collection in live mongolab database. When it comes to geo-query, we need to query the longtitude and latitude in <code>req.query</code> with some urls like this: <code>api/missions?lng=-12.34343434&amp;lat=51.22424224</code>.</p>
<p>Besides, the way writing the js code is quite important using closure!! I use an example that will be reused in later geo-distance calculation to illustrate how to <strong>only expost functions for later use with closure to wrap the inner variables from outer collisions.</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> theEarth = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> earthRadius = <span class="number">6371</span>;</span><br><span class="line">  <span class="keyword">var</span> getDistanceFromRads = <span class="function"><span class="keyword">function</span>(<span class="params">rads</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(earthRadius * rads);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> getRadsFromDistance = <span class="function"><span class="keyword">function</span>(<span class="params">distance</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(distance/getRadsFromDistance);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getDistanceFromRads: getDistanceFromRads,</span><br><span class="line">    getRadsFromDistance: getRadsFromDistance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>Then the complete geo searching functions are:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for main page listing by distance.</span></span><br><span class="line"><span class="keyword">var</span> resToList = <span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> lst = [];</span><br><span class="line">	results.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">doc</span>)</span>&#123;</span><br><span class="line">		lst.push(&#123;</span><br><span class="line">				distance: theEarth.getDistanceFromRads(doc.dis),</span><br><span class="line">				name: doc.obj.name,</span><br><span class="line">				author: doc.obj.author,</span><br><span class="line">				rating: doc.obj.rating,</span><br><span class="line">				tags: doc.obj.tag,</span><br><span class="line">				_id: doc.obj._id</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> lst;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.missionsListByDistance = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(req.query.lng &amp;&amp; req.query.lat)&#123;</span><br><span class="line">		<span class="keyword">var</span> lng = <span class="built_in">parseFloat</span>(req.query.lng);</span><br><span class="line">		<span class="keyword">var</span> lat = <span class="built_in">parseFloat</span>(req.query.lat);</span><br><span class="line">		<span class="keyword">var</span> point = &#123;</span><br><span class="line">			type: <span class="string">"Point"</span>,</span><br><span class="line">			coordinates: [lng, lat]</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">var</span> geoOptions = &#123;</span><br><span class="line">			spherical: <span class="literal">true</span>,</span><br><span class="line">			maxDistance: theEarth.getRadsFromDistance(<span class="built_in">parseInt</span>(req.query.maxdistance||<span class="number">2000</span>)),</span><br><span class="line">			num: <span class="number">10</span>,</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// console.log(geoOptions.maxDistance);</span></span><br><span class="line">		Missions.geoNear(point, geoOptions, <span class="function"><span class="keyword">function</span>(<span class="params">err, results, stats</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			sendJsonRes(res, <span class="number">200</span>, resToList(results));</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">			<span class="string">"message"</span>: <span class="string">"Found no longtitue or lattitude in query string."</span></span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>So far, we complete all three “GET” methods for this website, namely, [1]ListByDistance for the main page “/api/missions”; [2]get a single mission information for each mission document in db “/api/missions/<_id>“; [3]get a single review information for reviews from each mission document as subdocument “/api/missions/<_id>/reviews/<_id>“. And next, we will look at other methods like “POST”, “PUT” and “DELETE”.</_id></_id></_id></p>
</blockquote>
<h2 id="“POST”_method_implementation">“POST” method implementation</h2><p>In this project, since we only involve missions and reviews, we need to implement new mission post and new review post from form data, which is stored at <code>req.body.&lt;attr&gt;</code>.<br>The way we create an document is using <code>create()</code> directly :</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.missionsCreate = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	Missions.create(&#123;</span><br><span class="line">		name: req.body.name,</span><br><span class="line">		rating: req.body.rating,</span><br><span class="line">		tag: req.body.tags.split(<span class="string">","</span>),</span><br><span class="line">		author: req.body.author,</span><br><span class="line">		coords: [<span class="built_in">parseFloat</span>(req.body.lng), <span class="built_in">parseFloat</span>(req.body.lat)],</span><br><span class="line">		timepanel: &#123;</span><br><span class="line">			title: req.body.timetitle,</span><br><span class="line">			timeslots: req.body.timeslots.split(<span class="string">","</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">201</span>, mission);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For subdocuments or facing with a list instead of an array, we probably just retrieve that list and <code>push</code> a new item into the list. Then we just need to <code>&lt;instance&gt;.save()</code> to save the item like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addReiview = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, mission</span>)</span>&#123;</span><br><span class="line">	mission.reviews.push(&#123;</span><br><span class="line">		rating: req.body.rating,</span><br><span class="line">		author: req.body.author,</span><br><span class="line">		text: req.body.text</span><br><span class="line">	&#125;)</span><br><span class="line">	mission.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> thisReview;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			updateAveRating(mission._id);</span><br><span class="line">			thisReview = mission.reviews[mission.reviews.length - <span class="number">1</span>];</span><br><span class="line">			sendJsonRes(res, <span class="number">201</span>, thisReview);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="“PUT”_method_implementation">“PUT” method implementation</h2><p>“PUT” method is similar to “POST” in a way that they both use form data stored in <code>req.body</code>, while one is create from nothing and add to the database, the other is to find an existing one and update part of the information. </p>
<ul>
<li>One hack I thought about is to use <code>Object.keys(obj)</code> to obtain the keys from a js object, then using <code>$set</code> in <code>mongo.update()</code> to only update the value in body? <strong>Ideas:</strong> this idea only works when all field are requiring same manipulation from body data. To be more specifically, some data are needed to be processed to feed for later use, such as we add <code>.split(&quot;,&quot;);</code> for tags data, and some fields like “coords” is an array. Thus, if we want to apply more operations on some data, we cannot just treat them in the same way in a for loop</li>
<li>Or, utilize the the way mongoose model treat model parameters, we can do <code>var newReview = new Review(req.body)</code> to create an instance of “Review” model, then use this to replace the old one?</li>
</ul>
<blockquote>
<p>One important thing to notice is that when we save, we save <strong>parent document!</strong> In our case, we did <code>mission.save(function(err, mission))</code> instead of <code>review.save(...)</code>!</p>
</blockquote>
<h2 id="“DELETE”_method_implementation">“DELETE” method implementation</h2><p>“DELETE” method is easier, we only need to find that document by “missionid”, then do <code>Missions.remove(function(err, mission))</code>. For the subdocument, we simply find that subdocument and call remove at the end. The prototype is like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A working prototype without error checking.</span></span><br><span class="line"><span class="built_in">module</span>.exports.reviewsDeleteOne = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	Missions</span><br><span class="line">		.findById(req.params.missionid)</span><br><span class="line">		.select(<span class="string">"reviews"</span>)</span><br><span class="line">		.exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">					<span class="string">"message"</span>: <span class="string">"Found no match"</span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			mission.reviews.id(req.params.reviewid).remove();</span><br><span class="line">			mission.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123; <span class="comment">// save parent document.</span></span><br><span class="line">				updateAveRating(mission._id);</span><br><span class="line">				sendJsonRes(res, <span class="number">204</span>, <span class="literal">null</span>);</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Summery">Summery</h2><ul>
<li><p>How to insert an common model instance into mongodb? I mean, since we can’t generate the “_id” by ourselves, then how comes we insert such object into <code>mongo</code>? <strong>Answer:</strong> we need to know the difference between <code>db.missions.save</code> and <code>db.missions.insert</code>, using <code>save</code>, we can simple provide an model instance according to the model schma, while using using <code>insert</code>, we have to write the object exacty the same as the final document! </p>
</li>
<li><p>“GET” method implementation? <strong>Answer:</strong> using mongodb query like <code>findById</code> and others to get the document from db, and sometimes we need <code>id</code> to retrieve info from subdocument. Besides, <code>geoNear</code> is handy in mongodb to get displaying documents by distance.</p>
</li>
<li><p>Some important places for error checking: </p>
<ul>
<li>If argument is in the <code>req.body</code> or <code>req.query</code> or <code>req.params</code>. <strong>if not, return a message in <code>res</code> saying founding no argument in coming request.</strong></li>
<li>Then given an ID(probably), we may want to search that document in database using <code>getById()</code>, and the callback function contains an <code>error</code> object and a instance object, where the returning instance object indicates whether or not searching database is succeeded or not. <strong>If not, return a message saying object not found in database.</strong></li>
<li>When we tried to update of create a new document, we may usually use <code>save</code> and <code>create</code>, the callback function contains an error object either, <strong>it indicates whether or not such instance can be created or updated correctly, if the error message appears, it usually dues to the fact that some fields violates the validation rules specified in database schema.</strong></li>
</ul>
</li>
</ul>
<h2 id="Tools">Tools</h2><ul>
<li>Unless you fancy adding hundreds of script tags to your pages, you need a build tool to bundle your dependencies. You also need something to <strong>allow NPM packages to work in browsers</strong>. This is where Webpack comes in.</li>
<li>Add a .gitattributes file and push it to github to overwrite the project type calculated by github, adding <code>*.css linguist-language=Javascript</code> into the file to let a specific file being overwritten.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>AirLoft的原型。 第三期， 基于mongodb的mongoose来搭建RESTful API， 主要包括了关于各类涉及到对象的GET, POST, PUT DELETE方法的实现。 在postman上不断的模拟， 也最终搭好一个稳定且flexible的后端API处理， 剩下的就是将数据库和这个Express App的controller结合， 并在前端上灵活的应用啦！如果说前端就像一个人的妆容， 那么数据库以及API处理就是他的谈吐和内涵， 这个应用也有了scaling的能力， 加油!</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN全栈开发[第二期-前端实战手记]]]></title>
    <link href="http://chocoluffy.com/2016/03/11/MEAN%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%BA%8C%E6%9C%9F-%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E6%89%8B%E8%AE%B0/"/>
    <id>http://chocoluffy.com/2016/03/11/MEAN全栈开发-第二期-前端实战手记/</id>
    <published>2016-03-11T20:10:55.000Z</published>
    <updated>2016-03-23T03:00:41.000Z</updated>
    <content type="html"><![CDATA[<p>AirLoft的原型。 第二期， 基于Bootstrap的扁平化设计， 把所有涉及的页面的clickable prototype做出来， 再迁移到express application或者Angular SPA上， 虽然只是前端的prototype， 但是做好一些npm scripts的配置会让前端开发特别的高效和舒服， 也算是在入门了各种炫技的前端展示后， 逐步到一个full-fledged website的过渡。</p>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f1tkjoatboj21kw0r7aic.jpg" alt="project screenshot"></p>
<h2 id="Difference_about_MEAN_stack">Difference about MEAN stack</h2><p>Traditional web server like Apache is multi-thread, <strong><em>the key idea about multi-thread is visitors use seperate resources.</em></strong>Like a bank system, it works perfectly fine when the population size is small, while when the size grows more than the resources, you have to queue for resources. (然而当你访问一个网站的时候， 你是不会等的， 你看那个网站响应很慢， 你就退出了). In nodejs, it is single-threaded. 所以你知道现在很多大型的企业架构， 尤其是国内的， 在前几年还特别严重， 一到过年过节流量特别大的时候， 你的网站就会宕机， 因为太多人访问了， 你必须等。所以解决办法是什么， 通常企业就回去买更多的服务器， 或者更新过大的内存， 来扛过流量最大的时候， 可是有一个问题就是， 在流量没有那么大的绝大多数时候， 你的资源被浪费了! </p>
<p>在单线程的nodejs里面， 有一个非常重要的特性就是必须是非阻塞， 因为默认的情况就是大家都会去同一个center office， 同一个线程， 然而我们不希望前一个的request, 比如request static files or database, 影响到下一个用户， 所以nodejs里面的函数都是异步的。</p>
<p>Some useful helper libraries like Underscorejs, Mochajs, and Colors(which can add color to the nodejs console log).</p>
<p>Check out the articles in Evernore, saying that why we don’t want to use the default way of using directory to organize our view static files in Expressjs, but instead use a function-focused way to group the files.</p>
<p>Mongodbd stores documents as BSON(binary format of JSON). Mongoose like the shell for mongodb, enable us to add data validation on database(schema)</p>
<p>Traditional way of doing web, is let the server do all the data processing and application logic, then passes HTML out to the browser. While angularjs allows us to pull some data and logic to the browser.(so server only pass the data from database). Since we have V8 in Chrome.</p>
<p>The difference of Jquery and AngularJS is that Jquery added to the page to provide interactivity, it assume that you have a complete DOM, While angularjs comes earilier to help you form the HTML.</p>
<p>关于SPA(single page application)的缺点， 尤其在SEO上， search engine only fetches the page layout and it won’t run any javascript, thus those data and contents generated by javascript will be ignored by search engine. <strong><em>the key feature of SPA is that it takes a longer load for first time login, and it can reduce the pressure on server side, since it handle the logic mostly on browser. </em></strong> For example, for a blog website, the blog post entry is for people to read and is expected to show up quitely quickly, is not suitable for SPA, while the admin page can be done in SPA. <strong><em>Thus, for the blog entry, we want the original and traditional method(passing the HTML pages), utilizing Express!</em></strong></p>
<p>Remeber, Angularjs is not only for SPA, it can also provide rich data interactivity to an static pages.</p>
<p><strong><em>API-rich means decouple the reliance!!! You don’t contact directly to the database, but instead use API and if API is satisfied, components can be substituted by any other components.</em></strong></p>
<p>基础的架构是： database\rest API\application在同一个server上， 但之后我们通常会把database分开到另外一个server上（avoid fighting for the same resources）.</p>
<h2 id="Express">Express</h2><p>When using express, we can configure it to have some options, like which html engine to use, which css preprocessor, and whether to add the support for session;</p>
<p>We can see in <code>app.js</code> that there are a lot of <code>app.use()</code>, they are middlewares, and the request coming from the application will go through each of them. For example, use <code>app.use(cookieParser());</code> will parse out the cookie information from the request and prepare to be more friendly in controller code. Server side js(app.js) if modified, should let the server stop and restart, but the client-side js or html or css, can just use browser refresh to update on-the-fly. <strong><em>To fix that, we use <code>nodemon</code>, a module that allows auto-reloading when server-side javascript is changed. I have install it globally, so we just need to type <code>nodemon</code> inside the project folder.</em></strong></p>
<p><code>block content</code> in jade, is the inheritance machanism of HTML layout, we can define some block + <variable name=""> in the parent template, then in each child layout that extends it, the child template will redefine such block, just like in c++\java, an abstract class.</variable></p>
<p>We decided to implement MVC inside the Express, like what we did in rails, we route the corresponding URL to controllers(which we created in a new folder).</p>
<p>Bootstrap is not being processed by node engine, thus we put it under <code>public</code> folder. Inside the <code>layout.jade</code> file, we will include the bootstrap theme and js files we want to use in our project:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    # <span class="operator"><span class="keyword">set</span> viewport metadata <span class="keyword">for</span> better display <span class="keyword">in</span> mobile device.</span><br><span class="line">  	meta(<span class="keyword">name</span>=<span class="string">'viewport'</span>, <span class="keyword">content</span>=<span class="string">'width=device-width, initial-scale=1.0'</span>)</span><br><span class="line">    title= title</span><br><span class="line">    # <span class="keyword">before</span> the <span class="keyword">style</span>.css <span class="keyword">file</span>, so that we can write <span class="keyword">style</span> <span class="keyword">to</span> override <span class="keyword">or</span> polish the <span class="keyword">style</span> <span class="keyword">in</span> bootstrap theme.</span><br><span class="line">    <span class="keyword">link</span>(rel=<span class="string">'stylesheet'</span>, href=<span class="string">'/bootstrap/css/cerulean.bootstrap.css'</span>)</span><br><span class="line">    <span class="keyword">link</span>(rel=<span class="string">'stylesheet'</span>, href=<span class="string">'/stylesheets/style.css'</span>)</span><br><span class="line">  <span class="keyword">body</span></span><br><span class="line">    <span class="keyword">block</span> <span class="keyword">content</span></span></span><br></pre></td></tr></table></figure>
<p>After deciding on the urls we want to use, we will add corresponding controller into the index.js inside the routes folder. since we mainly have two function groups, we use <code>ctrlLocations</code> and <code>ctrlOthers</code> to represent these two main controller files.</p>
<h2 id="Jade_in_Express">Jade in Express</h2><p>Let’s start to move the content in view into controller. When we look at the clickable prototype, especially its Jade view pages, we define Javascript object in hash in controller to store the data. <strong><em>We design data structure to hold data for views.</em></strong> Then in view folder, we can do: [1] use <code>=</code> to use that object’s value, or use <code>#{}</code> to <strong><em>insert</em></strong> the value into a string.</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1= <span class="built_in">title</span> </span><br><span class="line">p &amp;nbsp; #&#123;<span class="built_in">title</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Pay attention to the format when using the programming syntax or inline coding. </p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意在用synax的时候要多空<span class="number">4</span>个space--&gt;</span><br><span class="line">.row</span><br><span class="line">    .<span class="built_in">col</span>-xs-<span class="number">12</span>.<span class="built_in">col</span>-<span class="keyword">sm</span>-<span class="number">8</span></span><br><span class="line">        .row.<span class="keyword">list</span>-group</span><br><span class="line">            each mission in missions</span><br><span class="line">                .<span class="built_in">col</span>-xs-<span class="number">12</span>.<span class="keyword">list</span>-group-item</span><br><span class="line">                    h4</span><br><span class="line">                        <span class="keyword">a</span>(href=<span class="string">'/mission'</span>)= mission.name</span><br><span class="line">                        small &amp;nbsp;</span><br><span class="line">                            - <span class="keyword">for</span> (var <span class="keyword">i</span>=<span class="number">0</span>; <span class="keyword">i</span>&lt;mission.rating; <span class="keyword">i</span>++)</span><br><span class="line">                                span.glyphicon.glyphicon-<span class="keyword">star</span></span><br><span class="line">                            - <span class="keyword">for</span> (var <span class="keyword">i</span>=mission.rating; <span class="keyword">i</span>&lt;<span class="number">5</span>; <span class="keyword">i</span>++)</span><br><span class="line">                                span.glyphicon.glyphicon-<span class="keyword">star</span>-<span class="built_in">empty</span></span><br><span class="line">                        span.badge.pull-<span class="keyword">right</span>.badge-default <span class="number">100</span><span class="keyword">m</span></span><br><span class="line">                    <span class="keyword">p</span>.author= mission.author</span><br><span class="line">                    <span class="keyword">p</span></span><br><span class="line">                        each <span class="keyword">tag</span> in mission.<span class="keyword">tags</span></span><br><span class="line">                            span.label.label-warning= <span class="keyword">tag</span></span><br><span class="line">                            | &amp;nbsp;</span><br></pre></td></tr></table></figure>
<p>In Jade, we want to use <strong>mixin</strong> as functions inside a jada file and use <code>include</code> to make it reuseable for other file. Like this, we usually put mixin at between <code>extends layout</code> and <code>block content</code>. </p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mixin outputRating(rating)</span><br><span class="line">  - <span class="keyword">for</span> (var <span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span>&lt;mission.rating; <span class="built_in">i</span>++)</span><br><span class="line">    span.glyphicon.glyphicon-star</span><br><span class="line">  - <span class="keyword">for</span> (var <span class="built_in">i</span>=mission.rating; <span class="built_in">i</span>&lt;<span class="number">5</span>; <span class="built_in">i</span>++)</span><br><span class="line">    span.glyphicon.glyphicon-star-empty</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--same place, but using `include`--&gt;</span></span><br><span class="line">include _includes/sharedHTMLfunctions</span><br></pre></td></tr></table></figure>
<p>Here is an example of showing how to render sting to HTML when the textarea has newline character:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">	<span class="comment">#banner.page-header</span></span><br><span class="line">		.row</span><br><span class="line">			.col-sm-<span class="number">12</span></span><br><span class="line">				h1= title</span><br><span class="line">	.row</span><br><span class="line">		.col-sm-<span class="number">12</span></span><br><span class="line">			p !&#123;(<span class="keyword">text</span>).<span class="built_in">replace</span>(/\n/g, <span class="string">'&lt;br/&gt;'</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>For now, the data is stored in controller, while in practice, we need database and data model to store the data. But here we are in the right track of fast development, namely, from developing a clickable prototype, to move hard-cored data into controller as variables, and finally put them into database.</p>
<h2 id="Heroku">Heroku</h2><p>Add the <code>engines</code> part at project’s package.json, add the node and npm version on it.</p>
<p>Add a Procfile, used to declare the process type used by application. we put <code>web: npm start</code> inside the Procfile so that it tells Heroku to tun such web process.</p>
<p>Use forego to test before push it into production environment. <code>brew install forego</code> to install forego, then do <code>forego start</code> and go to <code>localhost:5000</code> to see the result.</p>
<p>Then if everything goes fine, from <strong><em>a) engines part b) Profile c) tested under <code>forego</code></em></strong>, then we do <code>heroku create</code> and <code>git push heroku master</code> to push the local git repo to the remote heroku container. Then <code>heroku open</code> to open that url.</p>
<p>Terminology: <strong>Dynos</strong> are isolated, virtualized Unix containers, that provide the environment required to run an application. Generally, if you deploy an application for the first time, Heroku will run 1 web dyno automatically. In other words, it will boot a dyno, load it with your slug, and execute the command you’ve associated with the web process type in your Procfile. <strong>So, it mainly is about scaling, if we have more dynos, we will have more resources. And we got that 1 dyno for free.</strong> we can type in <code>heroku ps</code> to check which dyno is running which process and for this command, <code>heroku ps:scale web=3 queue=2</code>, it means that we can start 5 dynos, 3 for the web and 2 for the queue process types.</p>
<h2 id="Bootstrap">Bootstrap</h2><p>in Bootstrap, there is always 12 columns, and you can define how many columns you want to use in device, <code>col-sm-6</code> means that element will take up 6 columns on device of size sm <strong>and larger.</strong> </p>
<ul>
<li>xs: phone</li>
<li>sm: tablets</li>
<li>md: laptop</li>
<li>lg: external monitors</li>
</ul>
<p><code>&lt;div class=&quot;col-xs-12 col-sm-6&quot;&gt;&lt;/div&gt;</code> means it will take the full width in phone screen while take only half in tablets or larger.</p>
<p>In Jade, in order to put plain text, we need to use pipe at front.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ul.nav.navbar-nav.navbar-<span class="constant">right</span></span><br><span class="line">    li</span><br><span class="line">        <span class="operator">a</span>(href=<span class="string">'#'</span>)</span><br><span class="line">            span.glyphicon.glyphicon-user</span><br><span class="line">            |  Sign Up</span><br><span class="line">    li</span><br><span class="line">        <span class="operator">a</span>(href=<span class="string">'#'</span>)</span><br><span class="line">            span.glyphicon.glyphicon-<span class="built_in">log</span>-<span class="operator">in</span></span><br><span class="line">            |  Login</span><br></pre></td></tr></table></figure>
<p>When dealing with <code>block content</code>, we should note that if some elements are not contrained by css, then they will be strethed to have full width of screen. what we did now is do wrap the content with a <code>div.container</code> so that we can apply css on the container easily.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span><span class="class">.container</span></span><br><span class="line">  block <span class="attribute">content</span></span><br></pre></td></tr></table></figure>
<p>现在的一个主要问题是， 我知道布局是什么样子的， 但是我不知道应该怎么写？when to use <code>.row</code> or <code>.page-header</code>. </p>
<ul>
<li><strong>row. Rows must be placed within a .container (fixed-width) or .container-fluid (full-width) for proper alignment and padding. </strong></li>
<li>Use rows to create horizontal groups of columns.</li>
<li>Content should be placed within columns, and only columns may be immediate children of rows.<strong><em><code>col-</code> is the direct child element for <code>row</code></em></strong></li>
<li>Actually <code>.page-header</code> just applies some of its default styling options to the element with that class. In practice, we find that the element with that class will be margined from normal element. </li>
</ul>
<p>We can download the cutomized bootstrap theme from <a href="http://getbootstrap.com/customize/" target="_blank" rel="external">the website</a>, say it I only want to use the <code>glyphicon</code> icon from Bootstrap, then I can just check that box and download it, then after unzipping the file, we include the file under the css part and <strong>inlcude the css tag inside the html</strong>, then it works fine! Hooray! In this project, I mainly use <code>glyphicon-user</code>, <code>glyphicon-fire</code> and <code>glyphicon-chevron-left</code> for navigation.</p>
<p>Using <a href="https://github.com/nicinabox/superslides" target="_blank" rel="external">superslides</a> to achieve a full-screen images scrolling animation. pretty amazing effects.</p>
<p>Use <code>.panel</code> for inner component positioning.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="class">.panel</span><span class="class">.panel-primary</span></span><br><span class="line"><span class="class">.panel-heading</span></span><br><span class="line">	<span class="tag">h2</span><span class="class">.panel-title</span> Training Time</span><br><span class="line"><span class="class">.panel-body</span></span><br><span class="line">	<span class="tag">p</span> March <span class="number">15</span> - March <span class="number">17</span>: <span class="number">7</span>:<span class="number">00</span> am - <span class="number">7</span>:<span class="number">00</span> pm</span><br><span class="line">	<span class="tag">p</span> March <span class="number">21</span> - March <span class="number">23</span>: <span class="number">7</span>:<span class="number">00</span> am - <span class="number">7</span>:<span class="number">00</span> pm</span><br></pre></td></tr></table></figure>
<h2 id="Additional_reference">Additional reference</h2><p>How to undo the <code>git add &lt;filename&gt;</code> before <code>git commit</code>. Use <code>git reset &lt;filename&gt;</code>. Include <code>node_modules</code> into <code>.gitignore</code> so that it won’t be commited to github. Use</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#You</span> can create your own <span class="class">.gitignore</span> which ignores itself. Create <span class="tag">a</span> <span class="class">.gitignore</span> with this two records:</span><br><span class="line"><span class="class">.gitignore</span></span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure>
<p>在<a href="http://bootswatch.com/" target="_blank" rel="external">free bootstrap themes</a>下载bootstrap theme到public folder.</p>
<p><a href="http://stackoverflow.com/questions/33549178/best-practices-for-loading-videos-on-a-web-page" target="_blank" rel="external">Like Airbnb, how to load video at the background of a website</a>, using progressive loading or ?</p>
<p>使用nodemon来监听server-side js文件的改动来自动更新server， 使用browser-sync来监听各种css file的改动。有两种模式， 一种是通过直接创建一个server来host本地的static file, 另一种模式是通过代理另一个服务器， 比如php server, rails webbrick server, python simplehttpserver, nodejs server都可以的!!!!</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browser-<span class="keyword">sync</span> start --proxy=<span class="string">'localhost:3000'</span> --<span class="keyword">files</span> <span class="string">'app_server/views/*.jade, app_server/controllers/*.js, public/stylesheets/*.css'</span></span><br><span class="line"></span><br><span class="line">browser-<span class="keyword">sync</span> start --server --<span class="keyword">files</span> <span class="string">'app_server/views/*.jade, app_server/controllers/*.js, public/stylesheets/*.css'</span></span><br></pre></td></tr></table></figure>
<p>由于我在nodejs里面设置了服务器的端口是3000， 那么通过让browser-sync监听这个端口并创建在3001的代理， 我可以在<code>localhost:3001</code>上面得到自动更新的网页!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AirLoft的原型。 第二期， 基于Bootstrap的扁平化设计， 把所有涉及的页面的clickable prototype做出来， 再迁移到express application或者Angular SPA上， 虽然只是前端的prototype， 但是做好一些npm scripts的配置会让前端开发特别的高效和舒服， 也算是在入门了各种炫技的前端展示后， 逐步到一个full-fledged website的过渡。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN全栈开发[第一期-前端布局]]]></title>
    <link href="http://chocoluffy.com/2016/03/06/MEAN%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%80%E6%9C%9F-%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://chocoluffy.com/2016/03/06/MEAN全栈开发-第一期-前端布局/</id>
    <published>2016-03-06T14:38:41.000Z</published>
    <updated>2016-03-06T14:45:46.000Z</updated>
    <content type="html"><![CDATA[<p>AirLoft的原型。一个sharing economy的网站。 Loft是阁楼的意思， 每个心中那个静静守候一些秘密和癖好的地方。 有些情感， 只能在尘封的铁门后诉说， 就像有些话， 只讲给某个人听。厌倦了某些网站没有审美的UI， 也趁着青春轻狂， 去改变吧。第一期， 记录我前端页面开发的一些手记， 后面慢慢过渡到数据库和后台API设计。</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>最近在做一个sharing economy的网站，在参考了大部分现有网站的UI的样式后， 我们感觉非常的不满😂(当然像quora这种属于知识信息密度特别高的网站使用文本密集的形势还说的过去)， 但是像airbnb还有携程这种大型的peer sharing的网站， 如何可以从第一屏就吸引到用户是一个很重要的问题。直接上图看看：<br>首先是<a href="https://www.airbnb.ca/" target="_blank" rel="external">airbnb</a>的网站：<br><img src="http://ww1.sinaimg.cn/large/c5ee78b5gw1f1mrezw5z0j21kw0t9dqn.jpg" alt="airbnb website"><br>airbnb在网站的第一屏是用一段视频来当做背景的， 非常惊艳， 但是第一屏没有满屏是什么意思？是想吸引我们可以往下滚嘛？但是这种样式让我非常不舒服， 明明有非常好的创意， 为什么不像这个<a href="http://thenewcode.com/samples/polina.html" target="_blank" rel="external">thenewcode.com</a>一样使用高清全屏的视频来当做网页背景呢， 很惊艳对不对!!</p>
<p>再看一下<a href="http://www.ctrip.com/#ctm_ref=nb_cn_top" target="_blank" rel="external">携程</a>的网站， 感觉还是滞留在上个世纪的UI。<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f1mrhyoxpvj21kw0t7qiu.jpg" alt="携程website"><br>于是， 也是出于对颜值的追求，我决定尝试使用轮播在第二屏的网站展示页面来展示各个兴趣小组（比如一起做早餐吃早餐啦， 一起go hiking啦， 一起复习期末考写作业的兴趣小组啦）</p>
<p>考虑到完整项目的时间紧迫， 就不准备在前端的js的代码上花太多时间， 毕竟后面还有转移到express的jade模版， 然后最后还要用angularjs来重写。 于是我就在找各类比较好的carousel的js插件， 在比较了几个的表现之后， 还是<a href="https://github.com/nicinabox/superslides" target="_blank" rel="external">superslides</a>最得我心。废话不多说， 直接上实例代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Superslides - A fullscreen slider for jQuery<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"../dist/stylesheets/superslides.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slides"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"slides-container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/people.jpeg"</span> <span class="attribute">alt</span>=<span class="value">"Cinelli"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/surly.jpeg"</span> <span class="attribute">width</span>=<span class="value">"1024"</span> <span class="attribute">height</span>=<span class="value">"682"</span> <span class="attribute">alt</span>=<span class="value">"Surly"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/cinelli-front.jpeg"</span> <span class="attribute">width</span>=<span class="value">"1024"</span> <span class="attribute">height</span>=<span class="value">"683"</span> <span class="attribute">alt</span>=<span class="value">"Cinelli"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/affinity.jpeg"</span> <span class="attribute">width</span>=<span class="value">"1024"</span> <span class="attribute">height</span>=<span class="value">"685"</span> <span class="attribute">alt</span>=<span class="value">"Affinity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"slides-navigation"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"next"</span>&gt;</span>Next<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"prev"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"javascripts/jquery.easing.1.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"javascripts/jquery.animate-enhanced.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../dist/jquery.superslides.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">'#slides'</span>).superslides(&#123;</span><br><span class="line">      animation: <span class="string">'fade'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>忽略其他的不管， 如果我们希望引入superslides的功效， 我们只需要添加这几个tag:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--css--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"../dist/stylesheets/superslides.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../dist/jquery.superslides.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意jquery的引入要在superslides的前面， 来保证superslides在引用的时候可以用到jquery里面的定义的函数。</p>
<p>在添加了css和js之后， 我们就可以来创建全屏图片轮播的html结构了， 官方推荐的是在<code>&lt;div id=&quot;slides&quot;&gt;</code>里面放一个div里面放各种img， 或者也可以使用一个<code>&lt;li&gt;</code>来分开img和div来在后期分别写样式和定位， 我在我的项目中使用的就是后者， 比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slides"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"slides-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://flickholdr.com/1000/800"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        Slide one</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://flickholdr.com/1000/800/space"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        Slide two</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://flickholdr.com/1000/800/tech"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        Slide three</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"slides-navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"next"</span>&gt;</span>Next<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"prev"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于我的网站背景颜色是暗色系的， 我添加了<code>reveselay</code>和<code>overlay</code>来创建两个mask来写出渐变渐出的效果， 这样可以很好的和背景颜色混为一体。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"section"</span> <span class="attribute">id</span>=<span class="value">"android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"containerrow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slides"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"slides-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"./image/desk.jpg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"reverselay"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"overlay"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mainbadget"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&amp;nbsp;134 &amp;nbsp;&amp;nbsp;</span><br><span class="line">                <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-fire"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&amp;nbsp;3440</span><br><span class="line">              <span class="tag">&lt;/<span class="title">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"text-container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"maintitle"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Morning Call<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"maintext"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">p</span>&gt;</span>Join our breakfast cooking club for fresh pancakes and sunshine!</span><br><span class="line">              Meet your friends here and enjoy every piece of buttered toast. <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>See more.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"slides-navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"prev"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"next"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slider-control"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#react"</span> <span class="attribute">class</span>=<span class="value">"active"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#intro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#native"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#touch"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#android"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意我这里的<code>text-container</code>, <code>maintitle</code>, <code>maintext</code>都是用来创建overlay在图片上面的文字， 分离出来比较方便定位。最后记得要初始化js：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  $(<span class="string">'#slides'</span>).superslides(&#123;</span><br><span class="line">    animation: <span class="string">'fade'</span>,</span><br><span class="line">    play: <span class="string">'8000'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有很多的功能选项， 在<a href="https://github.com/nicinabox/superslides" target="_blank" rel="external">主页</a>可以查看到最全的功能配置，也可以参考他的<a href="http://archive.nicinabox.com/superslides/#1" target="_blank" rel="external">实例页面</a> 那就搞定了! 最后附上成品的gif:<br><img src="https://giant.gfycat.com/WetLongHapuka.gif" alt="project gif"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AirLoft的原型。一个sharing economy的网站。 Loft是阁楼的意思， 每个心中那个静静守候一些秘密和癖好的地方。 有些情感， 只能在尘封的铁门后诉说， 就像有些话， 只讲给某个人听。厌倦了某些网站没有审美的UI， 也趁着青春轻狂， 去改变吧。第一期， 记录我前端页面开发的一些手记， 后面慢慢过渡到数据库和后台API设计。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ajax(with Jquery) on Nodejs server]]></title>
    <link href="http://chocoluffy.com/2016/02/20/Ajax-with-Jquery-on-Nodejs-server/"/>
    <id>http://chocoluffy.com/2016/02/20/Ajax-with-Jquery-on-Nodejs-server/</id>
    <published>2016-02-20T19:37:25.000Z</published>
    <updated>2016-02-20T19:44:47.000Z</updated>
    <content type="html"><![CDATA[<p>Nodejs的第一个上手小项目， 就是尝试自己在本地的页面来发送Ajax请求， 并且通过nodejs的json文件返回后以比较优雅的前端样式呈现出来。 算是再一次复习了Bootstrap， fontawesome库的调用， 以及一些jquery的语法。 仔细回想， 其实nodejs的后端开发和rails\django的router的本质都是一样的， 以前在还没有理解实质的时候就上手实战， 现在慢慢理解了才能够融会贯通， 现在的开发速度大大进步了。 同时也学会了如何允许CORS的请求， 和正则匹配的部分细节。<br><a id="more"></a></p>
<p><img src="https://zippy.gfycat.com/FancyWeeBrontosaurus.gif" alt="project gif"></p>
<h2 id="Requirements">Requirements</h2><p>Requesting 127.0.0.1:3000 should give your index page (with CSS and JS). For the subsequent requests, you should use AJAX to send requests to the Node server and update only some parts of the page with the response data. Ideally, you should return JSON data as a response and then format that using Javascript.</p>
<h2 id="Ongoing_notes">Ongoing notes</h2><ul>
<li><p>how to use Ajax to request the data instead of using url request to node server? <strong><em>Main idea is that to use <code>$.getJSON(&quot;http://127.0.0.1:3000/favs.json&quot;, function(...){...}</code> to send out the Ajax request, and set the nodejs script to be able to respond such json file request and properly handle CORS problem. The things left will be just styling and formatted retrieved information and display.</em></strong></p>
</li>
<li><p>nodejs. You might use Node.js to connect to a database (returning a result set from a query, say, or updating a record); deliver HTML, XML, or JSON content; connect to local files; or serve up static web pages like Apache or another web server.</p>
</li>
<li><p>ajax. The mechanism for sending data to and retrieving data from the server with Ajax is the XMLHttpRequest object. So, now that we have an XMLHttpRequest object created, what do we do with it? We use it to make HTTP requests. To do so, we initialize the object with the open() method, which takes three arguments. Like <code>xmlhttp.open(&quot;GET&quot;,&quot;Demo.xml&quot;,true);</code>.</p>
<ul>
<li>HEAD. <code>xmlhttp.open(&quot;HEAD&quot;,&quot;Demo&quot;,true);</code> and <code>xmlhttp.send(null)</code>.</li>
<li>GET. <code>xmlhttp.open(&quot;GET&quot;,&quot;Demo?FirstName=Nat&amp;LastName=Dunn&quot;,true);</code>, the last argument is choose for true(asynchronous) or false(synchronous). The difference is that for synchronous version, browser has to wait for a response. The code below shows how to use Ajax solely to listen to the content change.</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">var</span> contentDiv = <span class="built_in">document</span>.getElementById(<span class="string">"Content"</span>);</span><br><span class="line"> </span><br><span class="line">        xmlhttp.open(<span class="string">"GET"</span>, <span class="string">"Demo?FirstName=Nat&amp;LastName=Dunn"</span>, <span class="literal">true</span>);</span><br><span class="line">        xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// handle Ajax response.</span></span><br><span class="line">            <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">                contentDiv.innerHTML = xmlhttp.responseText;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xmlhttp.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    observeEvent(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btnStart"</span>);</span><br><span class="line">        observeEvent(btn, <span class="string">"click"</span>, start);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Ajax in jquery. In general, Ajax does not work across domains. Exceptions are services that provide JSONP (JSON with Padding) support, which allow limited cross-domain functionality. JQuery provides Ajax support that abstracts away painful browser differences. It offers both a full-featured $.ajax() method, and simple convenience methods such as $.get(), $.getScript(), $.getJSON(), $.post(), and $.fn.load(). A working example of using Ajax of pulling image data from Flick referring <a href="http://www.w3school.com.cn/jquery/ajax_getjson.asp" target="_blank" rel="external">this post</a></p>
</li>
<li><p>How to avoid CORS(cross-origin resources sharing) error, refer to <a href="http://www.bennadel.com/blog/2327-cross-origin-resource-sharing-cors-ajax-requests-between-jquery-and-node-js.htm" target="_blank" rel="external">this post</a>. <strong><em>Main idea is that at the nodejs server part, we allow some origin and some type of content being CORS, thus we can request such resources at client part, which in this case in my own browser.</em></strong></p>
</li>
<li><p>How to regex all the href links inside a tweet? Especially how to do that in javascript? </p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tweet here is a JSON object</span></span><br><span class="line"><span class="keyword">var</span> tweetString = <span class="built_in">JSON</span>.stringify(tweet);</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(https?:\/\/.*?)("|\s)/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchlst = [];</span><br><span class="line">tweetString.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.slice(-<span class="number">1</span>)==<span class="string">'"'</span>)&#123;</span><br><span class="line">		a = a.slice(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	matchlst.push(a);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><em>Main idea is that we first make a JSON object into a string, then we can do regex match on a string. we use //g to indicate that it is search globally. And then for those valid match, we trim out the trailing quote then store it into a list for later formatting use. </em></strong>. Note that we should make full use of the flag option provided with regex matching, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">this post</a>. For example, <code>/.../g</code> is for global match, <code>/.../i</code> is for case-insensitive match.</p>
<ul>
<li>How to use Jquery to construct <code>div</code> or <code>a</code> elements? refer to <a href="http://stackoverflow.com/questions/867916/creating-a-div-element-in-jquery" target="_blank" rel="external">this post</a>, simply do the following: <strong><em>Here I make use of the Bootstrap alert styling!</em></strong></li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="params">(<span class="string">"&lt;div&gt;"</span>)</span>.addClass<span class="params">('alert alert-warning')</span>.html<span class="params">(<span class="string">"&lt;strong&gt;Warning!&lt;/strong&gt; Such user or tweet does not exist. Please enter a valid query."</span>)</span>.prependTo<span class="params">(query_list)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Avoid the <code>submit</code> event cause a page redirection or refresh? simply add a <code>return false</code> at the end of the submit function. Here is the submit function I wrote to process the info after AJAX from nodejs server. Note that my nodejs server host at <code>http://127.0.0.1:3000/</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#queryform"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    		emptyAll();</span><br><span class="line">    		<span class="keyword">var</span> searchval = $(<span class="string">"#search"</span>).val();</span><br><span class="line">    		<span class="built_in">console</span>.log(searchval);</span><br><span class="line">    		$(<span class="string">"#list ul"</span>).addClass(<span class="string">"unseen"</span>);</span><br><span class="line">    		<span class="keyword">var</span> query_list = $(<span class="string">"#query"</span>);</span><br><span class="line">    		<span class="keyword">var</span> nameHash = &#123;&#125;;</span><br><span class="line">    		<span class="keyword">var</span> tweetidHash = &#123;&#125;; </span><br><span class="line">	    	$.getJSON(<span class="string">"http://127.0.0.1:3000/favs.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">tweets</span>)</span>&#123;</span><br><span class="line">				$.each(tweets, <span class="function"><span class="keyword">function</span>(<span class="params">i,tweet</span>)</span>&#123;</span><br><span class="line">					nameHash[tweet.user.screen_name] = tweet;</span><br><span class="line">					tweetidHash[tweet.id_str] = tweet;</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">Object</span>.keys(nameHash).indexOf(searchval)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">var</span> formattedText = <span class="string">"&lt;strong&gt;User screen name: &lt;/strong&gt;"</span>;</span><br><span class="line">					formattedText += searchval + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;strong&gt;Tweet: &lt;/strong&gt;&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;pre&gt;&lt;code&gt;"</span> + <span class="built_in">JSON</span>.stringify(nameHash[searchval], <span class="literal">null</span>, <span class="number">4</span>) + <span class="string">"&lt;/code&gt;&lt;/pre&gt;"</span>;</span><br><span class="line">					$(<span class="string">"&lt;p&gt;"</span>).html(formattedText).prependTo(query_list);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(tweetidHash).indexOf(searchval)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">var</span> formattedText = <span class="string">"&lt;strong&gt;Tweet ID: &lt;/strong&gt;"</span>;</span><br><span class="line">					formattedText += searchval + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;strong&gt;Tweet: &lt;/strong&gt;&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;pre&gt;&lt;code&gt;"</span> + <span class="built_in">JSON</span>.stringify(tweetidHash[searchval], <span class="literal">null</span>, <span class="number">4</span>) + <span class="string">"&lt;/code&gt;&lt;/pre&gt;"</span>;</span><br><span class="line">					$(<span class="string">"&lt;p&gt;"</span>).html(formattedText).prependTo(query_list);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;		</span><br><span class="line">					$(<span class="string">"&lt;div&gt;"</span>).addClass(<span class="string">'alert alert-warning'</span>).html(<span class="string">"&lt;strong&gt;Warning!&lt;/strong&gt; Such user or tweet does not exist. Please enter a valid query."</span>).prependTo(query_list);</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">	</span><br><span class="line">			$(<span class="string">"#query"</span>).removeClass(<span class="string">"unseen"</span>);</span><br><span class="line">			$(<span class="string">"#query"</span>).addClass(<span class="string">"seen"</span>); </span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    	&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>Some JS tricks:<ul>
<li><code>if...in...</code> equivalent type in JS as in python. use <code>Array.indexOf(element)&gt;=0</code> to know that if such element exist in this array.</li>
<li>Get the keys array of a Hash. <code>Object.keys(hash)</code>.</li>
<li>Get the last character from a string. <code>string.slice(-1)</code>.</li>
<li>Trim out the last character from a string. <code>string = string.slice(0, -1)</code>.</li>
<li>Use Jquery to get the value from submitted form. </li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Nodejs的第一个上手小项目， 就是尝试自己在本地的页面来发送Ajax请求， 并且通过nodejs的json文件返回后以比较优雅的前端样式呈现出来。 算是再一次复习了Bootstrap， fontawesome库的调用， 以及一些jquery的语法。 仔细回想， 其实nodejs的后端开发和rails\django的router的本质都是一样的， 以前在还没有理解实质的时候就上手实战， 现在慢慢理解了才能够融会贯通， 现在的开发速度大大进步了。 同时也学会了如何允许CORS的请求， 和正则匹配的部分细节。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Online messege sending后端C实现版]]></title>
    <link href="http://chocoluffy.com/2016/02/18/Online-messege-sending%E5%90%8E%E7%AB%AFC%E5%AE%9E%E7%8E%B0%E7%89%88/"/>
    <id>http://chocoluffy.com/2016/02/18/Online-messege-sending后端C实现版/</id>
    <published>2016-02-18T22:51:30.000Z</published>
    <updated>2016-02-18T23:00:55.000Z</updated>
    <content type="html"><![CDATA[<p>原型是最近一门课的作业， 这是我在过程中记下的一些手记心得， 都是我认为是值得关注的地方。 未来会把这些后端函数加入TCP协议， 更贴近实战使用吧。基础的数据结构主要是链表， 算是用C自己再复习一遍链表实现。算法嘛？没有算法😂不需要考虑性能也就没有考虑算法优化咯。</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1f149fxx25oj21360w6n5z.jpg" alt="screenshot"><br><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f149r4zqkaj213e0zgajd.jpg" alt="profileshot"></p>
<h2 id="Ongoing_notes">Ongoing notes</h2><ul>
<li>how to enter the interactive mode? the main function for interactive mode is process_args. Like the code snippet below, it keep reading inputs from stdin(then using <code>fgets</code> to feed it into a input buffer), then using tokenize function(making use of <code>strtok</code> to tokenize the input commands), then the input command is stored in <code>char ** cmdargv</code>, which just like <code>argv</code> we often use. <code>cmdargv[0]</code> stores the first command, like <code>profile</code> and so on. What is left is just to depend on the return value from each core functions to display a proper information back to the screen.  </li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to FriendMe! (Local version)\nPlease type a command:\n&gt; "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fgets(input, INPUT_BUFFER_SIZE, input_stream) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// only echo the line in batch mode since in interactive mode the user</span></span><br><span class="line">    <span class="comment">// just typed the line</span></span><br><span class="line">    <span class="keyword">if</span> (batch_mode) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *cmd_argv[INPUT_ARG_MAX_NUM];</span><br><span class="line">    <span class="keyword">int</span> cmd_argc = tokenize(input, cmd_argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmd_argc &gt; <span class="number">0</span> &amp;&amp; process_args(cmd_argc, cmd_argv, &amp;user_list) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// can only reach if quit command was entered</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>cast type when allocating memory for <strong><em>Fixed length character array</em></strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> user &#123;</span><br><span class="line">    <span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line">    <span class="keyword">char</span> profile_pic[MAX_NAME];  <span class="comment">// This is a *filename*, not the file contents.</span></span><br><span class="line">    <span class="keyword">struct</span> post *first_post;</span><br><span class="line">    <span class="keyword">struct</span> user *friends[MAX_FRIENDS];</span><br><span class="line">    <span class="keyword">struct</span> user *next;</span><br><span class="line">&#125; User;</span><br></pre></td></tr></table></figure>
<p>we need to do this:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char* username = malloc<span class="list">(<span class="keyword">MAX_NAME*sizeof</span><span class="list">(<span class="keyword">char</span>)</span>)</span><span class="comment">;</span></span><br><span class="line">strcpy<span class="list">(<span class="keyword">newuser-&gt;name</span>, username)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>to be able to allocate the memory for that character array. </p>
<ul>
<li>how to handle structs of linked list when only the head of the list is given like <code>int create_user(const char *name, User **user_ptr_add)</code>. Note that since we will modify the linked list itself, we will have to pass in a pointer of pointer. Now if we only want to iterate through this linked list, we don’t need the ptr of ptr. Resolved by referring to <a href="http://geeksquiz.com/linked-list-set-2-inserting-a-node/" target="_blank" rel="external">this post </a>, and refer to <a href="https://www.cs.bu.edu/teaching/c/linked-list/delete/" target="_blank" rel="external">this post</a> and <a href="http://geeksquiz.com/linked-list-set-3-deleting-node/" target="_blank" rel="external">this post from Geeksquiz</a> for deleting a node from a post. <blockquote>
<p>one key thing of dealing with ptr of ptr in linked list is that we need make clear the use of <code>curr</code> pointer and <code>*user_ptr</code> since we are suppore to change it in function <code>int create_user(const char *name, User **user_ptr_add)</code>. </p>
</blockquote>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add the newuser to the end of linked list.</span></span><br><span class="line"><span class="comment">// int create_user(const char *name, User **user_ptr_add) </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// now append this node to the end of linked list.</span></span><br><span class="line">	User* last = *user_ptr_add;</span><br><span class="line">	<span class="keyword">if</span>(*user_ptr_add == <span class="literal">NULL</span>)&#123; <span class="comment">// if linked list is empty</span></span><br><span class="line">		*user_ptr_add = newuser;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123; <span class="comment">// otherwise</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strcmp</span>(last-&gt;name, name) == <span class="number">0</span>)&#123; <span class="comment">// if the first node is the same user.</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(last-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(last-&gt;name, name) == <span class="number">0</span>)&#123; <span class="comment">// if same user exists</span></span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			last = last-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		last-&gt;next = newuser;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delete the user with name from the linked list.</span></span><br><span class="line"><span class="comment">// int delete_user(const char *name, User **user_ptr_del)</span></span><br><span class="line"></span><br><span class="line">		User* curr = *user_ptr_del;</span><br><span class="line">		User* prev; <span class="comment">// store previous node.</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// if head node itself holds the user to be deleted.</span></span><br><span class="line">		<span class="keyword">if</span>(curr != <span class="function"><span class="literal">NULL</span> &amp;&amp; <span class="title">strcmp</span><span class="params">(curr-&gt;name, name)</span></span>== <span class="number">0</span>)&#123;</span><br><span class="line">			*user_ptr_del = curr-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(curr);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(curr != <span class="function"><span class="literal">NULL</span> &amp;&amp; <span class="title">strcmp</span><span class="params">(curr-&gt;name, name)</span> !</span>= <span class="number">0</span>)&#123;</span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		delete_user_from_friends(name, *user_ptr_del);</span><br><span class="line">		prev-&gt;next = curr-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(curr);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>type is not assignable during <code>malloc</code>: <code>struct user *friends[MAX_FRIENDS];</code></p>
</li>
<li><p>segmentation fault!!! <strong><em>Usually in practice, if we want to access the memory location where we don’t have access to, meaning that when we want to set some attributes, we need to first make sure that that part of memory has been malloc!!</em></strong></p>
<blockquote>
<p>One trick on this is to make sure that whenever we see a struct like this: first is to malloc memory for the all struct, then for each array, like here <code>name</code>, <code>profile_pic</code> and <code>friends</code> array. Especially the <code>friends</code> array, the haunting time when debugging for the final function <code>delete_user</code>, I always get a segmentation fault, which results from that I did not malloc the memory for the friend array at the very first beginning inside <code>create_user</code> function, thus when I try to change one element’s value, I will access to unallocated memory, a segmentation fault.</p>
</blockquote>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> user &#123;</span><br><span class="line">    <span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line">    <span class="keyword">char</span> profile_pic[MAX_NAME];  <span class="comment">// This is a *filename*, not the file contents.</span></span><br><span class="line">    <span class="keyword">struct</span> post *first_post;</span><br><span class="line">    <span class="keyword">struct</span> user *friends[MAX_FRIENDS];</span><br><span class="line">    <span class="keyword">struct</span> user *next;</span><br><span class="line">&#125; User;</span><br></pre></td></tr></table></figure>
<ul>
<li>Difference between <code>memcpy</code> and <code>strcpy</code>. <code>strcpy</code> will stop when meeting a ‘\0’ line terminator, while <code>memcpy</code> will not do that, it can do the content copy without looking to the value of the contents.</li>
</ul>
<h2 id="Bugs_remaining_to_fix">Bugs remaining to fix</h2><ul>
<li>time.h. I finally do a trick to cover up the failure of using time.h. we are supposed to record the time when a post is created, and store the address of that <code>time_t</code>, which is actually a long int, to the struct attribute <code>post-&gt;date</code>, while it fails to display the right time when doing <code>ctime</code> in <code>print_user</code> function. I finally insert a time update right into the <code>print_user</code> function to let them next to each other and it display right result?!.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原型是最近一门课的作业， 这是我在过程中记下的一些手记心得， 都是我认为是值得关注的地方。 未来会把这些后端函数加入TCP协议， 更贴近实战使用吧。基础的数据结构主要是链表， 算是用C自己再复习一遍链表实现。算法嘛？没有算法😂不需要考虑性能也就没有考虑算法优化咯。</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://chocoluffy.com/tags/C/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Responsive web design[第三期]-js动画]]></title>
    <link href="http://chocoluffy.com/2016/02/04/Responsive-web-design-%E7%AC%AC%E4%B8%89%E6%9C%9F-js%E5%8A%A8%E7%94%BB/"/>
    <id>http://chocoluffy.com/2016/02/04/Responsive-web-design-第三期-js动画/</id>
    <published>2016-02-05T01:48:22.000Z</published>
    <updated>2016-02-05T01:55:38.000Z</updated>
    <content type="html"><![CDATA[<p>Introduce greensock library to javascript, along with GPU acceleration to create high-quality and smooth animations. </p>
<a id="more"></a>
<h2 id="Introduction">Introduction</h2><p>很多前端开发者会告诉你，你应该避免使用 JavaScript 动画。使用 CSS 动画会有更好的性能（更少的 CPU 时间）和更平滑的效果（更高的帧率）。</p>
<p>然而，JavaScript 动画慢的原因经常是因为你用的库并没有为动画进行优化。优化过的 JavaScript 动画引擎（比如 GreenSock 或 Velocity.js）有堪比 CSS 动画的性能。某些情况下 JS 动画甚至比 CSS 动画更快！可参考下面这个性能的比较， 最后发现在某些情况下greensock的性能会比jquery好上5-6倍</p>
<ul>
<li><a href="https://www.greensock.com/js/speed.html" target="_blank" rel="external">greensock</a> </li>
</ul>
<h2 id="引入greensock_js库">引入greensock js库</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TweenMax.fromTo(<span class="string">"#box"</span>,<span class="number">1</span>, &#123;</span><br><span class="line">    <span class="comment">// from</span></span><br><span class="line">    css: &#123;</span><br><span class="line">      left: <span class="string">"-200px"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="comment">// to</span></span><br><span class="line">    css: &#123;</span><br><span class="line">      left: <span class="string">"200px"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 永久重复动画的选项</span></span><br><span class="line">    repeat: -<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转、重新运行动画的选项</span></span><br><span class="line">    yoyo: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变 easing 类型</span></span><br><span class="line">    ease: Power2.easeInOut,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>什么是fps? 帧率或画面更新率是用于测量显示帧数的量度[1]。测量单位为“每秒显示帧数”（Frame per Second，FPS，帧率）或“赫兹”，一般来说FPS用于描述影片、电子绘图或游戏每秒播放多少帧，而赫兹则描述显示屏的画面每秒更新多少次。<br>由于人类眼睛的特殊生理结构，如果所看画面之帧率高于每秒约10-12帧的时候，就会认为是连贯的[2]， 此现象称之为视觉暂留。这也就是为什么电影胶片是一格一格拍摄出来，然后快速播放的。但30帧仅仅是流畅，而非平滑连续，因此有更多帧率的产品推出也就不足为奇了。<br>有声电影的拍摄及播放帧率均为每秒24帧，对一般人而言已算可接受，但对早期的高动态电子游戏，尤其是射击游戏或竞速游戏来说，帧率少于每秒30帧的话，游戏就会显得不连贯，这是因为电脑会准确地显示瞬时的画面（像是一台快门速度无限大的相机），没有动态模糊使流畅度降低。而使用相同帧率的摄影机拍摄物体移动时，该场景的视频必定会表现所有移动物体在曝光时间内所有位置的完整组合。因此很多新世代电玩游戏以动态模糊为特色。在实际体验中，60帧相对于30帧有着更好的体验。</p>
</blockquote>
<p>在app.js里面我们用y来表现出垂直状态的变化</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> animateLogo()&#123;</span><br><span class="line">	TweenMax.fromTo(<span class="string">"#logo"</span>, <span class="number">2.5</span>, &#123;</span><br><span class="line">		css: &#123;</span><br><span class="line">			y: <span class="string">"-30px"</span>,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		css: &#123;</span><br><span class="line">			y: <span class="string">"20px"</span>,</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		repeat: -<span class="number">1</span>,</span><br><span class="line">		yoyo: true,</span><br><span class="line">		ease: Sine.easeInOut,</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GPU加速">GPU加速</h2><p>你可以把一个网页想象为一堆矩形。布局和绘图都是由 CPU 完成的：</p>
<p>CPU 计算这些矩形的布局。矩形在哪里？它们有多大？<br>CPU 把矩形渲染成点阵位图（bitmap）。<br>之后如果可能的话，矩形被送到 GPU 以获得更好的性能：</p>
<p>CPU 以点阵位图的形式上传到 GPU 中。<br>CPU 给 GPU 发送指令去处理这些位图。可能有平移/缩放/旋转，修改透明度，等等。<br>GPU 为什么比 CPU 快呢？假设我们把一个红色点阵和一个绿色点阵结合，CPU 不得不一个一个像素地做.</p>
<p>总的来说，当修改 CSS 属性时，有三种可能的开销：</p>
<p>重排（CPU。代价最高）。<br>重绘（CPU）。<br>变换, 旋转, 缩放, 透明度（GPU，代价最低）。</p>
<p>因此在使用transform的时候， 我们常常用y在表示垂直方向的移动，这么做是不会重新排列布局的， 而是在局部位置偏移。</p>
<blockquote>
<p>注意： left 只对 position: absolute 生效 </p>
</blockquote>
<p>transform 的原理是由元素的定位位置（absolute or relative) 偏移。<br>用 GreenSocks 去修改 left 的话是改变定位位置。<br>也就是说 left 的动画改变布局，但 transform 动画不会改变布局。</p>
<h2 id="多步骤动画">多步骤动画</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> TimelineMax();</span><br><span class="line">t.<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">1</span>,&#123;<span class="attribute">x</span>: <span class="number">200</span>&#125;)</span><br><span class="line">  .<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">0.5</span>,&#123;<span class="attribute">rotation</span>: <span class="string">"360deg"</span>&#125;)</span><br><span class="line">  .<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">1</span>,&#123;<span class="attribute">y</span>: <span class="number">100</span>&#125;)</span><br><span class="line">  .<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">0.5</span>,&#123;<span class="attribute">rotation</span>: <span class="string">"-=360deg"</span>&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="指示器(滚动指示条)">指示器(滚动指示条)</h2><p>当窗口滚动时, 你可以用 window.scrollY 来算出窗口正在展示的是哪一部分。那么现在的重点就在于， 怎样可以获得关于元素所在位置， 高度的各种属性， 比如<code>scrollY</code>, <code>offsetHeight</code>, <code>offsetTop</code></p>
<ul>
<li><a href="http://stackoverflow.com/questions/6777506/offsettop-vs-jquery-offset-top/21880020#21880020" target="_blank" rel="external">offset的各种用法实例</a></li>
</ul>
<h2 id="取消link默认行为">取消link默认行为</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSmoothScrolling</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#slider-control a"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;links.length; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> link = links[i];</span><br><span class="line">		<span class="keyword">var</span> section = <span class="built_in">document</span>.querySelectorAll(<span class="string">"div.section"</span>)[i];</span><br><span class="line">		(<span class="function"><span class="keyword">function</span>(<span class="params">sec</span>)</span>&#123;</span><br><span class="line">			<span class="comment">// console.log(sec);</span></span><br><span class="line">			link.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">				<span class="comment">// console.log(sec.offsetTop+"px");</span></span><br><span class="line">				scrollToElement(sec);</span><br><span class="line">				e.preventDefault();</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)(section)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先用一个闭包来保证， 里面的函数在click的时候才之行， 而在那个时候， i 已经到了最后一个link的位置， 所以必须提前找到对应的section， 然后在闭包中传入。 同时需要在click事件的最后加上一个e.preventDefault， 来阻止link的默认行为， link的默认行为是直接跳转， 然后我们需要动画来辅助。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Introduce greensock library to javascript, along with GPU acceleration to create high-quality and smooth animations. </p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Memory allocation in C]]></title>
    <link href="http://chocoluffy.com/2016/01/26/Memory-allocation-in-C/"/>
    <id>http://chocoluffy.com/2016/01/26/Memory-allocation-in-C/</id>
    <published>2016-01-26T22:36:34.000Z</published>
    <updated>2016-02-01T14:52:04.000Z</updated>
    <content type="html"><![CDATA[<p>Learning memory allocation in C for beginners will be totally a pain. This post, distilled from course materials, will provide you a practice guide and example coding snippets to help you learning more and fast in C programming language. It is cherishable, at least to me :)</p>
<a id="more"></a>
<h2 id="Introduction_to_malloc">Introduction to malloc</h2><ul>
<li>Variable defined in function will be stored in stack, so how to use that part of memory after function returns? we use <code>void * malloc(size_t size)</code> will allocate memory in heap. This function will remain the memory for the variables until the function explicitly deallocate them. The argument for this function indicates how many bytes of memory should it allocate.</li>
<li>In general, <code>size_t</code> is unsigned_int. Notice the <code>void *</code> type of the pointer, we know that in C, add 1 to a pointer will go to the next legal address, for <code>int*</code>, it is the next integer, for <code>char*</code>, it is next character.</li>
<li>A void pointer is a pointer that represent a generic type. It just points to the memory specified, so it do not need to specify right now what type of that memory is, instead, we will declare the type when use pointer:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure>
<p>the above code indicates that we will the allocated memory for integer. </p>
<h2 id="Example_code">Example code</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"> * <span class="type">Return</span> an <span class="type">array</span> <span class="keyword">of</span> the squares <span class="keyword">from</span> <span class="number">1</span> to max_val.</span><br><span class="line"> */</span><br><span class="line"><span class="type">int</span> *squares(<span class="type">int</span> max_val) &#123;</span><br><span class="line">    <span class="type">int</span> *<span class="literal">result</span> = malloc(sizeof(<span class="type">int</span>) * max_val);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= max_val; i++) &#123;</span><br><span class="line">        <span class="literal">result</span>[i - <span class="number">1</span>] = i * i ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *squares_to_10 = squares(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    // <span class="keyword">let</span>'s print them <span class="keyword">out</span> </span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        printf(<span class="string">"%d\t"</span>, squares_to_10[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that in the above code, there are several variables that are located in heap. They are, the address store inside the variable result, since it points to a integer that lies in heap, while <strong>the addresss of the variable result is not in the heap, it is in the stack</strong>. One quick trick is that those value in heap, their address is valid. </p>
<h2 id="Explicitly_deallocate_the_memory">Explicitly deallocate the memory</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">play_with_memory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *pt = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    *pt = <span class="number">49</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// What happens if you comment out this call to free?</span></span><br><span class="line">    <span class="built_in">free</span>(pt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// What happens if you uncomment these statements?</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pt); <span class="comment">// output 49</span></span><br><span class="line">    *pt = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pt); <span class="comment">// output 7</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    play_with_memory();</span><br><span class="line">    play_with_memory();</span><br><span class="line">    play_with_memory();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Important issue here: when returned from the function, all variables will be freed from stack, which means that the <code>i</code> and <code>result</code> in the above code will be removed. It will cause a memory leak if we forget to link the memory from <code>malloc</code> to other heap variables. Since there will be no way from elsewhere to access that part of memory.</p>
</blockquote>
<ul>
<li>The danger of memory leak is that if it accumulates, it will finally cause a <code>out of memory</code> issue.</li>
<li>what happens if we print out the value stored in that memory location after we free up that pointer? <strong>Address is still valid and the value can still be accessed, but this time, we are using the part of memory that does not belong to us</strong>. Note that using unallocated memory is OK in some cases, but it will be dangerous when that part of memory being reallocated. So, always use allocated memory!</li>
</ul>
<h2 id="Passing_values">Passing values</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> **arr_matey)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// let's make an array of 3 integers on the heap</span></span><br><span class="line">   *arr_matey = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> *arr = *arr_matey;</span><br><span class="line">   arr[<span class="number">0</span>] = <span class="number">18</span>;</span><br><span class="line">   arr[<span class="number">1</span>] = <span class="number">21</span>;</span><br><span class="line">   arr[<span class="number">2</span>] = <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    helper(&amp;data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's just access one of them for demonstration</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the middle value: %d\n"</span>, data[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>there are basically two ways to help to avoid memory leak, a) <strong>return value</strong>, if we define that function type to be a pointer type, so that we can return the pointer in order to assign the values in main function. b) <strong>argument</strong>, we pass the one we want to assign values to the function and do the assigning part inside that function, and this time, the function type can be void but still finish the task.</li>
<li>However, it is much harder to use <code>argument</code> one since in C, the changes inside the function will not be preserved if we return nothing. Therefore, we need to the “address-value” relation in such scenario – That is <strong>we pass in pointer, we change value pointed at pointer, without returning anything, and we’re done.</strong> While problem comes when we want to change the pointer, say this line <code>*arr_matey = malloc(sizeof(int) * 3);</code>, we want to change the pointer now, but such change will not be preserved after function. Therefore, we will need to pass in a <strong>“poiter of pointer” to deal with pointer assignment!</strong> </li>
</ul>
<h2 id="Nested_structure">Nested structure</h2><p>if we want to use a nested struture to represent an array, say in that array, each element points to another array, since we don’t know that array size at compilation time, we would use <code>malloc</code> to allocate memory for those int array. The code is like</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ** pt = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>Say, now, I want the pt[0] to hold up an array of one integer, the way to do that is to use:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure>
<p>Similarly, if we want pt[1] to hold up 3 integers, we would use:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note that when we free those pointers, we need to free the innermost pointer first then outer one. </p>
</blockquote>
<p>An complete code example:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this allocates space for the 2 pointers</span></span><br><span class="line">    <span class="keyword">int</span> **pointers = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * <span class="number">2</span>); </span><br><span class="line">    <span class="comment">// the first pointer points to a single integer</span></span><br><span class="line">    pointers[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">// the second pointer pointes to an array of 3 integers</span></span><br><span class="line">    pointers[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's set their values</span></span><br><span class="line">    *pointers[<span class="number">0</span>] = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    pointers[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    pointers[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line">    pointers[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// do other stuff with this memory</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// now time to free the memory as we are finished with the data-structure</span></span><br><span class="line">    <span class="comment">// first we need to free the inner pieces</span></span><br><span class="line">    <span class="built_in">free</span>(pointers[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(pointers[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// now we can free the space to hold the array of pointers themselves</span></span><br><span class="line">    <span class="built_in">free</span>(pointers);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Memory_model">Memory model</h2><ul>
<li>note that th variable in main function does not belong to global variable, indicating it should still go to the stack part. The “global data” part contains mainly three stuff: <strong>a) global variables, b) string literals </strong> Note that for the string literals, the code like this: <code>char* str = &quot;Hello world!&quot;;</code> can lie in a local function, it just means that the pointer str can be in the stack, while the string literal “Hello world!” is in global data part. </li>
<li>And dynamic memory allocation lie in heap.</li>
</ul>
<h2 id="String">String</h2><ul>
<li><p>difference between a string and a character is that at the end of string, there is a <code>\0</code> as an ending signal. Once the character array declared, the size is fixed. Note that the difference between these similar version of declaring character array:</p>
<ul>
<li><code>char string[20] = &quot;cool shit&quot;</code>, it is defining a <strong>string variable</strong>, with a <code>\0</code> at the end of the array, note that there will be a lot of <code>\0</code> following the valid words. It can be changed afterwards.</li>
<li><code>char string[] = &quot;cool shit&quot;</code>, defining a <strong>string variable</strong> the size will be fixed according to the first assignment. It can be changed afterwards.</li>
<li><code>char* string = &quot;cool shit&quot;</code>, defining a <strong>string constant</strong>. it is a string literal! cannot be changed!! If you change the string, it will give a “bus error”. Main point here: <em> <strong>it makes string point to a read-only memory where string literal is stored, while the above two way are indeed allocating memory and copy string to them.</strong></em></li>
</ul>
</li>
<li><p>difference between <code>strlen</code> and <code>sizeof</code>. <code>strlen</code> will return the valid number of characters before null character, while <code>sizeof</code> will just give you the size of whole char array including null characters.</p>
</li>
<li><p>use <code>strncpy</code> as a stable counterpart of <code>strcpy</code>, the usage is like: <code>strncpy(s1, s2, sizeof(s1));</code> see the complete code below, s2 is a string literal. </p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">32</span>] = <span class="string">"University of"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is unsafe because s1 may not have enough space</span></span><br><span class="line">    <span class="comment">// to hold all the characters copied from s2.</span></span><br><span class="line">    <span class="comment">//strcpy(s1, s2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This doesn't necessarily null-terminate s1 if there isn't space.</span></span><br><span class="line">    <span class="built_in">strncpy</span>(s1, s2, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">    <span class="comment">// So we explicitly terminate s1 by setting a null-terminator.</span></span><br><span class="line">    s1[<span class="number">4</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note that s1 is a character array, which means that there is no null characters at the end. if we want to do this way, we want to add null character at the end.</p>
</blockquote>
<ul>
<li>Similarly, <code>strncat(s1, s3, sizeof(s1)-strlen(s1)-1);</code> is the stable version of using strcpy.</li>
<li><code>char * strchr(const char s, int c);</code> return the index at the first occurence of the character</li>
<li><code>char * strstr(const char* s1, const char* s2);</code> find sub string. see the code example below:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">30</span>] = <span class="string">"University of C Programming"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the index of the first 'v'</span></span><br><span class="line">    p = <span class="built_in">strchr</span>(s1, <span class="string">'v'</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Character not found\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Character found at index %ld\n"</span>, p - s1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the first token (up to the first space)</span></span><br><span class="line">    p = <span class="built_in">strchr</span>(s1, <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *p = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if the character specified in the second argument cannot find the right place, then it will assign NULL to p in this case. We can use pointer subtraction to get the index. </p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Learning memory allocation in C for beginners will be totally a pain. This post, distilled from course materials, will provide you a practice guide and example coding snippets to help you learning more and fast in C programming language. It is cherishable, at least to me :)</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://chocoluffy.com/tags/C/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
