<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余舜哲的 One Piece</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chocoluffy.com/"/>
  <updated>2018-03-09T21:55:16.430Z</updated>
  <id>http://chocoluffy.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《风沙星辰 &amp; 夜间飞行》文摘</title>
    <link href="http://chocoluffy.com/2018/01/22/%E3%80%8A%E9%A3%8E%E6%B2%99%E6%98%9F%E8%BE%B0-%E5%A4%9C%E9%97%B4%E9%A3%9E%E8%A1%8C%E3%80%8B%E6%96%87%E6%91%98/"/>
    <id>http://chocoluffy.com/2018/01/22/《风沙星辰-夜间飞行》文摘/</id>
    <published>2018-01-23T04:05:54.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>《夜间飞行》不如《风沙星辰》惊艳，但依旧较完整地呈现了“自由”与“责任”的矛盾。“这些也许哪一天会失去生命的人，他们本可以幸福地生活着。”，而里维埃，又有什么权力去阻止一个人追求幸福生活，而人又为什么渴望永恒。仅仅表现法比安的妻子和里维埃的冲突，矛盾的张力还不够激烈，角色的观念以一致的坚定为主。这是一个很深刻的主题，和加缪的《鼠疫》对比阅读。</p><a id="more"></a><h1 id="风沙星辰-Terre-Des-Hommes"><a href="#风沙星辰-Terre-Des-Hommes" class="headerlink" title="风沙星辰 Terre Des Hommes"></a>风沙星辰 Terre Des Hommes</h1><p>农民在耕作中，总能借助着他手里的工具，一点一点地挖掘到那属于自然的各种秘密。</p><p>昏暗的夜晚，平原上微弱的光线，好像 <strong>空中零落的星光</strong> 。</p><p>那一刻，也许有的人正在阅读思考，互相倾诉着各自的心声；也许有的人正全神贯注地探索着宇宙的奥秘，计算着仙女座离我们究竟有多远；还有的人，在某一个角落，相爱着。远处乡间闪动的火焰，是人们在等待食物的信号。这些人里面，有诗人，老师和木匠。然而这片闪烁的星空下，又有多少关闭的窗户，暗去的星光，与沉睡着的人们……</p><p><strong>我们要试着走近这一切。和乡间那灯火阑珊处，轻轻地聊上几句。</strong></p><blockquote><p>夜很美，却敌不过我的意兴阑珊。</p></blockquote><p>月亮在一层苍白如雪的雾气中，像一堆木炭似的逐渐熄灭了。</p><p>那是一个充满了陷阱与圈套，四处皆是悬崖的世界。这个世界里，黑色的长龙守卫着山谷的入口，千万束的闪电好像花环一般覆盖着山顶。老飞行员们以某种近乎科学的方法，令我们维持着对他们的尊敬。然而迟早会有那么一天，他们当中的某一个，会消失在茫茫高空中，再也无法回到我们中间。</p><p>在这个灰色的小餐馆中，在一群群努力驱赶着白天疲惫的普通公务员中，这个肩膀沉重的同事显得如此高贵。在他缺乏细腻的外壳下，我仿佛看到了一个天使如何战胜凶猛的黑龙的场景。</p><p>一瞬间，这个静谧、平坦而简单的，当你从云海中浮出的那一刻探索到的世界，对我而言忽然拥有了一种完全陌生的意义。那种温柔变成了一个陷阱。我能够想象得出，在我脚下铺展的这片白色海洋，隐藏着怎样致命的骗局。那里既没有属于人的喧嚣与羁动，也没有城市中的车水马龙。占领它的，只有无边的绝对的寂静。 <strong>对我来说，这个白色的陷阱变成了一条界线。它分隔着现实与幻境，让已知的世界与未知的一切遥遥相望，无从聚首。我猜想，一出戏它本身也许是没有任何意义的。只有当某一种文化，某一种文明，或者某一种职业来诠释它的时候，它才拥有属于它的内涵。就好像那些山里人，他们也一样见过白色的云海，然而他们永远也不会发现，云海下那层无与伦比的窗帘。</strong></p><blockquote><p>原来我们习以为常的，是他人心里的浪漫，比如伦敦的雨，多伦多的雪。</p></blockquote><p>灯光下，西班牙在我的地图上，一点一点地变成一个充满童话的国度。我在地图上做了各种信号，哪里充满了陷阱，哪里将会是我的避风港。</p><blockquote><p>于是我把我所有的不安和流离画了出来，仿佛我还有重新选择的机会。</p></blockquote><p>我竖起了大衣的领子，带着一种莫名的热情，行走在陌生的人群中。与素不相识的人擦肩而过，令我因装满了秘密的内心而变得无比自豪。他们不认识我。而他们的烦恼、冲动，将在太阳升起的那一刻，一齐被装进邮包，由我来为他们传递。他们的希望与梦想，将会通过我的双手抵达目的地。 <strong>我被厚重的大衣包裹着，在人群中迈着好似保护者一般的脚步。可是，人们却是无法了解我的孤独的。</strong></p><blockquote><p>走在陌生的人群里，你听不懂我的语言，就好像我听不见你的秘密。又想起来那个上帝创造语言的这个故事。是为了让人们无法齐心协力的合作。</p></blockquote><blockquote><p>我来悄地保护你了</p></blockquote><p>我是这个秘密中的独行者。在战斗开始以前，我已经知道了敌人的位置……</p><p>飞行员混在人群中，没有人知道他是做什么的……一路上路灯林立，目的地离得越来越近。 <strong>这辆老公车，它不过是你和我，以及所有的人在变成蝴蝶飞翔在天空中以前，不得不栖息在里面的虫茧。</strong></p><p>所有的同伴们，都曾经在图鲁兹冬天灰色的天空下，被遗忘在栖息于公车上的人群中。但是也正是在这么一个早晨，一种属于帝王般的力量与勇气在他身上诞生了。五个小时以后，他将把属于北国冬天的雨点和雪花抛在身后。他将减缓引擎动力， <strong>在阿利坎特耀眼的阳光包围下，一路向着夏天降落而去。</strong></p><p>老公车早已消失不存在了。然而它的简陋和不舒适，却一直生动地留在我的记忆中。它多少象征着在飞行员的职业中，迎接坏消息到来之前，艰难却又不可或缺的准备与铺垫。</p><p>被那沉默寡言的司机引领着，行驶在下着雨的黎明中。</p><blockquote><p>好有画面感啊！</p></blockquote><p>坐在我身边的公务员，你从来都没有从这堵墙翻越出去的机会。这不是你的错。你只是用尽全力，搭建着那蒙住了双眼的平和生活。就像飞蛾一样，它们总是往有光亮的地方飞舞过去。你在那布尔乔维亚的、一成不变又令人窒息的外省生活方式中，舒适地将自己就这么安顿下来。 <strong>你筑起这道谦卑的墙壁，用它来抵挡狂风、海浪与星星。</strong> <strong>你不再想为那些严峻的问题而操心担忧了，因为你好不容易才摆脱了昔日沉重的生活负担。</strong> <strong>你不是生活在某一个游荡的星球上的公民，你也不会去提出没有答案的问题：你只是一个生活在图鲁兹的小布尔乔维亚。在曾经还来得及做些什么的过去，从来没有人抓住过你的肩膀，对你说些什么。如今，你自己堆砌成的黏土，早已经风干变硬。你身体里曾经沉睡着那颗音乐家、诗人或者天文学家的心灵，再也没有人能将它唤醒了。</strong></p><blockquote><p>或许有一天，我们不再想感动星辰。为什么我们追求永恒？因为尊严。</p></blockquote><p>我不再抱怨天空中飘洒的雨点。这神奇的职业即将向我打开一扇门。两个小时以后，我眼前舞动着的，将是黑色的长龙与笼罩着山顶的蓝色闪电。我一路要阅读的，则是闪烁在天上的星星。</p><p><strong>大部分的时候，旅行中并没有什么特别的故事。我们像职业的潜水员一样，平静地潜入深不见底的大海。这个海洋今天已经被人们掌握研究得很是详细。飞行员、机械师、通信员不再将每一次出发当做一次探险，而是走进了一个实验室。他们遵守的，是指针上显示的各种数据，而不是窗外一片接一片的风景。机舱外的山川被黑暗笼罩着。可它们已经不再是简单的山川，而是某种需要精确计算的看不见的力量。</strong></p><p>黄金长于虚无中：它在中途停靠站的红绿灯下闪烁着。我们也都经历过，离下一个停靠站只剩下两小时的时候，突如其来的迷航。</p><blockquote><p>一下子的过渡 精炼</p></blockquote><p>月亮在一层苍白如雪的雾气中，像一堆木炭似的逐渐熄灭了。头顶上的天空，立即被云层遮盖了起来。我们行走在云层与雾气中，一个全无光影的空洞世界。</p><p><strong>我们似乎是在这一个又一个的行星中迷路了。这一片你永远无法踏及的星空中，我们寻找着属于我们的那颗星星。只有它是饱含着我们所熟悉的风景与温柔的。</strong></p><blockquote><p>飞行员的星星，是停靠站，是希望。所以包含了所熟悉的风景和温柔。</p></blockquote><p>对一个年老的农妇来说，只要一幅简单的神的画像，或者一串念珠，就能让她与神相会。而我，那第一口炽热的、混合着牛奶与咖啡滋味的芬芳，就足以让我沉浸在活着的喜悦中。也正是当牛奶、咖啡与麦子在口中融合的那一刻，我能感觉到同静谧的田野、异国的植被之间的交流，同脚下的大地神奇的相知相通。 <strong>在所有的星光中，只有那么一颗，能给予我们黎明时分那顿早餐独特的温柔。</strong></p><p>此时航线的停靠站，却一个接着一个地醒来。阿加迪尔、卡萨布兰卡、达喀尔站，都纷纷加入到与我们的对话中。所有的无线电通信站都向当地的机场进行了报告，所有机场的负责人都通知了相关的工作人员。他们慢慢地走到我们身边，好像是围绕着一个重病的病人一样。那是一种无用的温情，但它至少是温暖的。那是一种枯萎的建议，但它至少是柔和的。</p><p>即使是一程令人愉快的旅途，飞行员也无法以一个观众的身份欣赏一路的风景。天空与大地的颜色，海面上风吹过留下的痕迹，黄昏时金色的云彩，他都不能潜心观赏。他好像一个开垦土地的农民，时时要分析掌握着春天的来临，霜降的危险，下雨又会给他带来些什么。</p><p><strong>他明白，人一旦真正地面对挑战，恐惧就消失了。令人恐惧的，恰恰是一切的未知。</strong></p><p>从巴黎到圣地亚哥，他们散落在世界的每一个角落，好像被隔开的哨兵。只有旅行中的偶然，才能让这个大家庭中的成员聚集在一起。也许某一个夜晚，大家围坐在一张桌子边，在卡萨布兰卡、达喀尔或者是布宜诺斯艾利斯。 <strong>经历了多年的寂静与无声后，重启不愿终止的对话，以及将我们再次融合在一起的往日的记忆。然后所有的人，将各自再次起航出发。大地是如此的荒芜，可它又同时馥郁丰饶。它小心地隐藏着自己众多的秘密花园，它们是如此难以触及。</strong> 然而，我们的职业终有一天，会引领着我们踏入这花园中。生活将我们分开，让我们少有时间与机会去牵挂自己的同伴们。可是在彼此的寂静中，同伴始终在某一个角落，忠诚于最初的友谊！如果有一天，我们在路上相遇，他们会难掩火焰般的喜悦，摇动着我们的肩膀！所以，我们早已习惯了等待……</p><blockquote><p>陶立夏，英国病人、翁达杰，安妮儿的鬼魂。一种大家都处于黑暗的静默，却相互守候着。</p></blockquote><p>生活就是这样。我们一起成长，一起播种，可是那些树木接二连三消失的岁月，终究还是来到了。同伴们一个一个地离我们而去。从今以后，我们的哀悼中还混合了迈向衰老的隐秘的悔恨。</p><p>也许，一种职业之所以伟大，就在于它拥有将人凝聚起来的力量。这其中最珍贵的，是那人与人之间的情谊。</p><p>夜间的飞行，天空中成千上万的星星，几个小时的平静与骄傲，是金钱买不到的。艰苦飞行后等待着我们的新世界，那些树木、花朵、女人，那些黎明时向我们投来的清新的笑容，还有小小的音乐会，是金钱买不到的。</p><p>围坐在属于我们三个人的村庄边，我们等待着。等待着黎明的拯救，也或者是在等待着摩尔人的到来。 <strong>我不知道，是什么给予了这个夜晚如同圣诞夜般的祥和气息。我们讲述着各自的回忆，嬉笑着，歌唱着。我们品尝着节日般轻快的热情与欢乐，可实际上，我们却什么都没有。陪伴我们的，只有风，沙，与星辰。</strong></p><p><strong>我们终于再次相遇了。肩并肩地坐着，或者各自沉默着，或者互相诉说着。我们发现，我们都属于同一个世界，自己的存在因为他人的意识而变得更为丰富。我们相视微笑，好像被释放的囚犯，面对大海的广阔而赞叹不已。</strong></p><blockquote><p>我们相视一笑，在对方的眼里看见永恒。</p></blockquote><p>他与所有这个世界上伟大的生命一样，愿意用自己的枝叶去覆盖那庞大的水平线。 <strong>人与其他所有生命的区别，在于他的责任感。在于他面对并非缘起于他的苦难时所表现出的羞愧。当同伴取得胜利时，他所体会到的骄傲。当他在脚下摆放下一块石头时，他感觉到这个手势，也许正在为世界开辟一条新的道路。</strong></p><p><strong>我常常觉得，那些对技术发展之所以会心存恐惧的人，是因为他们混淆了目的与手段的区别。单纯的物质上的斗争所取得的进步，并不能解决人生存本身要面对的终极问题。机器也好，飞机也好，都只是一种工具，如同农民耕种时使用的犁。</strong></p><blockquote><p>去了解为什么这个社会存在邪恶和贫穷。又为什么会有那些绝望和冷漠。好多的真相好残忍。</p></blockquote><p><strong>如果人们以为机器的发展正在损坏着人本身，也许那是因为，在面对如此迅速地改变我们生活方式的技术革新面前，我们丧失了客观审视这一切所必须具备的相对性。</strong></p><blockquote><p>技术被发明，而人们被迫去使用他。</p></blockquote><p>这一百年的技术发展，与人类一万年的漫长历史相比较，不过是沧海一粟。我们才刚刚栖身在这片风景中，我们选择要住下来的房子，甚至都还没有完全建造完毕。我们周围的一切都在迅速地改变着，人与人之间的关系，工作的条件，生活的习惯。 <strong>即使是人内心最隐秘的那个角落，也同样在经历着猛烈的冲撞。分别、离散、距离、相聚，所有的这些词汇仍然保留着它们最初的面目，只是它们所包含的意义，却已经不同于往昔了。我们依然固执地使用昔日的词汇与语言，来解释阐述今天的世界。过去似乎总是显得更美好，因为它所讲述的涵盖的一切，都是我们早已熟悉了的语境。</strong> 每一次技术的进步，都将</p><blockquote><p>我们会很容易怀念过去的日子，但那只是因为更熟悉的语境。过去总是感觉是美好的，无外乎过去比未来让我们更熟悉些。</p></blockquote><p><strong>我们如同那些蛮族部落，被崭新的玩具吸引着，痴迷着。一程又一程的空中飞行，除了追求一次比一次高，一次比一次快的纪录，再没有其他的意义。我们似乎是忘记了，究竟为了什么让飞机翱翔在天空中。飞行本身这个行动，暂时地取代了它最初的目的。如同出征打仗的将军，他们唯一的目的，就是占领那片土地。士兵们鄙视被他们征服的人民，可是这场侵略的最终目的，不正是建立与统治一个新的国度？在一切的技术进步中，我们用人力搭建铁路，创造工厂，挖掘石油。我们是否有些忘记了，这所有的建设，最初都是为了服务于人？这场战斗中，我们不知不觉地，采用了与士兵们同样的逻辑。只是，在夺取了土地以后，现在到了建立与管理这个国度的时候了。我们要把这座没有身份的房屋，交还给那些活着的人。真理对于某些人来说，矗立在不断地开垦、建造、占领中。而对于另一些人来说，它隐藏在停留与栖息中。</strong></p><blockquote><p>无论openAI也好，所有的建设，所有的争论，最初都是为了服务于人。曾经我们为了筑造一个温热的国度而诉诸冰冷的战争，我们为了人民的幸福而刺穿了一部分人的躯体。不知不觉，天堂的模样下采用了地狱的逻辑。有人说只有胜者才有和平的权利</p></blockquote><p>不久以前，人们还习惯于同构造复杂的工厂打交道。而今天，我们几乎已经忘记了某一个引擎此时正在运转着。 <strong>它终于完成了它的使命，就是像心脏一样的跳动。而你我，早已对自己的心脏习以为常，不再关注于它的搏动了。</strong> 当注意力不再集中在工具本身时，它便通过工具，让我们同园丁、航海家和诗人所共有的某种气质相聚相汇。</p><blockquote><p>之所以有对科技的恐惧，是因为它正在一点点改变着我们习惯着的生活方式。它在改变我们熟悉的语境。当新科技稳定成为了我们生活的一部分，我们接受它然后忽略它就像心脏的跳动，我们早已对心跳习以为常。而问题真正的关键在于，我们是否有权利拒绝接受新科技，它的普及又是来自谁的命令，谁的推动。一个人不应该因为选择不用手机而被拒绝其公民的权利。工具是可有可无的吗？如果拥有这个工具成为了进入这个领域的门槛呢？一个人因为工具的优越性获得的名誉和称赞，是公平的吗？比如社交网络上最热门的观点是掌握社交传播手段最熟的观点</p></blockquote><p>此时的我，一无所有。我只是一个迷失在风沙与星辰中的凡人，呼吸着天地间的温柔……</p><blockquote><p>真正温柔的作品，不要通篇写给我十次温柔，去写那些冲动和克制，那些力量和颤抖。</p></blockquote><p>真面目。 <strong>几千年来，我们一直被道路欺骗着。</strong> 人也好像一个君主，他希望一路探访他的臣民们，看看他们是否真的认同他的统治。可是围绕在君主身边的奉承者们，则欺骗着君王。 <strong>他们在他的旅途中摆上天下大吉的布景，请来歌功颂德的舞者。可怜的君主因此对自己的王国一无所知，他全然料不到那些在广阔的田野中挨饿的老百姓，此时正诅咒着他的命运。</strong></p><p>如同宽容的谎言，我们脚下的道路弯曲缠绕着。一路走来，我们以为遍地是馥郁的土地、果园、草地。长久以来，我们美化着自己的监狱，以为这个星球湿润而温存。</p><p>我在夜晚的温柔中着陆了。蓬塔阿雷纳斯！背靠着一座喷泉，我看着街上年轻的女孩们。 <strong>离她们优美的身姿如此地近，我越发感觉到人类的神秘。</strong> <strong>这个世界上，生命与生命的融合是如此地容易，花朵即使在风中也能同其他的花朵相聚，连天鹅们都彼此相识，只有人，时时刻刻搭建着属于人类的孤独。</strong></p><blockquote><p>她们那么美，那么孤独。</p></blockquote><p>友谊、爱恨、欢愉，这一切人类的游戏都是在一片如何脆弱而单薄的布景下上演！在一片熔岩流依然温热的土地上，明天也许即将受到冰雪与风沙的侵袭，究竟是什么让人类相信，长久与永恒是有可能存在的？人类的文明如同一层脆弱的镀金层，一座火山，一片大海，或者是一场风沙，都能将它从此抹去。</p><blockquote><p>我唯一担心的问题，是阶级的垄断和固化。贫富差距不再是可靠的指标了，垄断阶级大可以提高社会福利，正如现在许多资本主义国家的趋势，没有教育基础的高福利是一种诅咒。问题真正可怕的地方在于，教育不平等的受害者选择了安守于自己的困境，可以预想到的是那个社会是一个鸡汤普遍，信息分层的社会，垄断阶级会极力提供所有一切的快乐和安逸，唯独切断了他们改变自己命运的途径。机器人未来会成为服务大众，维持社会安稳的工具，而一部分大众的去向，是去服务垄断阶级，或成为垄断阶级商业生意的其中一环。</p><p>每个人都仿佛在讨论着一些不合时宜的问题。</p></blockquote><p>我想，这片白色的纯净，在几千几万年中，只属于那些高高在上的群星。</p><p>面对着苹果树铺展开的台布，落入它怀中的只有树上的苹果。面对着星空的沙滩，它所能揽入怀中的，一定是来自天空中星辰的沙粒。还从来没有哪一块陨石，用如此直白的方式向人讲述着它的来历。</p><p>我确定自己是被某种力量运载着， <strong>如果此时地下发出器材调整的声音，我一点都不会感到吃惊。老帆船倾斜时发出的响声，长远而苦涩。</strong> 而脚下厚重的土地里，依然是一片寂静。压在我肩头的力量，也正在平和地渐渐消失。</p><p>一样。只是，我的老管家，如今的我，不再是从公园深处跑回家了。 <strong>我是从世界的另一端，带着辛辣的孤独的滋味，沙漠中旋转的狂风，和热带耀眼的月光，回到了你的身边。</strong></p><p>老管家对于她的世界的信仰，如同一个修女对教廷的信仰一样坚固难以动摇。我感叹着她谦卑的命运，将她引领着走入这条既没有视野又没有声音的路途……</p><p>然而这个撒哈拉之夜，躺在风沙与星辰间，却让我明白，我对老管家有失公正。我不知道在自己身上到底发生了什么。当我被那奇怪的力量与大地连接在一起的时刻，另一种力量把我带回最真实的自我。我感觉到自己的重量，将我拉向曾经影响着我的人生的种种。我的梦比沙丘和月亮还要清晰。 <strong>是的，一幢房子的美妙不在于它能给予你温暖，给你一个躲避的屋檐；也不在于它拥有的保护你的墙壁；而在于它在不知不觉中，在点滴岁月中，慢慢地累积、存储在你心中的温柔。因为它的存在，令你心底深处那片黑暗沉重底下，有一天会一点一点地流淌出如同泉水般的，梦……</strong></p><blockquote><p>或许文字的美妙，不在于让你发泄，让你躲藏。而在于记录这个动作本身，一点点积累着你的感动和失落，见证着你的温柔和成长。</p></blockquote><p>有时候，距离并不能确切地衡量出事物的远近。花园里的一堵墙锁住的秘密，往往比遥远的中国威严耸立的城墙还要多。一个小女孩藏在寂静与沉默中的灵魂，也许比撒哈拉的绿洲和厚厚的沙漠对它的保护还要严密。</p><p>这两个法官能分辨出哪些动物是天真，哪些是假装单纯。她们能从狐狸的脚步里揣测出它今天的心情。她们对它内心的步伐了如指掌。</p><p>这个时候，一个傻瓜会走进她们的生命。有生以来第一次，那双聪慧敏锐的眼睛迷失了方向。傻瓜只要向她们吟诵一句诗歌，她们便将他当做诗人。她们以为，他能欣赏布满了洞的地板的魅力，她们以为他也会喜欢那些獾。于是她们像相信那些游走在脚下的蛇一样的，信任这个傻瓜。于是她们把自己如同绽放在野地中的花丛一般纯洁美丽的心灵，交付予他。只是他爱的，却是那精雕细琢的人造公园。从此以后，傻瓜牵着昔日公主的手，把她变成了自己的奴隶。</p><p>他记得深夜里每一次枕着沙粒，躺在帐篷中的情景；他记得夜晚围绕着篝火，讲述着关于敌人的一切时，那颗跳动的火热的心。</p><p>月光下的沙漠是玫瑰色的。</p><p>然而他一定会失望至极地发现，所有他拥有的财富都在这里：沙漠的骄傲，黑夜，寂静，这个风和星辰的祖国。如果有一天博纳富回来，这个消息一定会在第一个夜晚，就悄悄地传到每一个角落。在撒哈拉某处，被两百个摩尔人士兵包围着，他们知道他栖身于何地。于是他们将再次把骆驼牵到井边，储藏起大麦，准备着枪支。被一种恨，或者是一种爱，驱使着，向他走去。</p><p>而是人死时，随之消失的一个未知世界。我自问，和他一起离开的是何种画面？哪一种塞内加尔的植被，哪一座摩洛哥白色的小城，将一点一点陷入遗忘中？我不知道，在这一堆黑色躯体里，熄灭的是哪些悲惨的牵挂：泡茶，给牲口喝水……一个奴隶的灵魂，还是有某些记忆将在此时得到重生，令人在高贵中走向消亡。坚硬的头骨好像藏宝箱，我不知道那里面，哪些丝绸的色彩，哪些狂欢的场景，哪些对这片沙漠毫无用处的回忆，能躲过这场沉船的灾难。</p><p>可是当他走到街边拐角处，面对一群正在玩耍的小孩，他停了下来。他一声不吭地看着他们，然后走回犹太人的布匹店，买回一大堆东西。阿布达拉责备他：“你个白痴，把钱浪费在这些东西上做什么！”巴克不理睬他。他庄严地向小孩们做着手势，于是孩子们就将自己的小手伸向了那些玩具、手链、金色的尖头布鞋。当他们拿到了珍宝以后，立即像小动物一样，逃得远远的。阿加迪尔其他的孩子们马上就听到了消息，向他跑来：巴克给他们穿上金布鞋。接着是阿加迪尔附近的村落，小孩们叫喊着向着这个黑色的神奔跑过来。于是，巴克用完了自己身上的每一分钱。阿布达拉以为他是被幸福冲昏了头脑。而我却不这么认为，巴克是在用这种方式分享属于他的喜悦。</p><p><strong>拥有自由的巴克，也同时获得了被爱的权利。他可以向南走，向北走，到任何一个地方通过自己的劳动赚得属于他的面包。这些钱对他来说，又有什么用处呢？他此刻深深渴求的，是尝试着在自己与这个世界上其他人之间，串起一根绳索。阿加迪尔跳舞的女人们对他无比的温柔，但是她们不需要他。布匹店的伙计，街上过路的行人，所有的人都尊敬他作为一个自由人，与他平等地分享着阳光，但是没有一个人真正需要他</strong> 。 <strong>他无限的自由，让他无法感觉到自己在这块土地上的分量。他缺少的，是人与人之间的关联和负担，牵绊着我们脚步的泪水、分离、责备与幸福。</strong></p><p>好像一个天使，因为身体太轻巧而无法停留在人间，总是不经意地就要飞上天空。于是他就自欺欺人地在自己的腰带上挂上沉重的铅块，错误地以为自己从此有了扎根人世的分量。巴克艰难地向前行走着，被孩子们拉扯着，他们唯一渴望的就是他手中金色的布鞋。</p><p>那阴暗的公园对我们来说，驻足着各种神灵。这个没有界限的王国对小孩们来说，是永远无法触摸到它的每一个角落，将它完全掌握的。我们在那里建立了一种封闭起来的文明，每一个脚步都有它自己的滋味，每一个细节都有属于它自己的含义。然而终有那么一天，小孩会长成大人，当我们用与童年不同的标准，再次审视着昔日魔幻般冰冷又炙热的公园时，呈现在我们面前的又将是什么？我们有点绝望地停驻在栅栏外，隔着灰色石头砌成的围墙向里面望着，惊讶于它的狭小封闭。 <strong>于是我们猛然间领悟到，那个曾经让人觉得永远无法捉摸透的公园，它的无尽与神秘并不在于公园本身，而来自小孩们赋予这个游戏的色彩与含义。</strong></p><p>刚才那让我一下子就辨别出的“扑通”声，也许也和命运一起，将在空中等着我。</p><p><strong>但大部分的时间，我把自己关在黑暗里，被行星们微弱的光亮包围着。它们闪烁着神秘的光芒，讲着同一种语言。我像那些天文学家一样，阅读着一本关于天空机械的书籍。我觉得自己纯净而充满书卷气。</strong></p><p>引擎温柔的轰鸣中，面对着静谧的星辰，我品尝着属于自己的孤独。</p><p>我们正穿越着童话中的大峡谷，任何错误都既没有原谅也没有出路。我们把自己交给了谨慎的神灵。</p><p>火苗慢慢地升起。带着一种近乎宗教的情绪，我们看着飞机的信号灯在沙漠中燃烧着。它向黑夜传递着无声却又耀眼的消息。那是一种近乎病态的呼唤，可它又同时充满了爱意。我们在乞求水源，我们又同时在寻找与人的交流。 <strong>我多么希望此时沙漠中有其他的火焰燃起，因为只有人才拥有火，那是一种他们回答我们的方式！</strong></p><p>火渐渐地熄灭了。我们把身体倾向烟灰，试图温暖着自己。明亮的消息已经燃烧完毕，它是否正行走在属于它的轨道上，然后抵达它的目的地？其实我知道，这一切都是徒劳的。 <strong>如同一场没有人会听见的祈祷。</strong></p><p>我站在那里冥想着。想到它也许要比我晚死三十年，这丝毫不让我觉得难过。三十年，还是三天，一切都只是一个角度的问题……我所需要的，只是忘记生命中的某些画面……我继续向前走，因为极度的疲劳，身体正在发生着某些变化。即使我眼前并没有幻影，我也不停地自己创造着……</p><p><strong>我们再一次发现，其实遇难的不是我们。遇难的，是此刻正在等待我们的人们！</strong> 他们已经被某种可怕的错误撕扯得遍体鳞伤。我们不能不向着他们奔去。正如纪尧姆从安第斯山脉返回以后对我说的一样， <strong>他当时是向着他们走过来的！</strong> 这应该是一个普世的真理。 <strong>“如果我是只身一人活在这世界上，我就躺下不再继续前进了。”普雷沃对我说。</strong></p><blockquote><p>是羁绊，是责任，而不是绝对的自由，带来绝境时的幸福。</p></blockquote><p>飞机并不是一个终点，而只是一种手段。我们不是为了飞机本身一次又一次地冒着生命的危险。好像农民们不是为了手中的犁才耕作一样。飞机让我们离开了城市，飞到一片未知的陌生土地，探寻着关于世界的真相。</p><p><strong>我不怪那些喜欢沉迷于咖啡馆里简陋音乐会的人，他们不知道这世界上还有其他的歌唱与美妙的戏剧。我责怪那些用廉价娱乐来赚钱的人。我不喜欢人用这样或者那样的方式引导，腐蚀着无辜同时又无知的大众。</strong></p><p>了。可是那橙子被吞入口中的感觉，又渐渐在我记忆中变得模糊，好像我一点一点地在忘却属于自己的温存。</p><p>人究竟该怎么做，才能让自己得到这种最终的释放与平静？所有的人都知道，人是多么矛盾重重的动物。当你给了没有食物的人足够的吃的，让他们去创造属于自己的生活时，他们常常因为吃得太饱而昏睡过去。勇敢善战的人，有时候会在一夜之间变得软弱无能。当慷慨大方的人成为富翁后，吝啬立即成了他们新的特征。所有的政治理念流派，凭什么认为他们能将人从苦难中解放出来，给予他们新的希望？每一个个体所希望的期盼的都是不同的，又有哪一种政治敢说自己代表了全人类的向往？人不是被圈在一起的牲口，吃喝拉撒、生老病死都大同小异。一个穷困潦倒的帕斯卡的诞生，要比好几个不知名的有钱人的出现，有价值得多。</p><p><strong>我们当中的每一个人，都在最一无所有的时刻，经历了人生最温暖巨大的喜悦。</strong></p><p><strong>真相，常常不是那些显露在表面的一切。如果在这片土地上，而不是另一片土地，橙子树向下生长着结实的根茎，然后挂满了茂盛的果实，那么这片土地就是属于橙子树的真相。如果某种宗教、某种文化、某种价值、某种活动，能帮助人在其中找到属于他的平静与满足，让他在这一切的包围下逐渐变成一个高贵的灵魂，那么这种宗教，这种文化，这种价值与活动，就是属于人的真相。这其中的逻辑是什么？是在这个过程中，让人体会到生命的可贵与美好。</strong></p><blockquote><p>又或者说 我们又会怎么否定这不是真相</p></blockquote><p>人的志向也许起着至关重要的作用。有的人将自己关在小店铺里，有的人却向着某个方向，大步地行走着。我们以为在他们童年时的奔跑里，能看见他们人生最终方向的影子。其实儿时的疾跑冲刺，这世上大部分人都拥有过，它们不过是某种表象的错觉。在劫难中或者一场火灾中表现得格外高大的小店铺的主人，你我应该都觉得似曾相识。 <strong>他们在火灾或者灾难中表现出的英勇，让那个夜晚成为他们人生最高大的时刻。然而从此再没有其他的机会，没有造就英雄的土地出现过，于是他们在自己的高大中渐渐沉睡着。是的，高远的志向也许能将人从牢笼中解救出来。只是，大部分的时候，如何将那些志向本身，从埋没它们的沙堆中挖掘出，让它们重见天日？</strong></p><blockquote><p>加缪，为什么要反抗。人们只会得到他们乞求的东西。这也正是他们的无辜和力量所在。</p></blockquote><p>这些士兵也许永远也不会再回到这个地方。然而出于谨慎，他们都一言不发。士兵们好像是谷仓里储存着的种子，战争一打响，就有一只手将他们一把抓起，洒入田野间。</p><p>队长将带上他的左轮手枪，喝醉的男人也将醉意全无。然后他们会沿着这条走廊的斜坡走到月光下，简单地说几句：“又他妈的要进攻了”，或者是“天气真冷”。然后将自己投入这深沉的夜。</p><p>可怕的并不是死亡本身，而是浸润在鲜血的陷阱中的双手，将如何在沉重的呼吸中，一步步抬起； <strong>可怕的并不是死亡，而是这个过程中的种种不适与痛苦。</strong></p><p><strong>曾经让你在意的一切，正慢慢地在你眼里显得琐碎无比。你的快乐，烦恼，那些生活中的舒适，好像都变成了另一个世纪的画面。有一天你收到一个同伴死去的消息，他在马拉加附近的海岸被打死。你并没有要为同伴报仇的欲望，至于政治，它也从来没有让你特别地感兴趣过。然而这个消息，还是像一阵海风一样，吹入了你的生命。有一天早上，你的一个同伴对你说：“我们去不去？”“去。”于是，你们就这样上路了。</strong></p><p><strong>你无法用言语解释自己为什么会做出这样的决定，而我眼前却有一幅幅清晰的画面，它们解释着关于你这么做的真相。</strong></p><p>野鸭在迁徙时，总能在它们占领的土地上，引起其他动物好奇的围观。那些被人圈养的鸭子，被它们三角形的飞行路线吸引，也忍不住笨拙地想尝试着高高地跳跃起来。原始的呼唤在它们身上，不知道唤醒了哪些残留的本能。于是那一分钟里，家鸭们变成了迁移的鸟群。在它们小小的坚硬的脑袋中，那些谦卑的关于池塘、鸡窝和眼前食物的画面，变成了宽广的大陆，无边的海洋和疾风的滋味。它忽视了自己的脑袋有没有足够的地方，能储存下如此多的奇迹。它依然拍动着翅膀，鄙视眼前的吃食，想要成为飞翔在空中的野鸭。</p><blockquote><p>这也是荒谬 确实人类无辜和力量的所在。</p></blockquote><p>它们在幼年时被擒获，在人的养育下，不但能活下来，还会乖巧地在你手中吃草。它们任由人抚摸，将潮湿的鼻子伸在你的掌心中。你以为，它们从此变得和那些被养在家里的动物一样。你以为，你让它们躲过了一切未知的忧伤，即使是死亡也会显得温柔无比……可是当它们有一天背朝着围栏，面向着沙漠，顶着它们小小的鹿角，似乎被磁化了的那一刻，它们不知道它们正在逃开你为它们圈起来的世界。你给它们奶水，它们依旧乖乖地喝着。你抚摸它们的时候，它们把自己的鼻子陷得更深。但是当你准备将它们放回大自然时，在几下轻快的跳跃后，它们又重新走回围栏边。如果你不阻拦它们，它们甚至连挣扎都不挣扎，将自己靠在栅栏上，低着脖子，就这样一直到死。什么是爱情？什么是令人喘不上气的飞奔？它们都不曾经历过。当它们被擒获的时候，它的眼睛都还没有睁开。沙漠中的自由它们一无所知，正如那雄性的气味，对它们来说陌生无比。</p><blockquote><p>这个世界最后的温柔。</p></blockquote><p>中士，对于那个将你的额头轻轻抬起，为你准备着死亡的人，你有什么可抱怨的？你们互相都为对方冒着相同的危险，不是吗？这一分钟将你们连接在一起的这个世界，令你们不再需要任何的语言。我明白为什么你放弃原有的生活，来到战场。在巴塞罗那，也许你很穷，也许你只身一人，也许你连一个栖身处都没有。而在这里，你觉得自己的生命有了归宿，你的灵魂有了依托。是的，你是被爱接纳着、包围着的。</p><p>那些政客真诚与否的口号，是否如同一颗种子一般，在你的心中生根发芽，我对此并不感兴趣。 <strong>如果它们真的在你的心田里长出了幼苗，那是因为这些种子回应着你的需求和等待。</strong> 你是种子们唯一的法官。 <strong>因为种子的优良，只有土地才能辨别。</strong></p><blockquote><p>你伤害我 是因为我允许你这么做。</p></blockquote><p>与伙伴兄弟因为共同的目标而将彼此的命运连接在一起，这个过程中所有的经验都告诉我们，爱不是站在这片风景前，各自望着某一个地方，而是所有的人朝着同一个方向一同望去。只有彼此捆绑在一起，朝着顶峰一同攀登而去，当我们抵达目标的那一刻，我们才成了真正的灵魂上的伙伴。 <strong>否则为何在这个物质越来越舒适的时代，当我们在沙漠中分享着彼此最后的食物时，内心体会到的是一种圆满的喜悦？对于我们中间所有经历过在撒哈拉沙漠里，与同伴一起被拯救的那种喜悦与感动的人来说，人生其他各种快乐在它边上，好像都变得如此的琐碎。这也许就是为什么，我们周围今天的世界正在慢慢崩裂。每个人都围绕着承诺给予他这种圆满的宗教，兴奋着，膜拜着。然而所有的这些宗教，又以相互矛盾的言辞，在表达着同样的愿望与希冀。人们在用某种手段达到这种“圆满”前四分五裂，却又分享着同一个目标。</strong></p><p>人类的真相，是那些让人与动物得以区分的力量，让人真正称得上“人”的信仰。队长在他与敌人的关系中，表现出的尊严、诚实，对对方生命的尊重，将他提升到一个令人敬佩的高度。而那些平庸而充满蛊惑性，一边拍着阿拉伯人的肩膀赞美他们，一边打从心底侮辱他们、看不起他们的人，对于他们，你一定充满了同情与鄙视。</p><p>为了理解他的需求， <strong>为了看清楚他的本质，我们不应该把各种真相对立起来。是的，你们是有道理的，你们所有的人都是有道理的。逻辑证明了这一点。即使是那些将人类所有不幸归罪于驼背的人，也自有他的道理。如果我们现在发起一场对驼背们的战争，所有的人一定立即兴奋不已，报复驼背们曾经犯下的罪孽。是的，也许驼背们也曾经犯过罪。为了看清楚人的本质，必须暂时忘记你我之间的分歧。我们可以把人分成左派和右派，驼背的和不驼背的，法西斯的和民主的，所有这些区分都不容置疑。但是你们知道，真相是那些将世界变得简单明了的东西，而不是制造纷扰混乱的发明创造。</strong></p><p>为什么喋喋不休地讨论各种意识形态呢？所有的这些讨论都只有引起人们对人崇高的怀疑和绝望。所有我们周围的人们，其实他们的需要都是一样的。我们希望得到拯救。那挥动铲子的人想知道自己究竟为了什么在挥动铲子。服刑的人挥动的铲子，让服刑的人自己觉得屈辱，它不同于勘探者挥动的铲子，让勘探者变得高大。牢狱不在那铲子挥下去的地方，牢狱在于他一万次地将铲子挥下去，却依然孤独地被关闭在自己的世界中，永远无法与外面的一切相聚相知。而我们，都渴望着从这样的牢狱中逃脱出来。</p><p>其他一些人，干着各行各业中打杂的衔接活。那些职业的本身，禁止了你拥有属于先驱者或者博学人士们拥有的快乐。人们以为，为了让他们成长，只需要给他们衣服穿，给他们吃的，满足所有他们的需要。渐渐地，他们变成了库特利那 8笔下的小布尔乔维亚，小城里的政客，或者是工厂里的技术人员，被琐碎的生活关闭了起来。他们虽然受了教育能读书写字，却毫无学养文化。他们平庸地以为，学问无非是自己记忆中的各种公式。专业课程里的蹩脚学生们，对自然科学了解得比笛卡儿还深刻，对法律比帕斯卡还掌握得全面。但是，他们是否拥有笛卡儿与帕斯卡的思考能力？</p><p>所有的人，有意识无意识地，都希望自己能存在着。令他们迷失的，是以哪种方式存在，以哪种方式让生命继续。是的，我们可以用军队的制服点燃他们的灵魂，让他们唱着军歌，分享着面包。他们就此能找到自己所寻找的，那种生存在宇宙间的滋味。可是面包一分享完，等待着他们的，却是死亡。</p><blockquote><p>当烟花冷却。</p></blockquote><h1 id="夜间飞行-Vol-De-Nuit"><a href="#夜间飞行-Vol-De-Nuit" class="headerlink" title="夜间飞行 Vol De Nuit"></a>夜间飞行 Vol De Nuit</h1><p>我们也可以让古老的传说复活，古罗马帝国的传说，或者泛日耳曼主义的传说。让德国人沉浸在作为贝多芬同胞的骄傲中。可是这样的偶像与崇拜，却是一种食人的陷阱。那些为了科学的进步，拯救他人的生命而牺牲自己的人，当他们的生命消逝的那一刻，他们也同时在为其他生命的到来做着准备。为扩张自己的国土而牺牲生命，或许是一种英勇壮丽的死亡方式。但是今天的这场战争，却与它开始时宣扬的一切主张背道而驰。这场战争到了现在这个阶段，已经远远不是靠流一点血，来激活自己的民族了。一场战争，当它开始动用飞机、芥子气，它就已经不再是一场血腥的外科手术了。每个人驻扎在自己的高墙后面，在毫无出路的情况下，各自用各自的海军纵队向对方投着鱼雷，炸毁对方的作战中心，切断对方的食物供给。谁最后一个腐烂，谁就赢得了胜利。最终，那两方敌人难免同时走向毁灭。</p><p>战争欺骗了我们，仇恨在我们向着同一目标的道路上，并不能为我们增添任何的灵感。</p><p>难道牧羊人就不期盼着，某一天他沉睡的思想与意识被唤醒？在马德里的前线，我曾经参观过一所建在山坡上，离战壕只有五百米的学校。 <strong>一位下士正在给其他的士兵们上植物学的课程。当他用手一片一片撕下虞美人的花瓣，向这些被战地的泥土与灰尘掩盖着头脸的战士们展示着花朵的构造结构，他引领着他们走向一场朝圣。他们安静地坐在四周皆是炮弹尘土的座位上，手撑着下巴，仔细地倾听着。他们眉头紧皱，咬着牙齿。虽然下士讲的那些东西大部分他们都听不懂，却固执地坚持坐在那里。因为人们曾经这么对他们说：“你们好像那些刚从山洞里走出来的野蛮人，你们得赶快追赶上这个世界上的文明人！”于是他们迈着自己笨重的脚步，向前走着。只有当我们意识到自己所扮演的角色的那一刻，哪怕是最普通渺小的，我们才会感到幸福。只有那一刻的清醒，才能令我们活在平静中，死时归于安宁。因为活着的时候人生有意义，死去时生命才不显得虚无。</strong></p><p>我曾经亲眼见证了一场三个农民在床前与他们的母亲告别的场景。那场面无疑是令人痛彻心肺的。那是他们人生中第二次脐带被割断，两代人维系在一起的那个结就此断裂了。从此以后，这三个儿子将独自面对人生的一切，从此以后，全家团聚的那一刻将再没有了母亲的踪影。然而在这生命断裂的那一刻，我却看到了一种延续与重生。三个儿子将成为家庭的领头人，一直到他们离开的时候，再将手中指引全家的力量，交给此时正在院子里玩耍的小孩们。我看着这个年老的农妇的脸，她平静而已经僵硬的面孔慢慢地变成了一张石头的面具。在这张面具上，我看到了三个儿子的影子。老妇人用她的身体、灵魂，打造了这三具男人的躯体。现在她破碎地躺在床上歇息着，轮到她的孩子们来继续播撒这家族的血脉。母亲死了，母亲万岁。母亲走了，将她白发苍苍的脸庞刻在了儿子们的身上。一代一代的传承与消亡充满了痛楚，却也在这种蜕变中，一步一步迈向某种不可知的真相。这就是为什么，那天晚上小镇上为死者鸣起的钟声，在我听来并不充满绝望，而是带着一种隐秘的轻快与温存。它奏响的并不只是死亡的哀悼，它也为重生的喜悦轻唱着。它宣告着由一代人到另一代人的转换与过渡。当我们听到，这老妇人与大地结合在一起的歌声时，内心体味到的，是无限的平静。</p><p>她的坏脾气，她发黄的手套和起茧的手，她所有的慈祥和固执。</p><p>母亲传递的并不只是生命，她还教授着一种语言，把自己掌握的几个世纪以来的思想的遗产，交到了儿子们的手中。正是这些来自每个家族特有的概念、神话，才造就了牛顿与莎士比亚，让他们不同于一个普通的粗糙的生命而存在着。 <strong>我们内心深处感觉到一种饥饿，是这种饥饿，将西班牙的士兵推向植物课的讲台，将梅尔莫兹带到了大西洋南部。因为这种饥饿的存在，人类“创世纪”的篇章才将继续书写着，它让我们了解自己也认识宇宙。</strong></p><p>我对自己说，这些人其实并不对自己的命运感到苦恼。而令我痛苦的，不是这个世界缺少仁慈。这不是一个永远打开的伤口，你只需要小心轻柔地对待它，就能解决一切的问题。那些身上满是伤口的人们，他们甚至都没有感觉到它的存在。受伤的，其实是人类本身。令我痛苦的，是关于园丁的故事。 <strong>令我痛苦的，不是苦难，因为人自己把自己安置在苦难里，就像陷入一种慵懒与习惯中不愿自拔。</strong> 东方的一代又一代人生活在污垢里，他们却乐得其中。 <strong>令我痛苦的，是国家救济的粮食无法解决的。令我痛苦的，既不是驼背们，也不是眼前的丑恶。令我痛苦的，是每一个人身上，被谋杀了的莫扎特。</strong></p><p>全文。我非常感谢作者，向我们大家揭示了一个看似矛盾，却又是人类心灵路程中至关重要的一个真理：人生的幸福不在无拘无束的自由中，而是在承担与接受使命的责任中。小说中所有的人物，都将自己的一切献给充满危险的夜间飞行任务。一架又一架的飞机在夜空中平安地起飞与降落，才是他们渴求的幸福的归宿。</p><p>里维埃所讲述的，也许正是所有英雄主义的源头。“我们总是将这样那样的价值置于人宝贵的生命之上。这些价值究竟是什么？”“也许，除了个人的幸福，他们可以拯救和创造某种更持久、永恒的东西。里维埃和他的团队，也许，就是为此在日夜工作着、奋斗着。”</p><p>时刻冒着生命危险的飞行员，是有权力对普通人脑海中所谓的“勇气”轻轻微笑的。</p><p>我也终于明白了，曾经令我非常困惑的一个问题： </p><p>人的富有来自他的苦难与艰难，也来自他对简单生活的接纳，比如此时此刻，从这扇窗户静静地眺望着外面的风景。</p><p>天空中宁静的云朵少有褶皱，如同那港口平稳安详的水花。</p><p>所有那些让普通人的生活显得温存的细节，他们的家，手里的咖啡，散步道上的大树，在他眼前无限地扩大。他像是一个征服者，弯下腰来观察着那个即将被他征服的王国，却在无意中发现这王国中的人们谦逊简单的幸福。他需要放下武器，感觉自己身体的沉重与疼痛。人的富有来自他的苦难与艰难，也来自他对简单生活的接纳，比如此时此刻，从这扇窗户静静地眺望着外面的风景。这个小村庄接纳了他。而他，则因为它偶尔的存在而感到满足与喜爱。</p><p>光亮。面对黑夜，每一幢房子都点亮自己的星星，好像是对海洋般深邃的夜晚的一种回答。有人的地方，就有跳动的灯光。法比安喜欢这种进入黑夜的方式，好像慢慢驶入一个港湾，缓慢而美丽。</p><p>他们以为他们的台灯点亮的只是自己那张简陋的桌子，却不知远在八十公里外的高空，一个飞行员正被这闪闪灯光的呼唤深深地打动着。</p><p>里维埃担心，人群中那些崇拜者热情洋溢的感叹之词，会掩盖这场旅途本身的神圣性。</p><p>成形。他并不想企图用自己的严厉和不近人情去征服他的团队们，而是希望他们超越自己。尽管他惩罚所有误点起飞的飞机，尽管他的各种措施里充满了不公正，同时也因为这些惩罚，他令飞行员们在每一次起飞时，都拥有和停靠时一样的意志。这种意志是由他里维埃创造的。他不给他的团队们休息的快乐，而是始终用一根无形的绳索牵引着他们的毅力。</p><p>每天工作完毕，他都是一成不变地回到自己的房间。他关上门，从箱子里拿出一沓纸，慢慢写下“小结”的抬头，漫不经心地涂上几笔后，又把纸撕了。他希望自己能将航空公司从某种巨大的危机中解救出来。问题是，公司到目前为止，还没碰到任何严重的问题。</p><p>他望着人行道上的人们，寻找着和他一样，因为某种爱或者创造漫步前行的人。他想起点灯人的孤单与寂寞。</p><p>他的。用不了多久，当他像一个年轻的希腊神一样地带动着地上的尘土，爬起身，城市中的灯光都将因为他而显得黯淡。她</p><p>她躺在床上，忧伤地看着那些花朵、书和空气里的温柔。所有的一切，对他而言，都如同大海般深沉了。</p><p>“我把他从恐惧中拉了出来。我要攻克的并不是他本身，而是人在面对未知情况时，那种不由自主的抵制情绪。而正是这种抵制，让行动停止前进。如果我倾听他，同情他，他就真的以为自己是在某个神秘的国度经过了一场历险。而他所恐惧的，正是这种神秘与不可知。人只有在走下了那口阴暗的井，发现里面什么都没有，再重新爬上地面的时候，才能摆脱神秘带给他的恐惧。而这位飞行员，只有在走入最深厚隐秘的夜色以后，才能看清楚那未知中隐藏的一切。”</p><p>这个女人所讲述的一切，是属于她那个世界里的真相。夜晚餐桌上点亮的台灯，一个生命对她另一半的呼唤，那个国度里的温柔、希望与记忆。她要拿回属于她的这一切，她也完全有理由这么做。里维埃有属于他的真相，但是他没有办法也没有权力否认她所寻求的。他的真相，在家的台灯下，显得那么难以启齿，那么没有人情味。</p><p>“这些也许哪一天会失去生命的人，他们本可以幸福地生活着。”他仿佛看见那些在夜晚的灯火中，朝着金庙望去的人热切的脸庞。“我有什么理由把他们从那里面拉出来？”他有什么权力剥夺他们属于个人的幸福？难道他不应该保护他们享受幸福的权利？而他，却是那个粉碎这一切的人。可他又清楚地知道，个人渺小的幸福，总有一天会如同那金庙前的幻景一样，蒸发消失。衰老和死亡会以一种更残忍的方式摧毁它。也许，除了个人的幸福，他们可以拯救和创造某种更持久、永恒的东西。里维埃和他的团队们，也许就是为此在日夜工作着、奋斗着。</p><p>“爱，如果我们只是去爱，那会是一条没有出路的死巷子。”里维埃的内心，隐约地感觉到某种比单纯的爱更崇高的责任。那好像也是一种柔情，只是它更特殊，独一无二。他的脑海里浮现出一个句子：“我们追寻的，是一种永恒……”他是在哪里读到这个句子的？他想起自己曾经见过的那座秘鲁印加帝国时期的太阳神古庙宇，那些堆砌在山顶的巨石。如果没有了这些如同某种悔恨的隐语一般，压在今天人们灵魂上的这些石头，那么这曾经如此伟大的印加文明还剩下些什么？“昔日那些古民族的领袖，是出于一种残忍，还是出于某种深厚的爱，强迫他的人民，在这高山上堆砌这些石头，建造着某种不朽？”里维埃又想起小城里的夜晚，那些围着报亭的音乐起舞的布尔乔维亚。“他们的那种幸福……”也许，令昔日的领袖们深深同情的，不是他的人民遭受的苦难，而是他们终有一天的消亡散落。不是个人的死亡，而是这个民族终有一天将在这片沙海中不见了踪影。于是，他引领着他的人民在高山上堆起千百吨的巨石。因为至少这些石头，永远也不会被沙漠湮灭。</p><p>她在此地的出现，向所有人揭示着，幸福在另一个世界是多么神圣的东西。而他们所有的这些人，是如何完全没有意识地，在进行着自己的行动的同时，一手摧毁了这个女人的平静与幸福。</p><p>她发现，那属于她的真相，在里维埃他们的世界里，变得难以启齿。所有那些炙热的、近乎原始的爱与奉献，在这里都显得那么自私。她想立即逃离这个地方。“我一定非常打扰您……”“您不打扰我，”里维埃说，“不幸的是，女士，在这种情况下，您和我，除了等待，没有其他能做的。”</p><p>里维埃怀着这所有一切创始者的信念，看着他的秘书、机械师和飞行员们。所有这些人都帮助着他，在打造属于他们的作品。他想起古时候那些小村庄的村民，因为听说在某些遥远的地方有很多美丽的小岛，而一起建造出海的船只。那条船载满的是村民们的希望，是它让人们终有那么一天，可以撑开船帆，行驶在大海上。“这行动中会有人因此死去，他们最终也许什么都证明不了。而这些人，只因为那条船，坚持自己所相信的。”里维埃与死亡搏斗着。当生命重新点燃他的作品时，就如同风吹动着航行在海上的帆船一般。</p><p>重新开始战斗的里维埃，不愿意错过飞机隆隆的声音。他要听着它的出生、成长和壮大，如同一支行走在星辰中的军队的脚步。</p><p>他只要叫停一架飞机的起飞，夜间飞行所有的意义将从此丧失。他选择走在那些弱者前面，尽管也许明天早上，所有的人都将反对他的决定。</p><p>胜利，失败，这些字眼是没有意义的。生活超越了所有这些词汇，也早已绘制出后面的画面。一场胜利会让一个民族变得孱弱，一次失败则会唤醒另一个国家。里维埃经历的失败，也许是他赢得最终胜利所必须签署的契约。只有不停地前进，才是唯一的真理。</p><p>里维埃慢慢地走回自己的办公室，眼神依然严厉地看着这些工作着的秘书。伟大的里维埃，成功的里维埃。他的肩上背负着的，是胜利的沉重。</p><p>20世纪初，因为技术上的大量限制，令飞机的夜间飞行还只是局限在军用飞机的领域。那个年代，驾驶一架飞机和今天相比，复杂性与困难程度都是不可同日而语的。今天民航的电脑自动驾驶在当时是完全不存在的。也就是说，飞行员只能依照事先的路线设计，在空中根据地图以及飞机上各种数据的显示，来判断当前的位置是否和预计的相同。任何未知的天气变化，引擎故障，加上当时雷达技术发展的不完整，令飞行员在每一次起飞时，都面临着生死的威胁。就是在这种条件下，航空业作为运输行业的“起步者”，为了在与铁路和水运的激烈竞争中占据一席之地，拉泰克埃尔公司才投入到夜间航线的开发中。从此，对于飞行员们来说，将要面对的危险，将不仅仅是天气的突变与技术的局限，还有茫茫深不见底的黑夜。里维埃这个人物的高大之处，在于他用尽一切方法鼓动着他的飞行员们，让他们打破人自身的局限。正是这种以牺牲普通人的幸福安逸为代价的，对高远理想，对一切未知世界饥渴的探索与追求，让航空业从最初的举步维艰发展到今天，变成了最常用的交通工具之一。当第一架载着邮件的民航航班在深夜时起飞，一封邮件从欧洲大陆抵达南美洲的时间由几个月被缩短到几天，里维埃和他的团队们开启创造的，不仅仅是时间上的纪录，更是属于人类本身的奇迹。</p><p>“我不后悔。我认真地玩了这场游戏，虽然最后我输了……无论结果如何，大海上的清风，我是呼吸过了。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《夜间飞行》不如《风沙星辰》惊艳，但依旧较完整地呈现了“自由”与“责任”的矛盾。“这些也许哪一天会失去生命的人，他们本可以幸福地生活着。”，而里维埃，又有什么权力去阻止一个人追求幸福生活，而人又为什么渴望永恒。仅仅表现法比安的妻子和里维埃的冲突，矛盾的张力还不够激烈，角色的观念以一致的坚定为主。这是一个很深刻的主题，和加缪的《鼠疫》对比阅读。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="书摘" scheme="http://chocoluffy.com/tags/%E4%B9%A6%E6%91%98/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>原来这一切都可以讲述 - 2017年度总结</title>
    <link href="http://chocoluffy.com/2018/01/01/%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B8%80%E5%88%87%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%AE%B2%E8%BF%B0/"/>
    <id>http://chocoluffy.com/2018/01/01/原来这一切都可以讲述/</id>
    <published>2018-01-01T15:05:02.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>嘿！你今年22岁啦，你明年就将从多伦多大学的计算系毕业了。你在今年成为了一名创业者，你想做很多很酷的事，你还记得吗。在时光的边缘回望这一年，有太多的记忆你想留住。你一点一点往回走，想跟上你的影子。</p><a id="more"></a><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fn1icxmdr1j31kw0zk1l0.jpg" style="display: block; margin: 0 auto; border: none"></p><h2 id="one" style="text-align:center;">【一】</h2><p>这一年，你重读了许多你特别喜欢的作家。比如加缪，比如纪德。他们无不都对这个世界体察入微以及拥有极致的想象。你想，要入世，要反抗。</p><p>这一年你最喜欢的还是加缪的《鼠疫》还有毛姆的《刀锋》。你在想，为什么要反抗鼠疫，以及为什么要跨越刀锋。一场灾难想要提醒你什么呢。鼠疫宛如过家家似得，就任性地走了。人们也任性地忘却了，满城烟火地庆祝。作者赐死了看得最清楚的塔鲁。塔鲁一生追求着一个没有死刑的社会，一辈子的信仰，毫不犹豫。作者让帕纳卢神父，一个传授神的旨义的人，去亲眼见证一个孩子的死，去犹豫一些自己曾经奉为圭皋的心意。作者让小说主角，坚持抵抗在第一线的里厄医生坦白自己的迷茫。作者说真正的英雄是格朗，兢兢业业在二线工作的职员，愿望是为异地的恋人创造一篇序语，却在最后一刻去掉了所有的修饰。你在想到底什么是荒谬？</p><p>荒谬是命运无常。是把最精美高贵的生活捣碎给你看，看，没想到吧。荒谬也是哪怕一丁点温柔的改变。是最坚硬的钢板眦裂的小缝，是曾经不可动摇的不再不可动摇。荒谬也是倔强。是我不必厘清意义，也执意反抗。</p><p>无常，带有微小的改变，也偶尔倔强。你发现原来加缪想写的荒谬，写下的却是我们的生活。</p><p>你看见了坚定地守望着地平线的眼眸，也看见了广场上震耳欲聋却空洞飘渺的烟火，他们都是快乐的，而他们的快乐有区别吗？你越来越确信着这一点，每一个人都是一座孤岛。人无法分担他未曾经历过的痛苦，一如他听得见却听不懂远方同类的呼救，哭泣与愤怒。人依旧是这个老样子，想要的正是唯一取决于他们自身的东西。你感到些许惋惜，却也想到，这也正是他们的力量和无辜所在。你说，要入世，要反抗。或许他人即地狱，亦同他人即救赎吧。 ​​​​</p><p>你发现，原来这就是刀锋。</p><p>你一定会好奇自己的答案。相比绝对的自由，你更偏爱责任与羁绊。这或许解释了为什么这一年你偏爱纪德多于毛姆吧。你想追逐一些比时间更长远一点的东西。你想带来笑容。</p><p>你也在寻找加缪的答案，你发现他关注活着的人的命运胜过一切，你也深受影响。你很尊敬他的态度。他写道，“为了改变天生的无动于衷的立场，我曾置身于苦难与阳光之间，苦难使我不相信阳光之下一切都是美好的，而在历史中，阳光则告诉我，历史并非一切。”</p><h2 id="two" style="text-align:center;">【二】</h2><p>这一年，你创建了自己的公司，迎来了一些新的伙伴。你做出了一些成绩，你在着手准备着更大的挑战。你遇见了很多很优秀的创业前辈，你要开拓眼界。你发现其实很多争议都因为模糊的语境，每个人都在用自己的经历和审美下定义。说服投资人也好，团队伙伴也好，不要想当然。你要有全面的把握，才能有偏执的资本。你其实不止一次在问着自己那些海贼王里没有画出的情节，你会在想路飞如果是你，你会怎么做。你要记得这一年来最享受的时光，是和你的伙伴一起打拼。</p><p>这一年，你搬了一次家。你临走前把房间清理地干干净净，就像刚来时那样。这一年里你在这个家里带着团队开发了大大小小的项目，也渐渐成为了公司的雏形，你要记得那些天真的想法，纯粹的热情，那些在屏幕前闪烁的蓝色的夜。这一年你和很要好的朋友一起上班，一起上课，你要记得室友起床晚，早上烧水要轻。搬走前的那天下午你在阳台上吹了很久很凉的风，你回忆并诧异着很多的幸运和巧合，你仔细地把它们藏好，不被吹散。</p><p>这一年，你度过了你22岁生日。或许也和生命里的其他日子没有什么不同，你遇见着自己最熟悉的人。你收到了很多卡片和祝福，你回复了更多的卡片和祝福。你其实心里很明白，成长的仪式，更多时候是自己给的。你不会因为许了一个愿望就长大一岁，但你也渐渐发现，你因为一个日子而被挂念着，你觉得很温暖，你喜欢多伦多的冬天多了一个理由。</p><p>这一年，你听到了一首很喜欢的钢琴曲，你买了一架电子琴开始从零学起，你想在未来有一天弹给她听。</p><p>这一年，你开始相信，这个世界在你心里呈现的样子，远比这个世界本身重要。</p><p>这一年，你中了很深的存在主义的毒。</p><h2 id="three" style="text-align:center;">【终】</h2><p>你把一年来的书稿，日记翻了遍。你有点诧异原来一个人的世界可以被这么短暂地概括，原来回忆如雪，你未曾留意的地方只会是白茫茫的一片。你像是一个在雪地里行走的人，当你现在回望着，你沿着留下的脚印一步一步，你只在你自己的角度遥望着世界。</p><p>你要记住，这很片面，却也是你唯一能做到的事。</p><p>这一年，你发现自己对这个社会还是充满希望，发现了几个特别崇敬的作家以及他们磅礴的世界，发现自己依旧喜欢着海贼王，憧憬着冒险。</p><p>你慢慢感觉到，你的所有回忆，所有留下的文字，不只是给你慰藉，允许你逃离。那些隐秘的不安，那些明亮又失落的沉默，你社会上同胞们的倾诉，他们的苦衷与期盼，这个光怪陆离却时常打动你的世界等等，原来这一切都可以讲述，也值得讲述。似乎是有了一种线索， 于是，波澜也好，平淡也罢，当这些痕迹再次出现在身边的时候，你一眼就认得出来。</p><p>分别2017年的最后这一天，恰巧是多伦多今年最冷的一天。这像极了某种远古的仪式，你捧起丰盛的回忆碎片，然后存封进冰里。</p><p>不是所有的心事都有出口，于是你挑了几片，紧紧护在了怀里。你期待着和别人交换碎片的那刻，你期待着被理解，像一束光簇拥着另一束光。</p><p>或许未来有一天你会无意间翻到这篇日记，或许你会嫌弃现在的幼稚和天真，像嫌弃画里老去的自己。你会有很多的伤口，更多的疤痕。你会摔碎很多曾经无比珍贵的东西，为了守护一些更重要的东西。</p><p>但无论如何，希望那时候的你，依旧坚定，依旧温柔。</p><p>再见了，2017。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘿！你今年22岁啦，你明年就将从多伦多大学的计算系毕业了。你在今年成为了一名创业者，你想做很多很酷的事，你还记得吗。在时光的边缘回望这一年，有太多的记忆你想留住。你一点一点往回走，想跟上你的影子。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="年度总结" scheme="http://chocoluffy.com/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>鲸语的创业故事 - 聚焦生活服务的搜索引擎</title>
    <link href="http://chocoluffy.com/2017/09/26/%E9%B2%B8%E8%AF%AD%E7%9A%84%E5%88%9B%E4%B8%9A%E6%95%85%E4%BA%8B-%E8%81%9A%E7%84%A6%E7%94%9F%E6%B4%BB%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://chocoluffy.com/2017/09/26/鲸语的创业故事-聚焦生活服务的搜索引擎/</id>
    <published>2017-09-27T03:01:58.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>“我希望辍学一年全力开发出高质量的新功能”，这是我对鲸语下一阶段的约定。</p><a id="more"></a><p>鲸语，是一个聚焦生活品类的搜索引擎。聚合了当下媒体平台诸如：微信，微博，今日头条，知乎和Facebook等等的多伦多本地高品质资讯，并利用全自动化的自然语义处理，来推送给用户当下最值得留意的内容和服务。</p><p>这是我对鲸语的愿景，也是今年年初我利用圣诞假期前后三个月开发时，不断自我提醒的目标。我希望让用户高效率的获取信息，宛如在浩瀚海洋里倾听见鲸鱼的低语一般，用户不应该错过任何一条有价值的内容，这也是这款应用名字的由来。目前鲸语下载量在苹果商店多伦多搜索排行榜位列第四，多伦多攻略一类名列第一。</p><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fko195hcs9j30yi0lf3z6.jpg" style="display: block; margin: 0 auto; border: none"></p><p>这也是我就读多伦多大学的第三年。</p><p>直到现在我依旧印象很深的是当初我拖着行李离开机场被同系师兄接上了车，一路上我听着师兄们聊着那些校园周边的新鲜事，那些新开的餐馆和奶茶店，那些社团的纠纷和变故，乃至毕业后职场的迷茫等等。那些陌生的名字和街道，宛如一罐罐精美包装的糖果吸引着我，我听得见我内心的声音，“我希望更快地融入这个城市”。</p><p>在一番搜索后，我手机留下了两个App，一个是51黄页，一个是觅迷，这两个应用分别从大而全，精而细的角度提供了很棒的攻略。每当在两个应用间切换的时候，我也在思考，有没有可能提供一种折中的方式，既具备广泛的品类，又能提供精致的视觉呈现和服务呢？我的注意力慢慢转移到了微博和微信上。</p><p>如果有应用能够像搜索引擎一样，聚合起来各个平台的内容，以跳回原平台地址的形式保障内容生产者的利益，也提供用户高效的资讯获取方式，会不会很实用？接下来的三个月，我利用课余时间着手实现这个想法。</p><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fko1aqw2iej30yi0ht7c5.jpg" style="display: block; margin: 0 auto; border: none"></p><p>在iOS的应用上架，Android应用调试的时候，我让我一些社团朋友来试用。也很惊喜地发现，苹果应用刚上架的前两天就积累了近千名用户，曾一度出现在苹果商店新闻推荐的列表里。慢慢地，有不少社团联系上我，表达希望提供校园内活动的意愿，以及一些健身类的机构，家庭厨房和房屋租赁中介愿意达成广告合作。这些商业合作的拟定，也让我确信这是一个机会，我希望把它做得更好。</p><p>我之前在社交数据分析公司实习的经历，和目前在实验室和导师研究的项目都让我意识到，高质量可供分析的数据和一套支持数据产生的框架系统是多么重要。也是从第一天开发起，我也将鲸语打造成高度自动化的系统。直到目前鲸语达到近9000名用户的时候，我依然没有在运营、管理应用上有任何花销，维持在当前4人的学生团队，相应地和机构的合作也让鲸语一直处于盈利的阶段。</p><p>现阶段的鲸语同时结合了目前人工智能的先进成果。鲸语可以利用用户拍摄的照片，进行智能识别照片内的主体，并推荐相关的攻略，更进一步的应用场景会结合到社交圈子的背景下，更好地连接社交图片的分享和对应服务提供商。</p><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fjxxpzywzhg30b40hs7wh.gif" style="display: block; margin: 0 auto; height: 500px"></p><p>鲸语的下一阶段，是注重接入更多的机构和服务，基于目前搜索引擎的收纳优势，实现更精准地资讯投放和广告服务，为机构提供细分到人群的用户画像和兴趣分布，推出不同价格层级的合作模式，更好地为本地服务提供宣传曝光的机会。</p><p>同时鲸语也将涉及更多的品类和平台，积极撮合和本地流行华人杂志的合作，为用户提供更完整的全平台阅读体验。</p><p>日前鲸语正在与多伦多校方孵化器取得联系，评估进驻多伦多大学创业园区的机会。同时也在接触业界的投资人，寻求25-40万种子轮投资的机会，进一步扩大团队和支持市场宣传和营销。</p><p>作者介绍：余舜哲，现多伦多大学计算机科学大四学生，鲸语的作者，鲸语科技公司的联合创始人。大一参加麻省理工国际遗传工程机器设计竞赛获最佳软件奖和金奖，大二赴加州伯克利交换学习，大三赴多伦多大学并在业界开始为期一年数据科学的实习，现大四结束实习返回学校实验室跟导师继续关于社交网络的研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“我希望辍学一年全力开发出高质量的新功能”，这是我对鲸语下一阶段的约定。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="react native" scheme="http://chocoluffy.com/tags/react-native/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>鲸语 - 一名多大校园开发者的独白</title>
    <link href="http://chocoluffy.com/2017/07/05/%E5%86%99%E5%9C%A81-0%E5%8F%91%E5%B8%83%E5%90%8E%E7%AC%AC50%E5%A4%A9-%E9%B2%B8%E8%AF%AD%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E7%8B%AC%E7%99%BD/"/>
    <id>http://chocoluffy.com/2017/07/05/写在1-0发布后第50天-鲸语开发者的独白/</id>
    <published>2017-07-06T02:31:04.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>编者按：三人的学生团队，历时四个月，从零开始开发应用，冲进了App Store新闻资讯类榜单全球前30，并登顶“多伦多”相关应用的搜索结果。这篇长信，来自鲸语的开发作者，关于校园开发者的经历，关于鲸语诞生的初衷，以及他和伙伴之间的故事。附<a href="https://appsto.re/ca/klNuhb.i" target="_blank" rel="noopener">App Store下载链接</a>。</p><a id="more"></a><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fko195hcs9j30yi0lf3z6.jpg" style="display: block; margin: 0 auto; border: none"></p><p>“按下确认，鲸语就算正式发布咯”，小G把手机递给我。</p><p>“……”</p><p>我侧过头，熄灭的屏幕里映出我们三个人的剪影。思绪暗涌，或许半年前的我不会预想到这一刻。从一无所有开始，这是对我们，对鲸语，很意外而深刻的一段时光……</p><h2 id="一个人到一群人-鲸语的前生AirLoft"><a href="#一个人到一群人-鲸语的前生AirLoft" class="headerlink" title="一个人到一群人 - 鲸语的前生AirLoft"></a>一个人到一群人 - 鲸语的前生AirLoft</h2><p>鲸语的源头，如果硬是要追溯回去，那是在2016年4月1号上线的一个粗糙网站项目AirLoft。 </p><p>那是我刚接触计算机学习一年以来第一个独立完成的作品，印象蛮深刻的，因为那是学院CSC309课程的一个团队项目，可能是当时对网站技术的痴迷，一个人完成了所有的开发。想法挺简单的，每个人都可以发布自己能提供的服务，然后你可以基于地理位置的远近看到别人所能提供的服务，以促成交易。当时就连项目名字起得也是特别粗糙，loft，阁楼嘛，通常大家和朋友分享私密事的地方，前面加个Air，也是傻乎乎地致敬当时最火的平台Airbnb。</p><p>AirLoft或许也可以被粗译成，空中楼阁，这或许也是我所有空中楼阁想法的起点。</p><p>“我希望能够基于地理位置连接你和周围优质的服务”，还记得当时我在一个项目分享会上这么讲。那是华人技术社团UTADA每年都会举办的项目展示大会，不大的房间里塞满了人，宛若一场小型发布会，每一个项目的发起者依次阐释着自己的想法和进度，来吸引在场的人组建最初的团队。有希望开发桌面宠物的，有希望打造异地情侣合照App的，还有一系列从外卖到选课承包了几乎所有校园生活的想法……场下出奇的安静，我脑海里飞速地闪过想法实现的技术框架，身子却一动也不敢动生怕椅子咯吱作响。现在回想起来，那或许也是那段时间里除学习之外少有的几个笨拙而严肃的时刻。</p><p>从讲台上下来，逆着投影的光，台下稀稀拉拉的掌声，总给人一种谢幕的错觉。可值得庆幸的是，AirLoft成了当场分享会最受欢迎的项目，几近半屋子的人在结束后找我询问项目的开发和发展表示希望加入团队。想起这一两年来被其他厉害的师兄带领的经历，这一次我义无反顾地承担起领队的责任，欢迎着每一个人的加入。来自于社团里的20余人，这应该是AirLoft最初的开发团队构成。还记得当时，我觉得我是最幸运的领队。</p><p>只是……</p><h2 id="回到一个人的战斗-鲸语的出现"><a href="#回到一个人的战斗-鲸语的出现" class="headerlink" title="回到一个人的战斗 - 鲸语的出现"></a>回到一个人的战斗 - 鲸语的出现</h2><p>学生开发者本身其实是一个蛮尴尬的身份，一方面作为紧密的学生群体的一员，我捣鼓开发的东西可以很快被很多人了解，使用甚至因此让我获得赞誉，而另一方面我也很清楚地知道自己不过也只是业余选手，无论在能力还是经验上。</p><p>可即便很业余，这却是我向往的生活的一部分，一种能够真正把想法实现出来的自由感。</p><p>那是我正式接触计算机专业学习的第一年，我用平时的空闲时间揽下了特别多的开发任务，各种博客，网站，游戏还有VR，也慢慢认识了很多同样喜欢开发的同学，很幸运地成为项目领队，之后再成为社团技术部的负责人。可是……也渐渐地，开发涉及的领域越来越多，支持想法的技术难度越来越大，作为学生，我也越来越难去说服别人去牺牲业余时间和你一起挑战一个工程难题，去完整一个商业想法。</p><p>没有什么能够承诺的余地，或许正是学生开发者乃至校园创业者相似的现实。它无法承诺你的GPA抑或者履历，更多的也只是在打点好自己学习和生活之后的兴趣而已。而路越窄，越人迹罕至。志同道合绝对值得感恩，而更大多数的时候，这是一个人选择的战斗……</p><p>还记得那个时候在AirLoft的开发阶段，我正在研究怎么处理文本之间的相似度，为的是可以帮助用户找到更贴切相关的服务。我记得特别清楚，那天晚上在家，我正拿UT助手历史上两百多篇文章来测试算法准确度，当屏幕上突然亮出结果的时候，我心里也突然亮出一个念头—</p><p>“说不定我可以把整个多伦多范围的资讯和服务都串联起来而不仅仅只是校园范围的……”</p><p>“……”</p><p>我静默下去。和往常那些浴室里的胡思乱想不同，我感觉到这一次的想法远非不可实现，回想起当初自己刚来多伦多的时候大到租房，退税，小到选课，买零食却需要翻遍各个网站、论坛、公众号和微博查攻略的繁琐，如果能有一个应用把这些攻略像归档一样整理好，每一个话题都能收纳到所有相类似的实用文章，再告诉你离你远近哪里可以找到……感觉会挺实用的不是嘛。我打赌当时的我绝对不会想象到几个月后一个手机应用的上架乃至进入排行榜，更别说现在加入的人工智能，场景识别和视频一系列更复杂的技术等等。当时就是那么一霎那，我觉得这应该是AirLoft真正去实现的方向，这能够真正帮到大家，而我，可能可以把它做出来，那么我来试试吧。</p><p>没什么恢弘的铺陈和情节，创造鲸语的想法就那样突如其来地出现了。</p><p>现在回想起来，还真有点像村上在书里谈论他做出决定写小说的那个瞬间—坐在神宫球场外听见清脆的击球声，“哦对了或许我也可以写小说……”。</p><p>余下的那晚，和接下来那几天我或许并没有什么特别，上班，请假上课，写作业和准备考试依旧占据了我生活绝大多数的时间。只是在每天那剩下来的一小会儿时间里，我脑海持续地被这个想法占据，碰巧半年前在图书馆里看完了整场Facebook开发者直播，也了解到了最新React Native跨平台开发App的方案。拥有接近半年React开发网站经验的我决定来啃啃螃蟹，谁知道呢，反正也没什么人试过，但是这真的很酷啊。</p><p>当时只是觉得自己不过是做了一个很小的决定，小到就有点像是在选择晚餐是配苹果还是橙汁这样无关紧要的选择，可现在想起来，当时的那个决定或许是基于我一个从未开发过iOS应用的初学者最好的决定。熟悉的技术理念和开发语言，也让我两个月用周末业余时间把鲸语的雏形开发出来成为可能。这期间经历的困境，并不像纸面上“两个月的业余时间”这么潇洒的概括，那些因为框架方案太新导致没人处理的漏洞我不得不写出奇奇怪怪的解决方案，那些直接和陌生开发者讨论实现方案长篇累牍的邮件，还有每几周迎来的新的开发观念的消化带来的一系列项目的变动……这一切都历历在目。</p><p>我无法评论我未曾选择的路，但我所经历过的那些尝试起伏，那些明亮的失落的瞬间，都作为一部分成就了鲸语最初的样子。</p><p>当初写在鲸语1.0发布文章里的那句话依然能诚恳地回望我这一段鲸语初期的开发—</p><p>“谁没有些从陌生到渐渐开窍的故事呢，或许没有那么多理所当然和信手拈来，不过举重若轻罢了。”</p><h2 id="伙伴-记在鲸语1-0发布之后"><a href="#伙伴-记在鲸语1-0发布之后" class="headerlink" title="伙伴 - 记在鲸语1.0发布之后"></a>伙伴 - 记在鲸语1.0发布之后</h2><p>无论问我多少次，对鲸语来说最重要的部分是什么，最重要的经历是哪些，我都会毫不迟疑地回答，是伙伴，是鲸语团队里的伙伴们，是一路走来志同道合的伙伴们。</p><p>我特别喜欢的海贼王漫画，讲着一群人为了各自的梦想相互守候一起冒险的故事。很幸运地，在鲸语成长的路上，我也渐渐找到了值得依赖的伙伴。</p><p>认识小G，是在羽球场上两个左撇子相遇的意外。谁也没有想到，接下来的一年，小G以新任社长的身份带领UTADA在各个对外活动上接入正轨，为鲸语项目的产品化，商业化出谋划策。在每次鲸语的重要决策之前，我脑海里都会浮现小G的一句话，“即便是最糟糕的结果，也不过只是维持现状罢了……”。很平淡的字，却每一次给我决意的勇气。小A，很有灵性的设计师和开发者，鲸语的logo和许多样式均出自小A之手，印象特别深刻教会小A项目技术背景的那晚，他凌晨三四点发来App改进的界面图，我只能用完美来评价……他们的加入，像是静寂了很久的路上慢慢传来的烟火声，我渐渐学会把所有心事都拿出来说，好话，废话，美好的愿景，耍过的机灵都抖落出来。我曾深知孤独的必然，而所有交错的经历，共同的承担，都成为恩赐而值得深深铭记。</p><p>是被“驯服”过的，于是玫瑰的名字，不再重要。</p><p>距离鲸语1.0的发布刚走过不多不少的50天，盛大，冷却，到再出发，无意却像极了过往的这一年。我一字一句地斟酌，写不出的青涩和匆忙像留不住的沙漏，笨拙却无比真实。</p><p>静静地在图书馆敲下这些字的时候，也是多伦多一段绵长的雨季正式结束的时候，终于迎来的夏天，像终于等来的恋人，空气里弥漫着绵软如絮的热烈。</p><p>我坐在E.J.图书馆最靠窗的位置，能瞧见整个Queens Park的慵懒和喧闹。屏幕一角那三人剪影的位置，依附着午后阳光的一块。阳光很暖，温顺一如眼眸。</p><h2 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h2><p>留下上面每一字的时候，是鲸语1.0刚发布的第50天。很幸运，在它的第100天，2.0如期而至。变化的是几近所有的功能和样式，这期间我们去拜访了很多业界的前辈，去展示，去交换，去见见外面的世界，也默默低下头去记下了每一处鲸语的伤。更庆幸那些没有变化的，那些依旧会紧张的，却也依旧高涨的情绪， 那些如同记录自己成长般记录鲸语成长的坚持……</p><p>很感激这期间相遇的每一个帮助过鲸语的人，尤其是校园里反馈尤其积极的同学们。我们为下一步画下了更难的挑战，要更踏实地去实现呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编者按：三人的学生团队，历时四个月，从零开始开发应用，冲进了App Store新闻资讯类榜单全球前30，并登顶“多伦多”相关应用的搜索结果。这篇长信，来自鲸语的开发作者，关于校园开发者的经历，关于鲸语诞生的初衷，以及他和伙伴之间的故事。附&lt;a href=&quot;https://appsto.re/ca/klNuhb.i&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;App Store下载链接&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="react native" scheme="http://chocoluffy.com/tags/react-native/"/>
    
      <category term="iOS" scheme="http://chocoluffy.com/tags/iOS/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>但是你记得｜《把你交给时间》读后感</title>
    <link href="http://chocoluffy.com/2017/03/20/%E4%BD%86%E6%98%AF%E4%BD%A0%E8%AE%B0%E5%BE%97-%E3%80%8A%E6%8A%8A%E4%BD%A0%E4%BA%A4%E7%BB%99%E6%97%B6%E9%97%B4%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://chocoluffy.com/2017/03/20/但是你记得-《把你交给时间》读后感/</id>
    <published>2017-03-21T02:07:17.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>“那些微小的瞬间， 一点都不重要， 但是你记得。”</p><a id="more"></a><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdu8fzqdduj30m80m8e3t.jpg" alt="相遇"></p><p>很少这么专注地一口气读完一本书了。 一次没有WIFI的航程竟成了一场恩赐， 橘黄色的阅读灯刚刚够点亮我的位置， 在周围一片睡意里， 我静静地听着陶立夏讲述的一段又一段旅行故事。 故事里一再出现的“你”的提问和陪伴， 也让我感动仿佛作者就在面前的亲切。文字很轻， 没有什么呐喊， 也不需要什么奔走相告， 或许本身孤独的心就离的很近，而邻近的人， 就不必大声了。机舱很吵， 心很静。 或许这也是我那么多次航行在万丈高空里， 最虔诚的一次。</p><p>突然很想去旅行， 更准确的说， 其实是很想去感受作者旅行的感受吧， 冰岛壮阔的蓝， 溯游的三文鱼， 优雅的伦敦， 名字特别好听的小岛……自己明明羡慕的很， 羡慕远行的洒脱， 羡慕每篇依旧崭新而温热的回忆。但羡慕归羡慕， 我自己也清楚得很， 世界一直都是那个样子， 不同的人怀揣着不同的心事往昔去看， 也看到的是不同的样子。挺荒谬的不是嘛， 可能一群人跋山涉水追逐着记录下的风景和绝唱， 到头来那最终的震撼却因人而居， 细腻的人窥见细腻的风景， 多情的人捕捉住多情的回忆， 人呐， 始终走不出自己这个圈子罢了。</p><p>无数次和旅行一起捆绑的， 还有不断追问的意义。 人们总是想知道个所以然， 摸索到潜在的利害关系是最令人信服的， 毕竟谁都难以忍受住的， 却终究被少数人克服的那刻会揭开多少人的伤疤。 人还是喜欢自我安慰， 有个答案， 总比没有答案省事多了不是吗。问题到了作者那儿， 只见她款款在结尾写道， “人们常常问我旅行的意义， 我总是答不上来……那些微小的瞬间， 一点都不重要， 但是你记得。”</p><p>如果说遗忘是否定了存在过， 那么记得， 或许就是最实诚而浪漫的珍惜了吧， 那些隔着时光却依旧清晰的纹理， 味道和温度， 那些仅仅一小段旋律就撩开的汹涌回忆……人类发明各种科学技术交通手段来战胜空间仿佛无所不能， 却对时间无能为力。 而那些潮水冲散开后仍一直被攥紧着的， 又是多么得幸运。</p><p>而关于旅行同样重要的， 还有那些在经历了不平凡的生活之后， 对平凡的思考。在尝遍酸甜苦辣之后， 对平淡的回味。 我小时候也会想象， 那些恢弘的战争故事封笔后的情节， 将军战士总有褪下铠甲的一天， 撒去的热酒总有冷却的时候。和平的一如既往， 或者说战争的消逝， 会一并带走英雄吗？</p><p>有没有发现，最近的好莱坞，越来越擅长英雄迟暮了。</p><p>印象很深刻新世相的一句话，“人们活着是注定为一些重要的事情伤心的，它提醒你曾经拥有过某种幸福。下一次再遇到时，你会一眼认出，然后紧紧抓住它”。</p><p>耳边响起的是小王子的呢喃。是被“驯服”过的。于是千万灿烂的玫瑰园，也认得出那独一无二的一支。</p><p>有一天，你恍然发现曾无比熟悉的生活里陌生而盛大的风景，“也记起这一路的奔波劳累和美丽景色。那或许会是在世界另一头的繁华都市，或许是在某个酷热的热带岛屿，又或者只是在某个赶稿的寻常春日夜晚。我想起Simbahllin，想起她吱嘎作响的老旧木地板和泛着时间光泽的咖啡桌，想起空气里华夫饼的香气，像挂念一个远方的故知。她性格沉稳又古怪，虽然并不能常见面，却让你觉得心安，因为她代表着一份遥不可及的温柔。我喜欢这种可望不可即的寄托，这就是旅行带给我们的，最长久也最真切的美好。”</p><p>很安静和美好。这就够了。</p><p>“生活即隐喻”，要学会努力感受生活。二十一岁了，这是我第一次有这种感觉。谢谢你，陶立夏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“那些微小的瞬间， 一点都不重要， 但是你记得。”&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>App首发｜鲸语 - 多伦多玩乐攻略第一入口</title>
    <link href="http://chocoluffy.com/2017/03/20/App%E9%A6%96%E5%8F%91%EF%BD%9C%E9%B2%B8%E8%AF%AD-%E5%A4%9A%E4%BC%A6%E5%A4%9A%E7%8E%A9%E4%B9%90%E6%94%BB%E7%95%A5%E7%AC%AC%E4%B8%80%E5%85%A5%E5%8F%A3/"/>
    <id>http://chocoluffy.com/2017/03/20/App首发｜鲸语-多伦多玩乐攻略第一入口/</id>
    <published>2017-03-20T23:23:04.000Z</published>
    <updated>2018-03-09T21:55:16.426Z</updated>
    
    <content type="html"><![CDATA[<p>我想象，当我想知道在多伦多，哪里有最好吃的煎饼果子或者绵绵冰， 哪里有最好玩的酒吧和密室，鲸语能给我最好的答案。</p><a id="more"></a><p>鲸语是我过去几个月用业余时间开发出来的作品，<strong>每天推送多伦多城市生活，校园生活的最新资讯</strong>，实时追踪着主流媒体平台的本地报道，涵盖微信公众号，微博，知乎，Facebook及各大潮流杂志等等。结合全面的搜索功能，<strong>每一个话题，都可以关注到最实用和最及时的回答</strong>，从浪漫的约会地点到实惠的报税攻略……如果能省下些平时刷公众号的时间，少些急用时又搜不到的焦虑，也是我最大的愿望。</p><p><img src="http://chocoluffy.com/ReactNativeEverydayDemo/images/xs-whalesper-search.gif" style="display: block; margin: 0 auto; height: 500px"></p><p>鲸语也同步了近期多伦多周边最热门的活动，一键加入日历或者开始导航。</p><p><img src="http://chocoluffy.com/ReactNativeEverydayDemo/images/xs-whalesper-event.gif" style="display: block; margin: 0 auto; height: 500px"></p><p>同时，诞生于多伦多大学校园的鲸语，也聚合了大部分华人社团的动态，在此基础上，打通了UTADA社团旗下的UT助手平台的数据库，引入自动化聊天机器人，希望以最快捷的方式提供实时校园服务，包括各图书馆开放时间查询，期末考时间查询，课程课本乃至建筑物的查询等等等等…</p><p><img src="http://chocoluffy.com/ReactNativeEverydayDemo/images/xs-whalesper-campus.gif" style="display: block; margin: 0 auto; height: 500px"></p><p>纷乱嘈杂的媒体环境，掩盖了许多不被分享的美好。而鲸语想实现的，是想把这些优质的本土内容攻略，沉淀下来，分享出去。用最自动化的方式。</p><h2 id="一个没有编辑部的媒体平台-鲸语是什么"><a href="#一个没有编辑部的媒体平台-鲸语是什么" class="headerlink" title="一个没有编辑部的媒体平台 - 鲸语是什么"></a>一个没有编辑部的媒体平台 - 鲸语是什么</h2><p>曾经接触过许多优秀的学生开发者的作品，可每当发现作品的内容终止更新的时候，总会感到些许惋惜。</p><p>的确，作为学生，难以取舍的运营成本抑或突如其来的人情世故，太容易放弃作品背后的冲动。也或许是这样，在我有开发鲸语的计划时，自动化成为了我最重要的目标。</p><p>自动地收集，自动地提取分析归类，自动地推荐。这会是一个完整的媒体平台，实时追踪着多伦多最有趣的动态，由算法决定文章消息的过滤，概括，标签和分类，由用户的阅读和收藏权衡热度，由地理位置产生推荐……而唯独不依赖于我的编辑。哪怕一年之后我从多伦多大学毕业了，鲸语也可以长久地运营下去，推送本地最酷的内容，服务所有多伦多华人。</p><p>向今日头条和湾区日报致敬。</p><p>被更多人所熟知的今日头条在技术上给了我很多启发，我也尝试着按照我的理解来打造内容特征分析和协同推荐的流程。在体量上，鲸语有接近200个内容源，涵盖了诸如微信、微博、知乎、Facebook及各大本地优质杂志等等的热门媒体平台。</p><p>而湾区日报，则更让我亲切。一个人每天分享文章的业余项目，近3年写了近90万字的简评。阅读并收集优秀的资源是一个很好的习惯，而让我印象深刻的并不是作者这一坚持的习惯本身，而是，作为一名工程师，将整个习惯流程完全自动化的地步。而我也采用类似的技术栈为鲸语开发了自动化的审核系统，各类存在争议的文章和活动，能够在与聊天机器人的交互中完成审核，后续的发布也依旧交给程序。而近期也将开放接口给各合作社团及第三方，提供更多内容发布上的便利。</p><p>讲不清楚自己对自动化的执着。或许就是懒吧，但更多也是对鲸语更长远的期待。打造一个没有编辑部的媒体平台，我还想尝试更多可能。</p><h2 id="连接更多优质的服务与人-鲸语的下一步"><a href="#连接更多优质的服务与人-鲸语的下一步" class="headerlink" title="连接更多优质的服务与人 - 鲸语的下一步"></a>连接更多优质的服务与人 - 鲸语的下一步</h2><p>鲸语的下一步，会和许多优质的服务第三方和个人合作。会有很酷的东西更新，这里抿一下嘴哈哈。</p><h2 id="连点成线-记鲸语的诞生日记"><a href="#连点成线-记鲸语的诞生日记" class="headerlink" title="连点成线 - 记鲸语的诞生日记"></a>连点成线 - 记鲸语的诞生日记</h2><blockquote><p>生命里的每一个点都会最终连成线。乔布斯</p></blockquote><p>很难说现在回头看能望见什么，但这半年来的经历都在我计划鲸语的时候给了特别多的启发。从开发校园服务开始，集成UT助手过去几百篇文章的推荐系统，自动文本概括，聊天机器人和先后开发的四五个未上架的App原型等等等等……于是乎，鲸语的出现就仿佛是一张拼图慢慢浮现出了形状，与其说是我开发出了这个作品，不如说是我认出了它。</p><p>就像突然发现一条绷紧的风筝线，牵扯起背后风尘仆仆的过往。</p><p>以前很喜欢普鲁斯特的一句话，“每个读者只能读到已然存于他内心的东西。书籍只不过是一种光学仪器，帮助读者发现自己的内心。”。它告诉我，不同的人怀揣着不同的心事往昔，会看见不同的风景。那些被骄傲着的想法，那个在软件背后所规划的世界，都不过唯心而已；也渐渐发现，在世界兜了一大圈，最后不过和自己对话。</p><p>可越是如此，也想拼命问出来，自己想象里这个世界的样子，那些还没被串联起的可能。</p><p>镜头慢慢转回来，鲸语因为这些经历慢慢出现了雏形，开始下一个阶段更细致地规划和开发。这过程也不是一帆风顺。</p><p>曾经道听途说过一些创业故事，而终于轮到自己，才发现，曾经那些被争吵着的，被争分夺秒的，都是最血淋淋的事实。作为开发者，诚心而论，这个过程里最大的瓶颈却同样最大的动力就是技术。商业化作品的架构的稳定性和延展性远不同于平时随手玩玩的项目，从运算的效率改进到数据库优化，再加上跨平台的开发考量……无数个选择，都推动我去不断理解和尝试不同企业面临相似问题的时候所做出的选择。作为管理者，从产品定位到市场营销等方方面面，那些陌生的海域，是不能再真实的未知和试探。小到logo的色差，某个板块少覆盖了哪个网站，大到屏幕的布局和动画，和第三方合作的条条款款……和伙伴们一遍遍修改，拍板再推倒重来，也成为鲸语现在依旧青涩却最真实的样子。</p><p>谁没有些从陌生到渐渐开窍的故事呢，或许没有那么多理所当然和信手拈来，不过举重若轻罢了。</p><p>写了这么多，其实鲸语没有那么复杂，就是一个本地的媒体平台，实验着我自己对数据分析上的，语义分析上的很多想法。而对鲸语真正可贵的，是那些海量被标签的数据，作为媒体，对机器推荐的改进怎么都不为过不是吗。等自己空闲下来，还有很多在机器学习上更有趣的事情可以尝试!</p><p>在你看到这里的时候，鲸语的第一版已经稳定地发布了。看过那些关于鲸语诞生的故事，那些开发时候的尝试，翻过篇章，鲸语也将迎来新的冒险。而我，也将尝试些更多的东西，纪录下更多的故事。或许不是每个故事都有完整的起承转合，但能够想清楚写清楚那些婉转和遗憾，也很有意思。</p><p>就好像有一段和自己一起成长的故事，一场陪伴。</p><p>或许就是陶立夏笔下写到的，仿佛蜗牛与它的壳，人嘛，总想要一些熟悉的东西陪伴着去看这个世界的繁华与荒凉。也算是写给自己间隔一年的回忆吧。</p><p>期待下一章。</p><h2 id="关于伙伴和小幸运-比心"><a href="#关于伙伴和小幸运-比心" class="headerlink" title="关于伙伴和小幸运 - 比心"></a>关于伙伴和小幸运 - 比心</h2><p>来多伦多的这一年半发生了很多事情。搬了一次家，做出了全职一年的决定，第二遍去读加缪，各个打磨地或许依旧不会上架但仍然有趣的作品，以及那可能还未亲近的冬天……其中印象最深刻的，或许就是那误打误撞地加入了一个社团UTADA，误打误撞地认识了现在最要好的朋友和室友。曾经一直以为自己会单打独斗下去，但一路上的小伙伴慢慢多了起来，深感起伙伴的意义和陪伴。</p><p>谢谢Ajax，很天才的设计师和学习速度特别快的开发者，鲸语里很多细节都很有你的风格。谢谢Gloria，作为社长给一个年轻而懵懂的社团带来了太多的改变，产品方面特别有想法，激情和执行力。你们的加入，给鲸语带来了太多太多。</p><p>谢谢AirLoft的成员，去年暑假每个周末的hackerthon为社团捣鼓各种奇怪的东西，或许只有你们能陪我这么折腾。谢谢很默契的室友还有办公室里经常抱团的五小只，一起上课一起上班的各种帮忙打掩护。还有多大中文，虽然很少有交集但每每看到他们的文字总觉得很亲切，同样很酷的作品Klido和很有才艺的开发者；觅迷，很精致的作品，给了鲸语启发；还有EZ4，刚来多大时还以为是普通社团参加的破冰活动到现在已经发展得规模如此之大，虽然带有争议，但团队里有我特别尊敬的人。</p><p>身边有很多很有趣的伙伴，无论学术还是业界，和他们的相遇和合作本身就值得感激。也想多做点什么，对得起时光，也对得起运气。</p><p>最后引用多大中文一篇文章里很有感触的一句话结尾，“二十多岁的大学生绝对是迷茫、恐惧和无聊的，但却真的可以做很多事情、影响很多人。”</p><p>也致21岁的上半场。</p><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fe2ctucdesj31hc1407wi.jpg" style="display: block; margin: 0 auto;"></p><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fe2cv5dxurj31hc140kjl.jpg" style="display: block; margin: 0 auto;"></p><p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fe2cvnecnnj31hc140kjo.jpg" style="display: block; margin: 0 auto;"></p><p>鲸语来自多伦多盛大而无常的生活，也希望带给大家这座城市更精致的一面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想象，当我想知道在多伦多，哪里有最好吃的煎饼果子或者绵绵冰， 哪里有最好玩的酒吧和密室，鲸语能给我最好的答案。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react native" scheme="http://chocoluffy.com/tags/react-native/"/>
    
      <category term="iOS" scheme="http://chocoluffy.com/tags/iOS/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>浅析经典面试算法题-two pointer的运用</title>
    <link href="http://chocoluffy.com/2016/12/04/%E6%B5%85%E6%9E%90%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98-two-pointer%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://chocoluffy.com/2016/12/04/浅析经典面试算法题-two-pointer的运用/</id>
    <published>2016-12-04T17:59:47.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>前几天和朋友讨论 Google 电面的一道题， 由此启发， 总结了下 two pointer 的使用场景， 在大部分情况下， 恰当地使用 two pointer 可以使时间复杂度保持在 O(n)， 像 online judge 里部分 medium 题经常提及的子数列类型问题， two pointer 也可以提供不错的切入角度。</p><a id="more"></a><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>前几天和朋友讨论 Google 电面的一道题， 由此启发， 总结了下 two pointer 的使用场景， 在大部分情况下， 恰当地使用 two pointer 可以使时间复杂度保持在 O(n)， 像 online judge 里部分 medium 题经常提及的子数列类型问题， two pointer 也可以提供不错的切入角度。</p><h2 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h2><h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><p><strong>Question</strong> [EASY] 找到两个数， 其和为指定数量。 Given an array of integers, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p><p>很典型的two sum问题。除去brute force的n方时间复杂度的算法，还有n的方法。简单来说， 用hashmap找另一个值是否存在， 典型的用空间换时间， 这里空间复杂度也是n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hashmap implementation. O(n) runtime, O(n) space.</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i + <span class="number">1</span>, map.get(target - numbers[i]) + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!map.containsKey(numbers[i]))&#123; <span class="comment">// edge case: duplicate items.</span></span><br><span class="line">        map.put(numbers[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hashmap特别要注意的地方就是对于duplicates的考虑， 题目究竟是返回true or false就可以了， 还是需要返回所有符合的index， 还是只是最小（或最大）的index， 都会有不同的实现方案。</p><h3 id="Sorted"><a href="#Sorted" class="headerlink" title="Sorted"></a>Sorted</h3><p>如果integer array已经排序过了的话，可以用两个pointer来实现n时间1空间复杂度的方案； 不难理解， 两个pointer从两头往中间移动， 其sum只有三种可能， 和比要求的target小， 那么起始点的pointer右移， 和比要求大， 末尾pointer左移， 直到得到和或者return没有结果为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Two pointer implementation. Given that array is sorted. O(n) runtime, O(1) space.</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> p2 = size - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (p1 &lt; p2)&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers[p1] + numbers[p2] &lt; target) &#123;</span><br><span class="line">      p1 += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (numbers[p1] + numbers[p2] &gt; target) &#123;</span><br><span class="line">      p2 -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;p1, p2&#125;;    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>留意一下two pointer适合哪些情景? 基础的变式是通过两个移动不同步长的pointer来完成一些事情， 也在暗指， 本身iterate through的这个array必须存在一些特性使得pointer可以有不同的移动。</p><h3 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h3><p>借此稍微总结一下， 运用到two pointer的场景和技巧。</p><p><strong>Question</strong> [EASY]合并两个sorted array变成一个sorted array。 Given two sorted arrays A and B, each having length N and M respectively. Form a new sorted merged array having values of both the arrays in sorted format.</p><p>利用设置在两个sorted array开头的指针， 来达到m+n时间复杂度的效果。 比较简单。</p><p><strong>Question</strong> [EASY]一次循环找到链表的中间元素。How to find middle element of linked list in one pass?</p><p><strong>Question</strong> [EASY]判断一个链表是否存在环。 How to find if linked list has a loop ?</p><p><strong>Question</strong> [EASY]找到链表中倒数第三个元素。How to find 3rd element from end in a linked list in one pass?</p><p>以上都是关于单向链类似的问题， 利用two pointer都可以得到快速的解答。</p><h3 id="Example1-continuous-maximum-subarray"><a href="#Example1-continuous-maximum-subarray" class="headerlink" title="Example1 - continuous maximum subarray"></a>Example1 - continuous maximum subarray</h3><p><strong>Question</strong> [MEDIUM]找到不大于M的连续最大和子数列。 Given an array having N positive integers, find the contiguous subarray having sum as great as possible,, but not greater than M. </p><p>其实第二题还涉及到了另一个技巧， 就是在对于部分求和问题里， 使用cumulative sum array是一个可能的切入口。 在将原数列生成对应的cumulative sum array之后， 这个题目也就相应转换为找到两个index， 使得对于这个递增的和数列， 满足：<code>cum[endIndex] - cum[startIndex-1] &lt;= M and cum[endIndex+1] - cum[startIndex-1] &gt; M</code>的条件， 而<code>endIndex</code>和<code>startIndex</code>在原数列里对应的子数列， 就是满足要求的最大和子数列。</p><p>转换了题意之后， 对于这个递增数列， 可以接着用two pointer的思想来处理， 设置start和end两个pointer从头开始， 右移end指针只到不能满足需求为止，然后右移start指针来减少sum使得end指针可以继续右移。 记录下每次start指针右移是的sum， 最大的那个sum所对应的指针位置， 对应回原数列， 就是我们想要找到的连续最大和子数列。<strong>可以说， 这道题的突破口是利用cumulative sum来创造一个递增的数列， 从而使two pointer的实现方式更为简洁。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] main(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> ceiling) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] cumSum = <span class="keyword">new</span> <span class="keyword">int</span>[numbers.length() + <span class="number">1</span>]; <span class="comment">// obtain cumulative sum.</span></span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  cumSum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length(); i++) &#123;</span><br><span class="line">    sum += numbers[i+<span class="number">1</span>];</span><br><span class="line">    cumSum[i+<span class="number">1</span>] = sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; <span class="comment">// two pointers start at tip of the array.</span></span><br><span class="line">  <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] ids = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">while</span> (l &lt; cumSum.length()) &#123;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; cumSum.length() &amp;&amp; cumSum[r] - cumSum[l] &lt;= M) &#123;</span><br><span class="line">      r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cumSum[r-<span class="number">1</span>] - cumSum[l] &gt; max) &#123; <span class="comment">// since cumSum[0] = 0, thus r always &gt; 0.</span></span><br><span class="line">      max = cumSum[r-<span class="number">1</span>] - cumSum[l];</span><br><span class="line">      ids[<span class="number">0</span>] = l; ids[<span class="number">1</span>] = r;</span><br><span class="line">    &#125;</span><br><span class="line">    l++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example2-continuous-minimum-distinct-subarray"><a href="#Example2-continuous-minimum-distinct-subarray" class="headerlink" title="Example2 - continuous minimum distinct subarray"></a>Example2 - continuous minimum distinct subarray</h3><p><strong>Question</strong> [MEDIUM]找到至少含有K个不同数字的连续最小和子数列。 Given an array containing N integers, you need to find the length of the smallest contiguous subarray that contains atleast K distinct elements in it. Output “−1−1” if no such subarray exists.</p><p>从题意上和上一问求连续最大和子数列很像， 其实处理方式也有共同之处， 利用cumulative sum来负责和的部分， 利用set的实现来负责distince element的部分， 和之前相比end指针移动的条件， 更换为使得set中元素至少有K个， 记录此时sum和对应得<code>end - start</code>得长度， 然后移动start指针， 更新set元素， 由此往复。n的时间复杂度。</p><h3 id="Example3-minimum-hustle-subsequence"><a href="#Example3-minimum-hustle-subsequence" class="headerlink" title="Example3 - minimum hustle subsequence"></a>Example3 - minimum hustle subsequence</h3><p><strong>Question</strong> [MEDIUM] 找到K个给出最小hustle值的子数列， 不要求连续。 Given an array having N integers, you need to find out a subsequence of K integers such that these K integers have the minimum hustle. Hustle of a sequence is defined as sum of pair-wise absolute differences divided by the number of pairs. </p><p>明确了hustle值， 也就是pair的差绝对值之和之后， 对于不要求连续的子数列找最小值， 可以利用sorting来排序， 转换为类似寻找连续最小和子数列的类型。可以稍微改变上题的方法来处理这道题。nlogn + n的时间复杂度。</p><h3 id="Example4-Google-phone-interview"><a href="#Example4-Google-phone-interview" class="headerlink" title="Example4 - Google phone interview"></a>Example4 - Google phone interview</h3><p>前几天看到朋友发的Google的其中一道电面的题， 和上面讨论的题型很像， 不过稍加改动之后还更简单了。</p><p><strong>Question</strong> [EASY] 找到number X满足最大cover。Given a set S of 10^6 doubles. Find a number X so that the [X, X+1) half-open real interval contains as many elements of S as possible.For example, given this subset:[2.7, 0.23, 8.32, 9.65, -6.55, 1.55, 1.98, 7.11, 0.49, 2.75, 2.95, -96.023, 0.14, 8.60], the value X desired is 1.98 because there are 4 values in the range 1.98 to 2.97999 (1.98, 2.7, 2.75, 2.95)</p><p>首先还是将数字sort一遍， 之后可以将题目转换为two pointer的类型。<code>array[end] - array[start] &lt; 1</code>， 同时使得collection的size最大。 每次end指针右移， 添加element到collection里面， 在start指针右移的时候记录下对应的<code>array[start]</code>的值和collection的size， 最后拿到当collection的size最大的时候的那个元素值就可以满足在<code>[X, X+1)</code>的区间中数列的元素最多了。 由于不需要考虑distinct element， 所以采用collection而不是set。 达到O(n)的时间复杂度， 较优的解法。</p><h3 id="Example5-three-pointers"><a href="#Example5-three-pointers" class="headerlink" title="Example5 - three pointers"></a>Example5 - three pointers</h3><p><strong>Question</strong> [MEDIUM] 找到最长只含有两个不同字母的子数列长度。 Given a string S, find the length of the longest substring T that contains at most two distinct characters. For example, Given S = “eceba”, T is “ece” which its length is 3.</p><p>仍然是two pointer的变式， 在维持two pointer的移动规则， 以及保持map的元素一直为两个的同时， 利用第三个pointer来从map中移除元素。在这种情况下不是简单的每次直接移除一个， 而是利用第三个pointer来移除移除元素到map里只剩两个元素。之所以用map而不用set的原因是， 移除一个字符并不代表后面就没有该元素重复， 而是采用<code>map&lt;char, int&gt;</code>来计数， 当int为0时才从map的key中移除该字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * find longest substring with at most two distinct elements.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestSubstringTwoDistinctElement</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, m = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">   Map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; map = <span class="keyword">new</span> HashMap&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">   <span class="keyword">while</span> (r &lt; s.length()) &#123;</span><br><span class="line">      <span class="keyword">while</span> (map.size() &lt; <span class="number">3</span>) &#123; <span class="comment">// keep the set fixed.</span></span><br><span class="line">         maxLen = max(maxLen, r - l);</span><br><span class="line">         r++;</span><br><span class="line">         <span class="keyword">if</span> (map.containsKey(s[r])) &#123;</span><br><span class="line">            map.put(s[r], map.get(s[r]) + <span class="number">1</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(s[r], <span class="number">1</span>);</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      m = l; <span class="comment">// pointer m moves the from left till map becomes two.</span></span><br><span class="line">      <span class="keyword">while</span> (map.size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (map.get(s[m]) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            map.put(s[m], map.get(s[m]) - <span class="number">1</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">// remove that char from map.</span></span><br><span class="line">            map.remove(s[m]);</span><br><span class="line">         &#125;</span><br><span class="line">         m++;</span><br><span class="line">      &#125;</span><br><span class="line">      l = m;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Method2: Compare with using map, if we know string only contains ASCII characters, then we can use int[256] to replace with a map&lt;char, int&gt;, since ASCII contains 127 characters, while use 8 bits leave one space for signed or unsigned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstringTwoDistinct</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>, numDistinct = <span class="number">0</span>, maxLen = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (count[s.charAt(j)] == <span class="number">0</span>) numDistinct++;</span><br><span class="line">      count[s.charAt(j)]++;</span><br><span class="line">      <span class="keyword">while</span> (numDistinct &gt; <span class="number">2</span>) &#123;</span><br><span class="line">         count[s.charAt(i)]--;</span><br><span class="line">         <span class="keyword">if</span> (count[s.charAt(i)] == <span class="number">0</span>) numDistinct--;</span><br><span class="line">         i++;</span><br><span class="line">      &#125;</span><br><span class="line">      maxLen = Math.max(j - i + <span class="number">1</span>, maxLen);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Substring"><a href="#Substring" class="headerlink" title="Substring"></a>Substring</h2><p><strong>Question</strong> [EASY] 查找是否存在子字符串。Implement strstr(). Returns the index of the first occurrence of word1 in word2, or -1 if word1 is not part of word2.</p><p>其实典型做法就是科班的KMP算法， mn的时间复杂度， 注意的点还是在于对部分edge cases的考虑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strstr</span><span class="params">(String raw, String template)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; raw.length(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; template.length(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; raw.length() - template.length()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (template.charAt(j) != raw.charAt(i + j)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == template.length()) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reverse-Words-in-String"><a href="#Reverse-Words-in-String" class="headerlink" title="Reverse Words in String"></a>Reverse Words in String</h2><p><strong>Question</strong> [EASY] 将字符串中的单词们首位调换位置。Reverse words in string. Given an input string s, reverse the string word by word. For example, given s = “the sky is blue”, return “blue is sky the”.</p><p>注意的点在于使用StringBuilder而不是String concatenation， 因为StringBuilder不需要每次在赋值的时候再创建一个新的对象。 同时和这类题型特别相似的还有将某个integer array向某个方向rotate的， 存在类似的技巧。</p><h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><p>基础的做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse token, reverse them. n time, n space.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">String[] tokens = s.split(<span class="string">"\\s+"</span>);</span><br><span class="line">String result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length(); i++) &#123;</span><br><span class="line">result += tokens[tokens.length() - <span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不允许使用<code>split()</code>来parse token的话， 可以尝试two pointer的方式， 一个负责track单词的起始位置， 一个负责track结束位置， 然后跳过空格继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// do better with only one pass, without using split util function. By using two pointers, one tracks the word's beginning, one tracks the end. n time n space.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start = s.length() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> end = s.length() - <span class="number">1</span>;</span><br><span class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span> (start &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (!s.charAt(end)) &#123; <span class="comment">// start with a non-space word.</span></span><br><span class="line">start--;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(s.charAt(start)) start--;</span><br><span class="line"><span class="keyword">if</span> (result.length() != <span class="number">0</span>) &#123;</span><br><span class="line">result.append(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">result.append(s.substring(start + <span class="number">1</span>, end));</span><br><span class="line">end = start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tricks-1"><a href="#Tricks-1" class="headerlink" title="Tricks"></a>Tricks</h3><p>以上提到的两种方法都是n时间n空间， 也就是我们都创建了一个新的array返回， 也有直接在原数列做交换的方式， 正是上文提到的关于rotate类型的技巧。由于我们观察到：如果给每一个单词都reverse一遍， 最后再整个字符串reverse一遍， 可以得到相同的结果， 比如：</p><ul><li>raw： “ab bc cd”</li><li>target： “cd bc ab”<ul><li>reverse each word from raw： “ba cb dc”</li><li>reverse whole string：“cd bc ab”， same as target string.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Reverse words in string, but do it with n time, 1 space.</span></span><br><span class="line"><span class="comment">- one brilliant idea is, by reversing words first, then reverse the whole string. It has the same effect as reverse words in string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">rotate(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">' '</span> || j == s.length())&#123;</span><br><span class="line">rotate(s, i, j);</span><br><span class="line">i = j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (end - start) / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[start + i];</span><br><span class="line">s[start + i] = s[end - i - <span class="number">1</span>];</span><br><span class="line">s[end - i - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="More"><a href="#More" class="headerlink" title="More"></a>More</h3><p>类似的还有刚刚提及的将某数列向某方向rotate的题型， Rotate an array to the right by k steps in-place without allocating extra space. For instance, with k = 3, the array [0, 1, 2, 3, 4, 5, 6] is rotated to [4, 5, 6, 0, 1, 2, 3]. </p><p>同样可以用到reverse的技巧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">rotate(numbers, <span class="number">0</span>, numbers.length() - step);</span><br><span class="line">rotate(numbers, numbers.length() - step + <span class="number">1</span>, numbers.length());</span><br><span class="line">rotate(numbers, <span class="number">0</span>, numbers.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (end - start) / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = numbers[start + i];</span><br><span class="line">numbers[start + i] = numbers[end - i - <span class="number">1</span>];</span><br><span class="line">numbers[end - i - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h2><ul><li><a href="https://tp-iiita.quora.com/The-Two-Pointer-Algorithm" target="_blank" rel="noopener">quora-two pointer algorithm</a></li><li><a href="https://leetcode.com/" target="_blank" rel="noopener">leetcode</a></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>刚开始用Java， 其实主要还是平时写Spring Boot的时候用的比较多， 如果上述的算法有错误或者忽略了edge cases的考虑， 欢迎在评论区指出。 同时大部分问题都存在其他或许更优的解法， 欢迎一起讨论~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天和朋友讨论 Google 电面的一道题， 由此启发， 总结了下 two pointer 的使用场景， 在大部分情况下， 恰当地使用 two pointer 可以使时间复杂度保持在 O(n)， 像 online judge 里部分 medium 题经常提及的子数列类型问题， two pointer 也可以提供不错的切入角度。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="算法" scheme="http://chocoluffy.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面试总结" scheme="http://chocoluffy.com/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java" scheme="http://chocoluffy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>喜欢冬天，因为可以把寒冷归咎于天气</title>
    <link href="http://chocoluffy.com/2016/11/20/%E5%96%9C%E6%AC%A2%E5%86%AC%E5%A4%A9%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%8F%AF%E4%BB%A5%E6%8A%8A%E5%AF%92%E5%86%B7%E5%BD%92%E5%92%8E%E4%BA%8E%E5%A4%A9%E6%B0%94/"/>
    <id>http://chocoluffy.com/2016/11/20/喜欢冬天，因为可以把寒冷归咎于天气/</id>
    <published>2016-11-20T20:29:29.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>自由主义的故事，曾经是因为其经济上的优势而繁荣和扩张的。然而绝大多数的时候，这只是一小部分精英们的故事，自由和权利或许都只会是上层阶级的财产和特权。可悲的是，人们没有其他选择。选择trump，是不想听见一个一直听腻的故事，是对遥远的精英们仅剩的嘲讽罢了。</p><a id="more"></a><h2 id="11-11"><a href="#11-11" class="headerlink" title="11.11"></a>11.11</h2><h3 id="告别"><a href="#告别" class="headerlink" title="告别"></a>告别</h3><p>今天和最亲最尊敬的小老板告别，还好是冬天，可以把难受和不舍归咎给天气。 这是一个流行离开的世界，但是我们都不擅长告别。 祝愿你一切都好。</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f9z8nk1m0fj31kw23ue81.jpg" style="display: block; margin: 0 auto;"><br>(这是小老板家里面的一幅挂饰，写得好好啊，好喜欢~)</p><h2 id="11-10"><a href="#11-10" class="headerlink" title="11.10"></a>11.10</h2><h3 id="unfamiliarity"><a href="#unfamiliarity" class="headerlink" title="unfamiliarity"></a>unfamiliarity</h3><p>真的，技术进步这种东西，真的很少有aha moment，或者突然一下子的飞跃，感觉就是不断了解和深入之后的熟悉和融会贯通罢了。 突然想起来之前看一次react europe conferrence的视频，里面的主讲人之一pitt hunt好像是，提到过这么一句话，“don’t equal unfamiliarity to difficulty”，很多时候，你觉得它intimidating，仅仅是因为你站得比较远罢了。 突然适用的，还有崇拜和美感，世界上哪有什么男神女神的，哪只是因为你还不了解他或者她，甚至不愿意去了解，真正走近之后，真正让人牵挂的，也不再是她的光环。</p><p>自己每天的零碎时间都拿来看文章和博客，真的很有用！真的真的，要坚持下去哦！</p><p>愿每一次的打磨者，都只会是自己。</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1f9z8o07uuij30go0gngml.jpg" style="display: block; margin: 0 auto;"></p><h2 id="11-09"><a href="#11-09" class="headerlink" title="11.09"></a>11.09</h2><h3 id="看书"><a href="#看书" class="headerlink" title="看书"></a>看书</h3><p>亚马逊的购物车里放了好几本特别想看的书，圣诞回去一定要买回来! 朱天文! 朱天文! 好喜欢看散文，没有长篇小说的负担，轻轻松松地，就像旁听一段对话或者独白。 温柔的力量，曾经看到新世相里描绘的，是轻轻拂过不用力的打扰。</p><p>也不知道为什么那么钟爱散文，就是那种如果几周不看些令自己满意的文字就会不舒服的毛病吧，也生怕自己再也写不出平静而诚挚的感觉了。 总是觉得，文学的这类朦胧和理学的逻辑思辨是有冲突的，就好像是距离带来的美感，是不审视带来的真实感一样，太多的想象力，轻轻一戳，就是荒谬。可尽管如此，我还是习惯性地想要体会言语间的柔软，像是一场逃离，想要能够轻轻对生活卖个萌的浪漫。</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f9z8q8rskdj30dx0go40n.jpg" style="display: block; margin: 0 auto;"></p><h3 id="关于冬天"><a href="#关于冬天" class="headerlink" title="关于冬天"></a>关于冬天</h3><p>地铁里突然想起来，写下的一段话：</p><p>喜欢冬天的理由之一，是拥有一对仿佛可以塞下全世界的衣兜，喜欢那种随手一掏，就可以拿起笔记本的日子~</p><p>不喜欢冬天的理由之一，也源自一场轻描淡写的忧伤，看到一段字，“喜欢冬天，因为可以把寒冷归咎于天气。”</p><p>今天终于下定决心要开始写日记了! 最后有个周报或者月报什么的~ 给自己定下了一个死死的目标，“写博客，写项目和健身，每天三样能完成两样就已经很不错了呢”。也是受byvoid大神和小土刀师兄的启发。</p><h3 id="总统选举"><a href="#总统选举" class="headerlink" title="总统选举"></a>总统选举</h3><p>今天也是美国总统选举结果公布的第一天。 各个媒体渠道都在铺天盖地的报道，我所选择的我认为阐释得比较周全得文章有以下两篇，摘抄在这里学习学习：</p><h3 id="关键词－民粹主义和民主主义，"><a href="#关键词－民粹主义和民主主义，" class="headerlink" title="关键词－民粹主义和民主主义，"></a>关键词－民粹主义和民主主义，</h3><p>来自<a href="http://mp.weixin.qq.com/s?__biz=MzA4MjcxMDEwNQ==&amp;mid=2686252468&amp;idx=1&amp;sn=6fb3b2e145e4d8ec000df00a6401796a&amp;chksm=ba69ce828d1e47940f52ddce33eb85b570f0e2594d434b3b607ba9c5afaddb7676faaeda213e&amp;mpshare=1&amp;scene=2&amp;srcid=1107R9tLwL2xTllBCcyAXdAc&amp;from=timeline&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="noopener">刘瑜：如何看待美国大选中的川普现象——论美国政治中的民粹主义</a>。</p><p>一个趋势是：没有政治家自称是“民粹主义”者，但是几乎人人都在给异己者贴上民粹主义标签。难道“我同意的民意”就是民主政治，“我不同意的民意”就是民粹政治？</p><p>本质上，自由式民主依赖精英主义和平民主义之间的平衡，而民粹政治信奉平民主义对精英主义的压倒性胜利。</p><p>民粹主义往往需要一种“人格化的力量”去唤起和表达。由于对“精英建制”（elite establishment）的敌视，民粹主义往往需要一个“孤胆英雄”式的人物去树立一个“反叛”的旗帜。无论是查韦斯、普京、埃尔多安、穆加贝，或美国的川普或桑德斯，都试图树立自己“孤胆英雄”的形象。因此，民粹主义的一个特点是其政治的“个人色彩”很强，这与民主政治的“机构色彩”形成鲜明对比。</p><p>因此，民粹政治的现实展开形式，常常是政治强人利用底层民众联手夹击社会中间层，而自由式民主固然具有精英主义色彩，但由于精英本身的多元性与分散性，却更能抵御威权主义的侵蚀。</p><p>但与此同时，对于民主主义来说，正因为美国政治的多元主义和精英主义成分，它也招致了许多人对美国“虚伪民主”的批评。《民主的反讽》一书认为，精英主义是美国民主得以良好运行和延续的“秘密”，而这正是美国民主的反讽之处。作者指出，由于精英往往比大众在政治上更加宽容，如果美国的政治体制镜像式地反映最主流的民意，而不是“掺入”了很多精英的理念，那么自由式民主或许早就不复存在了。</p><p>经济学家Caplan也指出，如果美国的底层民众投票率和中上层一样高（事实是前者低得多），那么美国的经济政策会“不理性得多”。换言之，尽管自由式民主的实践放大了精英的影响力，但是它增加了美国政治的理性程度，而这种理性是美国政治得以健康运行的“秘密”。</p><h3 id="关键词－自由主义的故事"><a href="#关键词－自由主义的故事" class="headerlink" title="关键词－自由主义的故事"></a>关键词－自由主义的故事</h3><p>强烈推荐这一篇，来自<a href="http://mp.weixin.qq.com/s?__biz=MzA4MTM5NTYzMA==&amp;mid=2659494084&amp;idx=1&amp;sn=051f4dad152486be3799e8b69c50b1a2&amp;chksm=84e5a205b3922b13c9b1e725a155c1e9ad4df4384709ccfb7b016bfae89a191cdce8a0995282&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">《人类简史》作者分析特朗普崛起：自由主义终结了么？</a>。</p><p>故事是人类思考问题的中心，而非事实、数字或者表格，故事越简单越好。<strong>对这个过去几十年在我们的世界处于统领位置的故事，我们可以称之为“自由主义的故事”。</strong></p><p>但是，自2008年全球金融危机始，人们开始不再相信这个故事的主线。在20世纪90年代和21世纪的第一个10年里，人们相信遵守游戏规则可以让他们的地位上升以及变得富裕；2008年以后，他们突然开始害怕自己被欺骗，害怕这个系统并非对他们有利。<strong>阿拉伯之春变成了“伊斯兰之冬”；莫斯科、安卡拉、耶路撒冷的威权政府一点点放弃了自由民主的价值观，转而拥护民族沙文主义和宗教极端主义；甚至生活在自由主义占据主流位置的西欧国家的人们都开始有了悔意</strong>。如今，这股幻灭的浪潮正在涌向美国，而正是美国将这个“自由主义的故事”推行到了美国之外的许多地方，有时还是拿着枪推行。几十年来，那么多的承诺和保证令美国公民感到失望，幻想破灭后的他们可能会把特朗普选为总统，美国的精英们对此感到又惊又怕。</p><p>有关人们对“自由主义的故事”失去信心的另一种解释是，比较起过去的成就，人们更关心他们对未来的期望。</p><p>普通选民可能不理解人工智能，但他们能感觉到民主机制已经不再能够赋予他们权力。<strong>事实上，关乎普通选民和他们的孩子未来的最重要选择可能不是由欧盟的某些官僚或者华盛顿的某些游说团体做出的，而是由工程师、企业家和科学家做出的，而这些工程师、企业家和科学家并不会意识到自己所做的决定会带来怎样的影响，他们自然也不代表任何人。</strong>选民们看不到他们，也无法对他们喊话，所以他们只能猛烈抨击他们所能抨击的。英国的选民们想象自己的权力可能转移到了欧盟手上，所以他们投票支持英国脱欧。美国的选民们想象“权势集团”垄断了所有权力，所以他们决心给这个系统予以狠狠一击，以此来证明他们仍然有发言权。特朗普因而成了他们眼中下一届美国总统的最佳人选。<strong>正是因为选特朗普做美国总统令主流精英感到匪夷所思，这件事情才能成为普通选民证明自己仍然保留了一些权力的理想方式。</strong></p><p>事实证明，“自由主义的故事”在灵活性和发展变化上远远超过了它的任何一个对手。它战胜了传统的帝国，战胜了法西斯主义和共产主义，原因是因为它采用了自己对手的一些最好的想法和做法（比如政府出钱发展服务于民众的教育、医疗和福利事业）。</p><p>在社会主义者看来，为个人做自己喜欢做的事情的权利辩护便是在维护中产阶级和上层阶级的财产和特权。你是拥有居住自由，可你支付不起房租；是有学习自己感兴趣的学科的自由，可是你交不起学费；你有去你想去的地方旅行的自由，可是你买不起车；在这些时候，自由对你又有什么价值？更糟的是，自由主义鼓励人们将自己视为一个个个体，因而造成了人与人之间的分离，如此一来，人们便无法联合起来反对压迫他们的制度，不平等现象因此得以延续下去。</p><p>一旦人工智能在大多数认知作业上的表现优于人类，那个时候的就业市场会成为什么样子？一个由数量非常巨大、在经济上“没有用”的人所组成的新阶层会在政治上产生怎样的影响？等到纳米技术和再生医学可以延长人们的寿命——让八十岁的年纪相当于之前的五十岁，人们的关系、家庭还有养老基金到时候会受到什么影响？当生物技术发展到我们能够“设计”婴儿的水平——贫富之间的差距也会因此变得更大，人类社会会变成什么样子？对于上面这些问题，你不太可能在《圣经》或《古兰经》里找到答案。<strong>在这个被技术和经济风暴席卷的世界，激进的伊斯兰教，正统的犹太教或者基要派基督教可能会向信众许诺，他们会获得能够给他们带来确定性的船锚；然而，在这场即将到来的21世纪大海啸中，要保证不迷失方向，你还需要一张好地图，还要有结实的船舵。</strong></p><p>如“让美国再次强大”或者“把我们的国家还给我们”这一类口号的情况也一样：你可以建起一座墙来防止墨西哥非法移民进入美国，但是你没法建起一座墙把全球变暖挡在国门之外；你可以让英国脱离欧盟，但是你无法让伦敦脱离全球金融体系。<strong>如果人们不顾一切地抓住已经过时的民族和宗教身份不放，那么在气候变化、经济危机和技术带来的颠覆性影响面前，全球体系只会土崩瓦解；而19世纪的民族主义神话和中世纪的虔诚既不能理解这些问题，也没有能力解决它们。</strong></p><p>因此，<strong>当英国脱欧、特朗普崛起这样的事情发生时，主流精英们只能一脸惊恐地看着，然后希望大众会幡然悔悟，及时回到自由主义阵营里来，从而避免灾难的降临。</strong>但是，“自由主义的故事”要想从当前这场信任危机中存活下来可能会很困难，因为长期以来支撑着这个故事的根基可能已经在崩塌之中，这个根基便是：自由主义伦理和资本主义经济之间传统上的联合。在20世纪里，“自由主义的故事”非常具有吸引力，因为它告诉人们，也告诉政府，他们不用在“做正确的事”和“做精明的事情”之间做选择；保护人类的自由既是一种道义责任，也对经济的增长至关重要。英国、法国和美国之所以会蓬勃发展，据称是因为它们放宽了对经济和社会的限制，如果土耳其、巴西或者中国也想变得和英、法、美一样繁盛，它们也必须效仿这三个国家的做法。<strong>在大多数情况下，让暴君们和军政府决定实施自由化政策的不是道德上的理由，而是经济上的。</strong></p><p>然而，<strong>到了21世纪，对于我们所面临的两个最大挑战：全球变暖和技术发展带来的颠覆作用，“自由主义的故事”并不能提供很好的解决方案。</strong>随着人们的经济上的重要地位逐步被算法和机器人所取代，也许保护人类自由在道义上仍然具有正当性，可是光有道义上的理由就足够了吗？当重视每个人的自由和愿望不再能带来经济收益时，各国的精英们和政府还会对之继续重视吗？人们对自己的未来感到忧惧并没有错。即使特朗普输掉了即将到来的大选，数以百万计的美国人仍会有一种直觉：这个制度不再对他们有利，而且他们可能是正确的。</p><p><strong>自由主义曾经很繁荣的原因是一是主要因为经济上的因素，但我们所面临的挑战却不一样了。</strong></p><p>到那个时候，算法将拥有权威，人类则将失去权威。</p><hr><p>像这类新闻观点类带有时效性的好文章，以及文学类的文章还是很适合以这种评论的方式记录下来的~</p><p>自由主义的故事，曾经是因为其经济上的优势而繁荣和扩张的。然而绝大多数的时候，这只是一小部分精英们的故事，自由和权利或许都只会是上层阶级的财产和特权。可悲的是，人们没有其他选择。选择trump，是不想听见一个一直听腻的故事，是对遥远的精英们仅剩的嘲讽罢了。</p><h2 id="10-12"><a href="#10-12" class="headerlink" title="10.12"></a>10.12</h2><h3 id="开源产品"><a href="#开源产品" class="headerlink" title="开源产品"></a>开源产品</h3><p>V2上分享的开源代替sticker的软件，用来桌面端记录todo，用react + electron写的。 piece。</p><p>“只愿每一次的打磨者都只会是自己。”</p><p>在v2ex上遇见了很棒的人，有piece的作者，设计带给人的力量是绝对绝对不能忽略的，降低了你尝试的门槛，很多时候，你的生活里会多出另外的一些可能，有daza.io的作者，完成了类似即刻稀土的全栈开发后独自旅行，</p><p>“有时候，不懂如何书写自己的人生，是因为没有主动观察过这个世界。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自由主义的故事，曾经是因为其经济上的优势而繁荣和扩张的。然而绝大多数的时候，这只是一小部分精英们的故事，自由和权利或许都只会是上层阶级的财产和特权。可悲的是，人们没有其他选择。选择trump，是不想听见一个一直听腻的故事，是对遥远的精英们仅剩的嘲讽罢了。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="社会人物" scheme="http://chocoluffy.com/tags/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E7%89%A9/"/>
    
      <category term="月总结" scheme="http://chocoluffy.com/tags/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Computer Vision - 基于图片特征匹配合成全景图</title>
    <link href="http://chocoluffy.com/2016/11/07/Computer-Vision-%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D%E5%90%88%E6%88%90%E5%85%A8%E6%99%AF%E5%9B%BE/"/>
    <id>http://chocoluffy.com/2016/11/07/Computer-Vision-基于图片特征匹配合成全景图/</id>
    <published>2016-11-08T01:56:36.000Z</published>
    <updated>2018-03-09T21:55:16.426Z</updated>
    
    <content type="html"><![CDATA[<p>这一次尝试解决的问题是: 假如你希望有一幅风景的全景图(panaroma)，但是你手头上只有一堆关于该风景不同角度的图片， 怎么利用computer vision学习到的方法来合成一张全景图。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这学期虽然在公司实习， 但同时我也在学校part time了一门computer vision的课程。Computer Vision，说白了就是结合image recognition和machine learning的方法来训练机器能够识别和”理解”图片等媒体资源， 也算是一个特别新兴的研究领域。 正巧大项目开始前期， 我也准备在博客里总结一下前几次作业里面涉及的概念， 感觉特别有趣和实用呢~</p><p>这一次尝试解决的问题是: 假如你希望有一幅风景的全景图(panaroma)，但是你手头上只有一堆关于该风景不同角度的图片， 怎么利用computer vision学习到的方法来合成一张全景图。</p><p>比如一个简单的例子， 家里的游泳池的照片你刚好有两张不同角度的图片(如下图), 通过计算两张图片中的feature points(特征点)并且进行匹配，得到相应空间转换的矩阵(homography)， 借此可以将不同的图片映射到同一个景观上进行叠加(stitching)， 来获取更全面的视角。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f9k6ilaabuj30hg0eo76b.jpg" style="display: block; margin: 0 auto;"></p><p>在全景图中的应用如下图:</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f9k6mj1jw6j30qa0h0jv5.jpg" style="display: block; margin: 0 auto;"></p><p>这也是这篇博文希望最后完成的目标。</p><h2 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h2><h3 id="特征点提取"><a href="#特征点提取" class="headerlink" title="特征点提取"></a>特征点提取</h3><p>Image features是描述一张图像的重要特征之一。 很多情况下我们分辨不同的图片的直觉之一是利用边缘的分布和形状， 也是一开始利用edge detection来处理图像的缘由， 通过把image当作一个$m*n$的矩阵， 其中每个元素为灰度图片的pixel intensity， 利用filter(box, haar)等等来简化对相邻元素的求导过程， 来得出pixel intensity上的变化速度， 大多数情况下假设边界往往意味着pixel intensity的剧烈变化， 那么将处理后数值高的来进行local maximum suppression之后可能大致得到边界点。由此而来的应用是corner detection， 比如最典型的harris corner detection。通过边角(corner)来帮助识别图片。</p><p>利用corner来作为图片特征是一个初步的可实现的想法， 然后有一些固有的缺点， 比如尽管corner detection是rotation invariant的， 但是不scale invariant， 这意味着， 一张被放大过的图片， 之前曾经被识别为corner的点， 在新图片中就不被识别出来了。 原理如图：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f9kfaxk3qqj311q0q4abj.jpg" style="display: block; margin: 0 auto;"></p><p>我们希望找到一些图片的特征， 这些特征不受旋转的干扰(rotation invariant)， 而且也不受放大缩小处理的干扰(scale invariant)。而这个也是SIFT(scale-invariant feature transform)算法所要解决的问题， 这也是这次全景组合的应用中我所用到的选取特征点的方式。 </p><p>大致的介绍下<a href="https://en.wikipedia.org/wiki/Scale-invariant_feature_transform" target="_blank" rel="noopener">SIFT</a>， 原理是利用Laplacian of Gaussian函数能够detect blob区域的特点， 根据不同的Gaussian sigma $\sigma$ 我们可以匹配到不同scale程度上的区域极值，而作者Lowe等人利用Difference of Guassian来替代具有相似函数属性的Laplacian of Gaussian， 从而提高计算速率(因为DoG是seperable的)， 通过这些处理， 可以得到在不同的locational and spatial都存在的local maximum， 也是我们所希望的到的特征点。</p><p>同时Lowe提出了将特征点描绘为一个向量的方式， 通过在其pixel区域附近的$16<em>16$的格间中， 收集每个$4</em>4$区域内关于image gradient的major magnitutude and orientation的信息形成一个histogram表， 大致分为8个bin, 从而得到的$4<em>4</em>8 = 128$维的向量作为该特征点的特征向量。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 利用开源的matlab library vl_sift 来完成特征向量的获取</span></span><br><span class="line">I = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">[f,d] = vl_sift(single(I)) ;</span><br></pre></td></tr></table></figure><h3 id="特征点的匹配"><a href="#特征点的匹配" class="headerlink" title="特征点的匹配"></a>特征点的匹配</h3><p>在对应每一张图片分别经过SIFT等算法进行处理， 得到特征点和特征向量之后， 我们需要将这些特征点对应起来。 换句话说， 如果两张图片有特别多的相似的特征点， 我们可以以很大的机率说它们在描述同一个东西。 </p><p>而匹配特征向量的方法也很原始， 就是计算向量之间的距离， 如果在Eludiean distance上离得比较近的点， 我们认为可能比较相似。 同时为了降低误判的纪律， 我们还希望最接近的那个距离， 相比第二个接近的距离要小很多。 通过两个数值的比小于某个threshold可以来达到这个效果。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 同样利用vl_sift自带的matching函数， 来比较两张图片中特征向量的匹配</span></span><br><span class="line">I = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">II = imread(<span class="string">'hotel/hotel-01.png'</span>);</span><br><span class="line">[f,d] = vl_sift(single(I)) ; </span><br><span class="line">[ff,dd] = vl_sift(single(II)) ;</span><br><span class="line">[matches, scores] = vl_ubcmatch(d, dd, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>大致的结果如图：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f9kg47w4mxj31em0jejyn.jpg" style="display: block; margin: 0 auto;"></p><h3 id="空间转换矩阵"><a href="#空间转换矩阵" class="headerlink" title="空间转换矩阵"></a>空间转换矩阵</h3><p>具体的分析将会在另一篇博文中仔细讨论， 大致的原理是， 利用得到的feature match， 我们可以近似得到图片经过的转换， 然后用矩阵来表示。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 通过计算homography矩阵， 将00中的特征点map到新的01图中</span></span><br><span class="line">clear;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line">I = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">II = imread(<span class="string">'hotel/hotel-01.png'</span>);</span><br><span class="line">[f,d] = vl_sift(single(I)) ; </span><br><span class="line">[ff,dd] = vl_sift(single(II)) ;</span><br><span class="line">[matches, scores] = vl_ubcmatch(d, dd, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">[~, matchid] = sort(scores);</span><br><span class="line"></span><br><span class="line">matchid = matchid(<span class="number">1</span>, <span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">matches = matches(:, matchid);</span><br><span class="line">bestMatches = matches;</span><br><span class="line"></span><br><span class="line"><span class="comment">% these are matches.</span></span><br><span class="line">pSrc = f(<span class="number">1</span>:<span class="number">2</span>, bestMatches(<span class="number">1</span>, :));</span><br><span class="line">pTgt = ff(<span class="number">1</span>:<span class="number">2</span>, bestMatches(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">combs = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]; <span class="comment">% Use top 4 matches.</span></span><br><span class="line">bestMatchesID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">A = <span class="built_in">zeros</span>(<span class="number">8</span>, <span class="number">9</span>); <span class="comment">% since for four matches, we have 8 rows.</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">xi = pSrc(<span class="number">1</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line">yi = pSrc(<span class="number">2</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line">xiprime = pTgt(<span class="number">1</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line">yiprime = pTgt(<span class="number">2</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line"></span><br><span class="line">row1 = [xi yi <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> -(xiprime*xi) -(xiprime*yi) -xiprime];</span><br><span class="line">row2 = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> xi yi <span class="number">1</span> -(yiprime*xi) -(yiprime*yi) -yiprime];</span><br><span class="line">A((<span class="number">2</span>*<span class="built_in">i</span><span class="number">-1</span>):(<span class="number">2</span>*<span class="built_in">i</span>), :) = [row1; row2];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">[V,D] = eig(A'*A);</span><br><span class="line">h = <span class="built_in">reshape</span>(V(:, <span class="number">1</span>), <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X_hom=h'*[pSrc;ones(<span class="number">1</span>,size(pSrc, <span class="number">2</span>))];  <span class="comment">% be careful, Matlab has the matrix transposed</span></span><br><span class="line">X_hom=X_hom./<span class="built_in">repmat</span>(X_hom(<span class="number">3</span>,:),[<span class="number">3</span>,<span class="number">1</span>]);</span><br><span class="line">match_plot(I, II, pSrc', X_hom');</span><br></pre></td></tr></table></figure><p>上面这段代码可以得到如下的结果， 其中我用到了<code>match_plot</code>这个函数<a href="https://www.mathworks.com/matlabcentral/fileexchange/31144-match-plot" target="_blank" rel="noopener">here</a>来实现更好的可视化效果， 也就是把这些点给连线起来。可以看到的是， 这些点经过mapping之后仍然可以指向相同的位置， 尽管两张是完全不同的图片。 这个也是我们实现全景图的一个基础。</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f9kg7usla1j30vs0c70y2.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww3.sinaimg.cn/large/006y8lVagw1f9fvb3funyj30vs0c7wk6.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f9fvbfrdxjj30vs0c7n2k.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww3.sinaimg.cn/large/006y8lVagw1f9fvbmsvkqj30vs0c77aj.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww4.sinaimg.cn/large/006y8lVagw1f9fvbs1gxuj30vs0c7dmk.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f9fvbzq4w6j30vs0c7wkq.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f9fvc7r1moj30vs0c7wk4.jpg" style="display: block; margin: 0 auto;"></p><p>如果假设每个图片都是一个矩形，我们希望将这些举行在空间中叠加起来： </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 其中compute_homography是上述得到homography矩阵的算法</span></span><br><span class="line">clear;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line">I = imread(<span class="string">'hotel/hotel-06.png'</span>);</span><br><span class="line">II = imread(<span class="string">'hotel/hotel-07.png'</span>);</span><br><span class="line">[f,d] = vl_sift(single(I)) ; </span><br><span class="line">[ff,dd] = vl_sift(single(II)) ;</span><br><span class="line">[matches, scores] = vl_ubcmatch(d, dd, <span class="number">40</span>);</span><br><span class="line">[~, id] = sort(scores);</span><br><span class="line">bestMatches = matches(:, id);</span><br><span class="line"></span><br><span class="line">h0001 = compute_homography(<span class="number">0</span>, <span class="number">1</span>, <span class="number">140</span>);</span><br><span class="line">h0102 = compute_homography(<span class="number">1</span>, <span class="number">2</span>, <span class="number">99</span>);</span><br><span class="line">h0203 = compute_homography(<span class="number">2</span>, <span class="number">3</span>, <span class="number">30</span>);</span><br><span class="line">h0403 = compute_homography(<span class="number">4</span>, <span class="number">3</span>, <span class="number">140</span>);</span><br><span class="line">h0504 = compute_homography(<span class="number">5</span>, <span class="number">4</span>, <span class="number">204.7</span>);</span><br><span class="line">h0605 = compute_homography(<span class="number">6</span>, <span class="number">5</span>, <span class="number">140</span>);</span><br><span class="line">h0706 = compute_homography(<span class="number">7</span>, <span class="number">6</span>, <span class="number">160</span>);</span><br><span class="line"></span><br><span class="line">I00 = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">I01 = imread(<span class="string">'hotel/hotel-01.png'</span>);</span><br><span class="line">[imgh, imgw, ~] = <span class="built_in">size</span>(I00);</span><br><span class="line"></span><br><span class="line">x = [<span class="number">0</span> <span class="number">0</span> imgw imgw];</span><br><span class="line">y = [<span class="number">0</span> imgh imgh <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">I03 = [x;y];</span><br><span class="line">I02Proj = projective_transform(h0203, x, y);</span><br><span class="line"></span><br><span class="line">I01Proj = projective_transform(h0102, x, y);</span><br><span class="line">I01Proj = projective_transform(h0203, I01Proj(<span class="number">1</span>, :), I01Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I00Proj = projective_transform(h0001, x, y);</span><br><span class="line">I00Proj = projective_transform(h0102, I00Proj(<span class="number">1</span>, :), I00Proj(<span class="number">2</span>, :));</span><br><span class="line">I00Proj = projective_transform(h0203, I00Proj(<span class="number">1</span>, :), I00Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I04Proj = projective_transform(h0403, x, y);</span><br><span class="line"></span><br><span class="line">I05Proj = projective_transform(h0504, x, y);</span><br><span class="line">I05Proj = projective_transform(h0403, I05Proj(<span class="number">1</span>, :), I05Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I06Proj = projective_transform(h0605, x, y);</span><br><span class="line">I06Proj = projective_transform(h0504, I06Proj(<span class="number">1</span>, :), I06Proj(<span class="number">2</span>, :));</span><br><span class="line">I06Proj = projective_transform(h0403, I06Proj(<span class="number">1</span>, :), I06Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I07Proj = projective_transform(h0706, x, y);</span><br><span class="line">I07Proj = projective_transform(h0605, I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :));</span><br><span class="line">I07Proj = projective_transform(h0504, I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :));</span><br><span class="line">I07Proj = projective_transform(h0403, I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">figure;fill(x, y, <span class="string">'r'</span>);hold on;</span><br><span class="line">fill(I02Proj(<span class="number">1</span>, :), I02Proj(<span class="number">2</span>, :), <span class="string">'g'</span>);</span><br><span class="line">fill(I01Proj(<span class="number">1</span>, :), I01Proj(<span class="number">2</span>, :), <span class="string">'b'</span>);</span><br><span class="line">fill(I00Proj(<span class="number">1</span>, :), I00Proj(<span class="number">2</span>, :), <span class="string">'y'</span>);</span><br><span class="line">fill(I04Proj(<span class="number">1</span>, :), I04Proj(<span class="number">2</span>, :), <span class="string">'k'</span>);</span><br><span class="line">fill(I05Proj(<span class="number">1</span>, :), I05Proj(<span class="number">2</span>, :), <span class="string">'w'</span>);</span><br><span class="line">fill(I06Proj(<span class="number">1</span>, :), I06Proj(<span class="number">2</span>, :), <span class="string">'c'</span>);</span><br><span class="line">fill(I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :), <span class="string">'m'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% projective_transform.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proj</span> = <span class="title">projective_transform</span><span class="params">(h, x, y)</span></span></span><br><span class="line">proj = h'*[[x;y];<span class="built_in">ones</span>(<span class="number">1</span>,<span class="built_in">size</span>([x;y], <span class="number">2</span>))];  <span class="comment">% be careful, Matlab has the matrix transposed</span></span><br><span class="line">proj=proj./<span class="built_in">repmat</span>(proj(<span class="number">3</span>,:),[<span class="number">3</span>,<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以得到如下图所示的空间合集：</p><p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f9fvop5ss7j30fk0bot9k.jpg" style="display: block; margin: 0 auto;"></p><p>最后将所有图片的pixel都map过去， 再稍微blend一下就可以得到完整的全景图了：</p><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f9fvst75ufj30zr0dq0ut.jpg" style="display: block; margin: 0 auto;"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>博文中部分图片示例来自课程slides <a href="http://www.teach.cs.toronto.edu/~csc420h/fall/slides/lecture9.pdf" target="_blank" rel="noopener">homography lecture slides</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一次尝试解决的问题是: 假如你希望有一幅风景的全景图(panaroma)，但是你手头上只有一堆关于该风景不同角度的图片， 怎么利用computer vision学习到的方法来合成一张全景图。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="machine learning" scheme="http://chocoluffy.com/tags/machine-learning/"/>
    
      <category term="computer vision" scheme="http://chocoluffy.com/tags/computer-vision/"/>
    
      <category term="matlab" scheme="http://chocoluffy.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>社团日记2 新生致辞</title>
    <link href="http://chocoluffy.com/2016/10/06/%E7%A4%BE%E5%9B%A2%E6%97%A5%E8%AE%B02-%E6%96%B0%E7%94%9F%E8%87%B4%E8%BE%9E/"/>
    <id>http://chocoluffy.com/2016/10/06/社团日记2-新生致辞/</id>
    <published>2016-10-07T01:09:06.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>为什么我选择计算机。 因为它给了我自由。 和文字一样， 甚至更流行的自由。</p><a id="more"></a><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f8jfpjll14j20j60ao3z8.jpg" style="display: block; margin: 0 auto;"></p><p>两周前的那个周末面试了好多小伙伴。 有来自工程系正在实习着的， 有研究生搞计算机系统的， 有一个穿着印有Amazon logo衣服的， 还有一个中文说得很溜的外国朋友。人来来往往。</p><p>作为技术部门的负责人， 在新生大会上也将有一段致辞。 说来也好玩， 给新生们准备的一段话， 自己准备的时候却也常常反问自己新生时的那段过往， 想起自己第一次接触计算机， 第一次参加hacker meeting的等等等等…</p><p>以下是当时准备时的摘要：</p><h3 id="新生致辞"><a href="#新生致辞" class="headerlink" title="新生致辞"></a>新生致辞</h3><p>这一段时间主要在忙招新、面试。 一直就会在想， 这到底是一个怎么样的社团， 我们想招进来什么样的人， 一个特别庞大的感觉其他社团都不太注重的tech部门， 究竟是干什么的， 为什么我要加入？</p><p>把我们精雕细琢的作品， 无论是程序还是海报， 分享出去。 哪怕是他们对我们的作品有异议， 但我们至少给生活的细节提供了观点。</p><p>特别印象深刻的是， “为什么加入ada“， 很多人的回答是， ”因为我曾经被UT助手的某些文章， 某些功能帮助过。”</p><p>我们特别珍惜这种感觉。</p><p>能够将自己的想法实现出来的自由。</p><p>这感觉是一个特别难回答的问题， 就好像你去问一个人， 什么是喜欢跑东跑西去摄影， 抑或什么才是旅行的意义。</p><p>但可能更多时候这个问题也特别简单， 因为我喜欢啊。我用照片想纪录下生活里最美最美的瞬间去留住记忆， 我想设计出别人看两眼都要抖两下的海报~</p><p>也因为喜欢， 你也想去找那同样饱含热情、热烈的一群人。</p><p>说白了，这是一群怎么样的人， 也会吸引那样子的一群人过来。</p><p>那我们tech部门呢， 特别特别珍重的一种感觉， 其实也恨简单， 就是好玩。</p><p>分享一个我们前段时间为了帮助新生更好的认识多伦多大学设计的一个简单的网页游戏-你究竟是不是一个多大学生。点进去会看到很多很美的风景， 你需要根据图片猜到这个地点的名称。蛮多新生可能猜不到几个， 所以我们在后续的小助手文章里也详细介绍了很多各个著名地点以及贴心的建议（比如：ba哪里有热水等等）。 感谢我们的lydia\jessie\gloria给我们整理的图片。最后还有一个很萌很萌的教授。</p><p>现在如何才能玩到这个游戏呢？很简单，在UT助手输入关键词都可以匹配到这篇文章找到这个游戏链接。</p><p>那这个也是一个很好玩的功能啦， 也就是上个月吧， 我给小助手的后台添加了语义理解的功能。</p><p>说回来， 这是一个很典型的， 也是一个我蛮喜欢的游击战合作方式啦， 短短一两天内， 从社长提出这个上一次brainstorm里joyce的想法， 到技术部水水完成基本框架， 再转移给marketing部jessie添加内容素材， 再转移给技术部我和justin来设计动效和优化加载时间。 然后就有了这份几千人在微信上玩的一个游戏。很好玩吧。</p><p>第二个我一直想分享的东西， 就是我们的UT助手了， 正如大家所看到的一样， 我们给UT助手添加了很多的功能。</p><p>那ADA和UT助手， 究竟是什么一个关系？UT助手是一个独立的媒体平台， 由ADA的市场部的伙伴运营， 想让大家听见不同的声音， 看见有态度有温度的文字。 我也非常期待今年的UT助手， 因为作者费诺、冯小姐都是我特别欣赏的人。而Tech部门的主要目标之一， 也是为这个媒体平台添加工具性的功能。</p><p>自动化。</p><p>这是今年Tech部门最最主要的使命之一。</p><p>从数据来源爬虫的自动采集， 到项目与slackbot、hubot的自动储存和部署。我希望今年大部分的ADA项目都可以在某个方面接受自动化的想法。 从开发环境的设置开始， 可能每次开发网页你都是在编辑器里面保存然后跑去浏览器那边刷新等新的结果， 而同样， 或者可以尝试webpack的热加载， 页面可以随时同步到最新的状态而不必你有任何操作。很多的东西都会在后续的workshop里面分享。</p><p>这是一个试错成本很高的时代，ADA想提供给你， 在你步入残酷的商业逻辑之前， 一次尝试的机会。</p><p>这里有一群我认为非常理想主义的人。</p><p>如果要我说， 为什么我选择计算机。 因为他给了我自由。 和文字， 设计一样。它给予了你实现你想法的自由。而自由的人， 是最快乐的。</p><div class="full-image" markdown="1"><br>  <iframe src="http://chocoluffy.com/ADA2016/" width="100%" height="600px"><br>    <p>Your browser does not support iframes.</p><br>  </iframe><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么我选择计算机。 因为它给了我自由。 和文字一样， 甚至更流行的自由。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>社团日记1 重新出发</title>
    <link href="http://chocoluffy.com/2016/09/11/%E7%A4%BE%E5%9B%A2%E6%97%A5%E8%AE%B01-%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/"/>
    <id>http://chocoluffy.com/2016/09/11/社团日记1-重新出发/</id>
    <published>2016-09-11T21:07:25.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>故事的开始。</p><a id="more"></a><p>有时候觉得自己还蛮幸运的， 一年前误打误撞来了多伦多， 误打误撞地加入了一个社团， 就认识了现在的室友和绝大多数最好的朋友。 原来觉得不过是一个简单的CS开发社团， 却不知觉受到了牵绊， 一路的小伙伴慢慢多了起来， 曾经一直以为自己会单打独斗下去， 现在则深感起伙伴的意义和陪伴。 这一年， 发生了太多的事情， 宛若被卷进了一篇篇故事情节般跌宕起伏， 迎来了自己进入计算机领域的第二年， 赢来了些许成就和关注； 开启了一份为期一年的全职工作； 第一次在白板上画出技术架构； 也第一次以vice president的身份见证一个年轻社团的懵懂和交接。 想写点什么， 对得起时光， 也对得起运气。</p><p>还记得今年年初曾经读过一本国内的创业传记《途客圈》， 硅谷工程师作者陈天在这本书里记录了途客圈这家曾经星光熠熠的创业公司的发展， 成熟， 瓶颈和没落。 记得当时零零散散的技术和期权笔记， 还在其中一个段落的结尾天真地自嘲到和现在的自己还完全没有什么关系嘛， 而半年之后， 却仿佛日日夜夜和小伙伴讨论起书里似曾相识的商业情节： 创始人及其同僚退任， 一个技术社团的高层大换血， 孤立无助的公关和市场部门， 流行和高雅的定位矛盾， 接受赞助和保持独立的选择与站队……不过这一次， 是切肤的感情和泪水， 是我们自己的选择。</p><p>这是一段真实的故事。 或许无关汹涌澎湃的情节，但这却是我最真实的生活。</p><p>故事的开头， 定格到一次关于赞助广告的紧急会议。 愿意接受来自商业机构的赞助吗？</p><p>一直以来， 赞助广告都好像会触动大众敏感的神经， 作为观众，其实争议和选择并不大， 无非是偶尔可能夸张了点的标题和或者画风突变的段子， 有时候效果好的， 人们反而乐在其中自愿做起了二次传播。 但作为被赞助的一方， 这却是一个很容易被上升到自由与独立的话题。 一方面， 有人觉得失去了创作的自由与方向， 而另一面， 有人觉得有了经济来源可以支撑起更大的自由……看似相互矛盾的两个论点， 实际上都是切中了同一个问题， “到底是谁在控制着开发抑或创作的自由？”， 如果赞助方以几近收购的经济优惠来和你提出合作邀请， 对不起， 他们需要的不是你， 而是你现在拥有的市场的关注和资源， 他们有他们准备好的一全套规划和商业蓝图， 而蓝图里并没有你可以自由发挥的地方， 你可以接受合作， 但却暗含接受给他们打工的前景。 虽然现实中Facebook巨额收购的Instagram和Whatsapp都将继续保持独立经营， 但这不过是FB在对手尚未反抗时的保护性市场垄断计划罢了， 而当初没有接受FB收购提议的Snapchat倒是在其曾经的年轻人圈子里打得一片火热。 试想想， 为什么Instagram和Whatsapp的发展宛若停止， 社交功能上几近亘古不变， 毕竟这是FB母体攫取广告费的主要流量来源， 任何有阻其扩大和维持市场的举动都不会被鼓励的。</p><p>而说回到我们自己社团对待赞助的情况， 更多的是我们自己依旧控制着我们创作开发以及市场运营的自由， 我们需要赞助， 也得以计划在科技领域下举办更多更有影响力的活动， 而我们几近全部的成果， 从组织的workshop， 到开发的产品功能， 原创的公众号文章， 都是我们学生利用业余时间独立做出来的……放在这个具体的环境下， 也很难说， 接受赞助合作会在哪些方面方面改变我们原本自己的轨迹。 而当天晚上， 我们也最终一致地通过了合作的计划， 值得一提地的是， 我们的社长大人硬生生将赞助费用拉高了十几个百分点， 哈哈……</p><p>我们还是一个特别年轻的社团， 在这个阶段， 我们需要侵略性不大的经济支持。 而至于长远的计划呢， 未来的愿景里对赞助的依赖有思考过吗？</p><p>其实作为技术部门的负责人， 我一直一直都很想将来源于”湾区日报”的启发在自己的社团产品里实现。 什么是湾区日报？ 它是由一个湾区的工程师独立一个人维系的业余项目， 每天通过各大社交平台发出自己阅读收集转载的商业、技术文章， 非营利项目， 据说作者还拒绝了很多商业赞助和合作， 目前的收入主要来自于APP的功能内购和自主捐赠。 阅读并收集优秀的资源是一个很好的习惯， 而让我印象深刻的并不是作者这一坚持的习惯本身， 而是， 作为一名工程师， 将整个习惯流程自动化的地步。 利用hubot和slack将阅读文章的保存以及之后的发布自动化， 极大地降低了分享的成本， 而分享本身的快乐， 也更容易被感受和坚持下去。 也是惊人的相似， 社团旗下也运营着一个辐射到整个多伦多大学华人学生的微信公众号， 而我这一个月带领的主要项目， 也是基于公众号所积累的内容做机器学习的处理， 同时努力把内容获取， 归档， 预处理和语义分析这一部分给自动化。 </p><p>任重而道远， 不过， 自动化， 也将会是这一年， 我给社团开发定下的首要目标。 或许慢慢地， 当我们的消息获取和处理成本极大的降低之后， 我们可以在微博， Facebook上自动发布我们收集转载的有用资讯， 市场部的小伙伴们可以集中精力在原创的文章和设计上……说着说着有种BuzzFeed的即视感， 不过我们只是一群追求效率的学生罢了， 我们只想静静地做好多伦多大学助手， 然后多伦多助手？ 然后？</p><p>镜头慢慢转回来， 距离我们签下赞助合同已经过去将近一个月了， 第二场关于招新的战役也近了， 而我们也太年轻， 也才反应过来犯下了好些错误， 从大受欢迎的游戏忘记的数据统计， 到社团官网的不太明了的内容介绍， 到社团在学校的百团大战几近煮熟的电脑。 可也正是这些事过以后的些许遗憾， 反衬出那些我们一起圆满了的美好。 短时间内设计的精美游戏， 惊艳的官网和硕果累累的招新， 突然想起社长大人的一段话， “最坏的情况不过就是维持现状， 而维持现状， 也挺好的不是嘛”……</p><p>很幸运能在奔波的路上遇见最真挚的伙伴， 沿途太多风景， 想抵达太多地方， 也是你们让我看见太多的可能。 很想写下这些莫名的情绪， 哪怕是尘封在角落， 也给我未来留下去找寻的线索， 这些天， 我曾经和这样的一帮人， 一起疯过。</p><p>分享很喜欢的一句话， 摘自《小王子》的作者， 安东尼圣修伯里， “如果你想打造一艘船， 别忙着号召人马， 收集木材， 分配工作， 发号施令。 你该做的是， 激起人们对浩瀚海洋的渴望。” </p><p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f7qbwyqnsog20dc0m1u0x.gif" style="margin: 0 auto;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;故事的开始。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>用ffmpeg从视频中获取图片及GIF</title>
    <link href="http://chocoluffy.com/2016/08/27/%E7%94%A8ffmpeg%E4%BB%8E%E8%A7%86%E9%A2%91%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%8F%8AGIF/"/>
    <id>http://chocoluffy.com/2016/08/27/用ffmpeg从视频中获取图片及GIF/</id>
    <published>2016-08-27T20:37:22.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>最近的项目涉及比较多的视频和图片的处理， 发现了一个特别好用的linux library “ffmpeg”， 在其官网的介绍中可以发现的是convert\record\stream video和audio的功能， 但其实我只是利用这个工具来从视频中获取一张张单独的图片(frame)， 然后来做后续的机器学习(相似度匹配PCE， 人像识别等等)等处理。 </p><a id="more"></a><p>在项目的展示中， 我提出了来自youtube的启发， 我感觉也是最近这几周， youtube上的视频列表多了一个新功能是， 当你鼠标hover当前视频时， 静态图片会变成视频中其中的一段GIF， 然后过一段时间再变回来， 具体效果看这个动图：</p><p><img src="http://ww4.sinaimg.cn/large/7853084cgw1f78xtzb0xyg20dc08u1ky.gif" style="margin: 0 auto;"></p><p>当时上youtube就觉得用户体验好棒， 很快想到的一些问题是， youtube是随机攫取GIF的嘛， 是否这个GIF就是这个视频的重要scene， 是利用收集的社交数据和评论来预测重要性的， 还是仅仅通过比较frame出现的时长来比较……</p><p>这些都是很有趣的问题， 每一个方向展开来说都可以逐渐细分到实现的算法和数据格式。 我现在正在做的也正是我上面提到的其中一个方向哈哈， 而今天这篇博文想要探讨的， 是实现上面所有后续构想的building block， 怎样获取数据源和呈现。 ffmpeg和imagemagick这两个处理照片和视频特别方便的库也再这里介绍一下。</p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>安装ffmpeg的方式很简单， 在OSX里面<code>brew install ffmpeg</code>就可以了。同理也有<code>brew install imagemagick</code>。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>下面是各种working choice，ffmpeg强大的另外一个地方是它并不需要将整个视频都下载下来然后再进行处理， 而是可以直接read from stream。 而在整个流程最花时间的步骤其实并不是获取那个frame， 而是将frame根据一定编码保存到本地这个过程。 而后续如果有充分时间， 我也满希望可以仔细去看看ffmpeg编码的格式~</p><p>[1]<code>ffmpeg -y -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 -ss 3 -frames:v 1 frame_3.jpg</code><br>can help extract the third frame from that url.</p><p>[2]<code>ffmpeg -y -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</code><br>will output images to convert them into gif.</p><p>[3]<code>ffmpeg -t 3 -ss 00:00:02 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 middle.gif</code><br>The snippet directs ffmpeg to create a GIF 3 seconds long starting at 2 seconds into the video.</p><p>[4]Thus, simply combine the [2] and [3] can convert some specific time frames into optimized gif like this <code>ffmpeg -t 3 -ss 00:00:02 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4  -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</code></p><p>[5]ffmpeg has its own version of converting to gif. <code>ffmpeg -t 3 -ss 1 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 output.gif</code>. However, the file size is extremely large, hard to load.</p><p>For now, version [4] is the best choice.</p><p><code>-ss</code>: follows a single number means extracting that single frame from video source; follows a specific time-format means extracting from that time. </p><p><code>-t</code>: follows a number means the duration of that extraction.</p><p>我在这里只记录了几个较为常用的parameter options。更多的option可以参看<a href="https://www.ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="Dev-Environment"><a href="#Dev-Environment" class="headerlink" title="Dev Environment"></a>Dev Environment</h2><p>接下来是一段我写的示例代码， 主要还是就怎么使用ffmpeg的问题稍微说一下， 毕竟大部分Machine Learning的工作还是在python里面写， 而当我们需要在python里面获取这些frames的时候， 我们应该怎么调用ffmpeg和imagemagick呢？</p><p>这里稍微补充一点， 启示ffmpeg本身也可以convert seperate images into gif， 但是相比与imagemagick还提供了图片压缩和优化的选项， 我更倾向于使用两者的结合。</p><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><p>就使用ffmpeg这个方面本身并不需要提及virtualenv， 但是很多和ffmpeg相关的后续工作都会和很多python的scientific computing package一起合用， 而安装这些packages的过程是非常繁琐而容易出错的， 大家都习惯一上来就把这些library安装在全局， 而无论是安装过程还是未来的版本管理都是mess。</p><p>因此这里稍微提一下anaconda， 专为管理python packages而生的CLI， 为每一个项目创建一个virtualenv然后给那个项目安装不同的独立的python libraries， 用完即删。</p><p><code>conda create --name &lt;project-name&gt; python=2.7 opencv matplotlib</code>, use conda to install library dependencies. Also specify the python version and library needed to pre-install, say inside this project, we want  <code>import cv2</code>, thus we put those libraries right after the python version. Then <code>source activate &lt;project-name&gt;</code> can jump into that virtualenv.</p><h3 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h3><p>Since I will utilize “imagemagick” library to process images into gifs, by piping the results from “opencv”, most likely I will need to create a subprocess to do that. The command-line way to achieve that is <code>ffmpeg -t 3 -ss 00:00:02 -i &lt;video source&gt; -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</code>, which for example, will extract starting at 00:00:02 a 3-seconds short video from origin video and convert\optimize them into a smaller gif. In order to support multiple pipes as in command line, we use subprocess’s <code>PIPE</code> functions to concatenate those different parts.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_gif</span><span class="params">(video, t, duration, output_name)</span>:</span></span><br><span class="line">    <span class="comment"># In subprocess, save gif to local.</span></span><br><span class="line">    <span class="comment"># ffmpeg -t 3 -ss 00:00:02 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</span></span><br><span class="line">    p1 = sp.Popen([<span class="string">'ffmpeg'</span>, <span class="string">'-t'</span>, str(duration), <span class="string">'-ss'</span>, str(t), <span class="string">'-i'</span>, video, <span class="string">'-vf'</span>, <span class="string">'scale=320:-1'</span>, <span class="string">'-r'</span>, <span class="string">'10'</span>, <span class="string">'-f'</span>, <span class="string">'image2pipe'</span>, <span class="string">'-vcodec'</span>, <span class="string">'ppm'</span>, <span class="string">'-'</span>, ], stdout=sp.PIPE)</span><br><span class="line">    p2 = sp.Popen([<span class="string">'convert'</span>, <span class="string">'-delay'</span>, <span class="string">'5'</span>, <span class="string">'-loop'</span>, <span class="string">'0'</span>, <span class="string">'-'</span>, <span class="string">'gif:-'</span>], stdin=p1.stdout, stdout=sp.PIPE)</span><br><span class="line">    p1.stdout.close()</span><br><span class="line">    p3 = sp.Popen([<span class="string">'convert'</span>, <span class="string">'-layers'</span>, <span class="string">'Optimize'</span>, <span class="string">'-'</span>, output_name], stdin=p2.stdout, stdout=sp.PIPE)</span><br><span class="line">    p2.stdout.close()</span><br><span class="line"></span><br><span class="line">    output = p3.communicate()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><ul><li><a href="http://superuser.com/questions/556029/how-do-i-convert-a-video-to-gif-using-ffmpeg-with-reasonable-quality" target="_blank" rel="noopener">How to convert a video to gif using ffmpeg</a></li><li><a href="https://davidwalsh.name/convert-video-gif" target="_blank" rel="noopener">How to convert to and from between gif and video</a></li><li><a href="https://www.reddit.com/r/learnprogramming/comments/44nhzp/how_to_use_youtubedl_and_ffmpeg_to_download/" target="_blank" rel="noopener">use youtube-dl and ffmpeg to download</a></li><li><a href="http://superuser.com/questions/680323/processing-youtube-video-in-ffmpeg" target="_blank" rel="noopener">how to process youtube video without downloading it</a> main idea is to config ffmpeg with <code>libquvi</code>!!</li><li><a href="https://trac.ffmpeg.org/wiki/CompilationGuide/MacOSX" target="_blank" rel="noopener">install ffmpeg through homebrew</a> with recommending configuration options like <code>brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265</code></li><li><a href="https://www.binpress.com/tutorial/how-to-generate-video-previews-with-ffmpeg/138" target="_blank" rel="noopener">[recommend]how to generate video preview with ffmpeg</a></li><li><a href="http://www.bogotobogo.com/FFMpeg/ffmpeg_thumbnails_select_scene_iframe.php" target="_blank" rel="noopener">ffmpeg generate thumbnail from video</a> after generate the thumbnail and stitch together, here is a front end demo to over it <a href="http://jsfiddle.net/r6wz0nz6/2/" target="_blank" rel="noopener">demo</a> to see a preview.</li><li><a href="https://wideopenbokeh.com/AthenasFall/?p=5" target="_blank" rel="noopener">some tricks of using youtube-dl</a></li></ul><p>Inside <code>~/.bashrc</code>, set <code>alias youtubemp3=&#39;youtube-dl --extract-audio --audio-format mp3&#39;</code> to be able to create a alias and save a youtube video to mp3.</p><p>So basically, <code>youtube-dl -F &lt;url&gt;</code> to list all available video format, then  <code>youtube-dl -f 134 -o video.mp4 https://www.youtube.com/watch?v=v1uyQZNg2vE</code></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>处理视频和图片对我来说是一个蛮有趣的方向。 我们每天都会查询和搜索到无数多媒体信息， 而人们对信息的处理能力和标准也越来越严苛， 从简单文本到图片分享再到视频， 现在还很火的视频直播技术不是吗。 人们越来越多地被记录下来， 从曾经一生可能只去几次的影楼， 到情绪高涨时举起的自拍杆， 再到可能无时无刻都存在的直播和拍摄。</p><p>而记录本身， 就孕育着还原的渴望。</p><p>利用文字， 图片和视频， 科学家们能会如何重构一个曾经发生的世界， 而又能怎样地拿那个世界的统计和观察来预测下一个每分每秒。 深度学习和人工智能火了， 或许也是人们在尝试还原重构这个世界的一个必经之路， 很期待未来几年的科技发展啊。</p><p>很幸运以一个学生和实习生的身份慢慢进入这个殿堂。 话说回来， 每次见到那些用户体验特别好的细节总是特别喜欢然后絮絮叨叨呢哈哈~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的项目涉及比较多的视频和图片的处理， 发现了一个特别好用的linux library “ffmpeg”， 在其官网的介绍中可以发现的是convert\record\stream video和audio的功能， 但其实我只是利用这个工具来从视频中获取一张张单独的图片(frame)， 然后来做后续的机器学习(相似度匹配PCE， 人像识别等等)等处理。 &lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="machine learning" scheme="http://chocoluffy.com/tags/machine-learning/"/>
    
      <category term="用户体验" scheme="http://chocoluffy.com/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>React/ES6 style guideline</title>
    <link href="http://chocoluffy.com/2016/08/01/React-ES6-style-guideline/"/>
    <id>http://chocoluffy.com/2016/08/01/React-ES6-style-guideline/</id>
    <published>2016-08-01T20:41:46.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>用React完成了好几个小项目， 同时还在学习React Native开发， 记录一些ES6特别便捷的用法和guideline。持续更新…</p><a id="more"></a><h2 id="React-conventions"><a href="#React-conventions" class="headerlink" title="React conventions"></a>React conventions</h2><h3 id="propType-and-defaultProps"><a href="#propType-and-defaultProps" class="headerlink" title="propType and defaultProps"></a>propType and defaultProps</h3><p>使用propType不仅仅是检查props数据的格式， 也是提醒自己这个组件可以利用的来自母组件的数据， 方便以后开发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Title.jsx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.props.text &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Title.propTypes = &#123;</span><br><span class="line">  text: React.PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line">Title.defaultProps = &#123;</span><br><span class="line">  text: <span class="string">'Hello world'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Title</span> <span class="attr">text</span>=<span class="string">'Hello React'</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        &#123; <span class="keyword">this</span>.props.text &#125;</span><br><span class="line">        &#123; <span class="keyword">this</span>.props.children &#125;</span><br><span class="line">      &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Title text='Hello React'&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;community&lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="Dependency-injection"><a href="#Dependency-injection" class="headerlink" title="Dependency injection"></a>Dependency injection</h3><p>One disadvantage of using react, is that when we need to pass down data to a deeply-nested component, which requires passing props all along the way.</p><h3 id="A-simple-switcher-example"><a href="#A-simple-switcher-example" class="headerlink" title="A simple switcher example"></a>A simple switcher example</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Switcher</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">flag</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>._onButtonClick = <span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; <span class="attr">flag</span>: !<span class="keyword">this</span>.state.flag &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123; <span class="keyword">this</span>._onButtonClick &#125;&gt;</span><br><span class="line">        &#123; <span class="keyword">this</span>.state.flag ? <span class="string">'lights on'</span> : <span class="string">'lights off'</span> &#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ... and we render it</span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;Switcher /</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Data-flow"><a href="#Data-flow" class="headerlink" title="Data flow"></a>Data flow</h3><p>Basically two way of passing data down with server call. One is parent component make a server request, usually in the <code>componentDidMount</code> and <code>componentWillMount</code>, and pass down the data using props to the children components. The disadvantage of that is the verbose passing process.</p><p>Another way is allow children components to make request themselves, which is the way of GraphQL.</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="Arrow-functions"><a href="#Arrow-functions" class="headerlink" title="Arrow functions"></a>Arrow functions</h3><p>what the heck is the arrow function? <strong> Unlike functions, arrows share the same lexical this as their surrounding code.</strong></p><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Language-level support for modules for component definition. Codifies patterns from popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour defined by a host-defined default loader. Implicitly async model – no code executes until requested modules are available and processed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + math.sum(math.pi, math.pi));</span><br><span class="line"><span class="comment">// otherApp.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum, pi&#125; <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + sum(pi, pi));</span><br></pre></td></tr></table></figure><p>Some additional features include <code>export default</code> and <code>export *</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/mathplusplus.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> exp, &#123;pi, e&#125; <span class="keyword">from</span> <span class="string">"lib/mathplusplus"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"e^π = "</span> + exp(pi));</span><br></pre></td></tr></table></figure><h3 id="Deconstructing"><a href="#Deconstructing" class="headerlink" title="Deconstructing"></a>Deconstructing</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// a === 1</span></span><br><span class="line"><span class="comment">// b === 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; ui, name &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="comment">// ui === this.props.ui;</span></span><br><span class="line"><span class="comment">// name === this.props.name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">blogpost</span>: &#123; title, slug &#125; &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="comment">// title === this.props.blogpost.title;</span></span><br><span class="line"><span class="comment">// slug === this.props.blogpost.slug;</span></span><br></pre></td></tr></table></figure><h3 id="Functional-binding"><a href="#Functional-binding" class="headerlink" title="Functional binding"></a>Functional binding</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  click() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Clicked with scope'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">::this.click</span> &#125;&gt;</span>Click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Adding the function bind syntax to ::this.click converts down to this.click.bind(this), ensuring that your callbacks in a component are called with this scoped to the component.</p><h3 id="Spread-operator"><a href="#Spread-operator" class="headerlink" title="Spread operator"></a>Spread operator</h3><p>尤其在React Native的redux框架里， 我们不能在reducer里修改state， 只能每次返回一个新的object， 这时候spread syntax特别方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> postActions <span class="keyword">from</span> <span class="string">'actions/posts'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> userActions <span class="keyword">from</span> <span class="string">'actions/users'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> bindActionCreators(&#123; ...postActions, ...userActions&#125;, dispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example we create a new object containing all values from postActions and userActions in one line.</p><h2 id="React-interview-question"><a href="#React-interview-question" class="headerlink" title="React interview question"></a>React interview question</h2><p>Check more information from <a href="https://www.codementor.io/reactjs/tutorial/5-essential-reactjs-interview-questions" target="_blank" rel="noopener">this post</a>.</p><ul><li>Under what circumstances would you choose React over (AngularJS, etc)?</li><li>If React only focuses on a small part of building UI components, can you explain some pitfalls one might encounter when developing a large application?</li><li>If you were rewriting an AngularJS application in React, how much code could you expect to re-use?</li></ul><h3 id="High-Level-Component-Lifecycle"><a href="#High-Level-Component-Lifecycle" class="headerlink" title="High-Level Component Lifecycle"></a>High-Level Component Lifecycle</h3><p>At the highest level, React components have lifecycle events that fall into three general categories:</p><ul><li>Initialization</li><li>State/Property Updates</li><li>Destruction</li></ul><p>Every React component defines these events as a mechanism for managing its properties, state, and rendered output. Some of these events only happen once, others happen more frequently; understanding these three general categories should help you clearly visualize when certain logic needs to be applied.</p><p>For example, components will automatically re-render themselves any time their properties or state change. However in some cases a component might not need to update — so preventing the component from re-rendering might improve the performance of our application.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// only re-render if the ID has changed!</span></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="keyword">return</span> nextProps.id === <span class="keyword">this</span>.props.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Example-interview-coding-challenge"><a href="#Example-interview-coding-challenge" class="headerlink" title="Example interview coding challenge"></a>Example interview coding challenge</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="comment">// set the default internal state</span></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            clicks: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.myComponentDiv.addEventListener(</span><br><span class="line">            ‘click’, </span><br><span class="line">            <span class="keyword">this</span>.clickHandler</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.myComponentDiv.removeEventListener(</span><br><span class="line">            ‘click’, </span><br><span class="line">            <span class="keyword">this</span>.clickHandler</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clickHandler() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            clicks: <span class="keyword">this</span>.clicks + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> children = <span class="keyword">this</span>.props.children;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=”my-component” ref=”myComponentDiv”&gt;</span><br><span class="line">                &lt;h2&gt;My Component (&#123;<span class="keyword">this</span>.state.clicks&#125; clicks&#125;)&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h3&gt;&#123;this.props.headerText&#125;&lt;/</span>h3&gt;</span><br><span class="line">                &#123;children&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>However, there are two problems with the code above.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The constructor does not pass its props to the super class. It should include the following line:</span></span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// The event listener (when assigned via addEventListener()) is not properly scoped because ES2015 doesn’t provide autobinding. Therefore we might re-assign clickHandler in the constructor to include the correct binding to this:</span></span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">              <span class="keyword">this</span>.clickHandler = <span class="keyword">this</span>.clickHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>And in order to use this component, we can do this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent headerText=”A list <span class="keyword">of</span> paragraph tags”&gt;</span><br><span class="line">    &lt;p&gt;First child.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Any other &lt;span&gt;number&lt;/</span>span&gt; <span class="keyword">of</span> children...&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>MyComponent&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用React完成了好几个小项目， 同时还在学习React Native开发， 记录一些ES6特别便捷的用法和guideline。持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="react" scheme="http://chocoluffy.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack与react\redux前端开发工具库</title>
    <link href="http://chocoluffy.com/2016/07/18/webpack%E4%B8%8Ereact-hot-reload%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <id>http://chocoluffy.com/2016/07/18/webpack与react-hot-reload开发工具库/</id>
    <published>2016-07-19T03:28:05.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>对Dan Abramov开源的react hot loader boilplate的浅探， 同时复习一下webpack与react搭配开发时的常用配置。<a href="https://github.com/chocoluffy/react-hot-boilerplate" target="_blank" rel="noopener">Github Source</a></p><a id="more"></a><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>通常用到的plugin, 在package.json里面保存的module有： “babel-loader”\”babel-preset-es2015”\”babel-preset-react”， 使用babel-loader, 一是可以在<code>.babelrc</code>这个文件里面写出使用另外两个module的配置， 或者， 在webpack里面的loaders部分添加相应的code来实现同样的功能。其中”babel-preset-es2015”是将es6的js语法compile成es5的， 现在IE9以上及大部分的主流浏览器目前都支持ES5语法了。</p><blockquote><p>至于ES6和ES5有什么区别， 以及即将到来的ES7有什么意义， 集成了大部分的functional programming的特性， 本来可能需要引用underscore.js的函数现在可能直接就可以用了。包括spread operator, function binding(::), arrow functions, modules export， 这些都是非常便捷和广泛采用的语法呢~</p></blockquote><p>而“babel-preset-react”则是将JSX译成JS的插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [<span class="string">'./client/client.js'</span>], <span class="comment">// 将entry下的client.js最终打包成dist/bundle.js。</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// 利用正则表达式来匹配所有以.js结尾的文件， 同时排除node_modules里面的js文件。</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在express里面， 我们通常会调整前端index.html引用资源的路径为“./dist”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'./dist'</span>));</span><br></pre></td></tr></table></figure><p>这样的在index.html里面引用bundle.js就可以直接：<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code>就好了。</p><p>然后在webpack.config.js写好之后， <code>webpack --config webpack.config.js</code>可以run webpack。然后<code>nodemon server.js</code>就可以开始运行了。当然webpack也有hot reloading的功能。不用每一次都rebuild一次webpack， 而是可以在react里面看到更新component的变化。</p><h2 id="React-Hot-Reloading"><a href="#React-Hot-Reloading" class="headerlink" title="React Hot Reloading"></a>React Hot Reloading</h2><p>具体的做法是将webpack当成一个middleman来hook服务器。相比nodemon， webpack的好处就是， 它并没有restart server, nodemon是会watching整个”*”， 而webpack只是更新改变的部分。所以我们希望的是让webpack来管理关于react component的部分， 而nodemon只是来监听剩下的部分， 例：<code>nodemon server.js --ignore components</code>， 这样nodemon会忽略所有components文件夹下面的改动。</p><p>要使用hot module reload，下载一个babel的插件， 其实babel主要的功能还是在compile上， webpack的主要作用还是在project building这个过程， 然后中间有很多相关的插件是相互联系的， 比如我们现在准备使用的这个“babel-preset-react-hmre”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// updated webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">    <span class="string">'./client/client.js'</span></span><br><span class="line">    ], <span class="comment">// source file</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="built_in">require</span>(<span class="string">"path"</span>).resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// search all files with ".js" as last.</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>, <span class="string">'react-hmre'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前写的基本都是babel的插件， 现在引入了<code>npm install --save webpack</code>的插件， 同时为了避免多次执行<code>webpack --config webpack.config.js</code>，我们把webpack.config.js引入express server. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../webpack.config.js'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;<span class="attr">noInfo</span>: <span class="literal">true</span>, <span class="attr">publicPath</span>: config.output.publicPath&#125;));</span><br><span class="line">app.use(webpackHotMiddleware(compiler));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.resolve(<span class="string">'client/index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Express server listening on port"</span>, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="React-Hot-Boilerplate"><a href="#React-Hot-Boilerplate" class="headerlink" title="React Hot Boilerplate"></a>React Hot Boilerplate</h2><p>最后的成果见这里， <a href="https://github.com/chocoluffy/react-hot-boilerplate/blob/master/webpack.config.js" target="_blank" rel="noopener">minimum react hot boilerplate</a>， fork自redux的作者dan abramov。他写的react hot loader boilerplate是我看过的最好的使用starter kit!</p><p>最后还想提出的一点， 主要关于ES6里面关于函数的this binding的问题， 通常来说，ES6的arrow可以解决这个问题，或者说在每次render里面调用函数的时候加上<code>.bind(this)</code>。 但是最好的办法还是写在constructor里面， 这样的函数只会bind一次之后都可以一直用。下面附上官方的使用范例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: props.initialCount&#125;;</span><br><span class="line">    <span class="keyword">this</span>.tick = <span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.tick&#125;&gt; <span class="comment">// don't need to use arrow type or bind function here anymore since bind in contructor.</span></span><br><span class="line">        Clicks: &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123; initialCount: React.PropTypes.number &#125;;</span></span><br><span class="line"><span class="regexp">Counter.defaultProps = &#123; initialCount: 0 &#125;;</span></span><br></pre></td></tr></table></figure><p>不得不说， 这个starter kit和chrome的react dev tool搭配用起来， 写react的项目真的是一种享受。</p><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><p>在写react\redux的时候， 由于现在需要使用babel来compile一遍写的code， 很多bugs都是在于对babel的不熟悉而来而导致的编译不成功， 而这些时候， 由于没有办法像以前一样在chrome inspect来debug， 必须对一些基础的使用有一定了解才可以绕过去。特别是在引入webpack之后， 配置在前期挺麻烦的， 但是一旦把开发环境搭建好了， 后期的开发就特别轻松和享受了~也在这个部分， 把我遇到的， 和觉得有价值的细节都提出来， 和大家分享~</p><h3 id="Why-my-jsx-element-not-showing-correctly"><a href="#Why-my-jsx-element-not-showing-correctly" class="headerlink" title="Why my jsx element not showing correctly?"></a>Why my jsx element not showing correctly?</h3><p><a href="http://gunnariauvinen.com/getting-es6-syntax-highlighting-in-sublime-text/" target="_blank" rel="noopener">config sublime text to highlight jsx</a></p><h3 id="Anything-about-ES6-syntax-error-by-browser"><a href="#Anything-about-ES6-syntax-error-by-browser" class="headerlink" title="Anything about ES6 syntax error by browser."></a>Anything about ES6 syntax error by browser.</h3><p>For example, <code>store.js:1 Uncaught SyntaxError: Unexpected token import</code>, check<a href="http://stackoverflow.com/questions/33460420/babel-loader-jsx-syntaxerror-unexpected-token" target="_blank" rel="noopener">this post</a> for more information about babel plugins, however, we also need to pay attention to the path that plugins take effect. For example, in the “webpack.config.js” file, the module part looks like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">loaders: [&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel'</span>],</span><br><span class="line">  include: path.join(__dirname, <span class="string">'src'</span>)</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>It means that “react-hot” &amp;&amp; “babel” will collect files from “/src” folder and apply two loaders on it. Thus, any folder outside the path the “/src” will be ignored by loaders. In our original example, store.js is located outside “/src”, thus the <code>import</code> syntax will not be converted into es2015 that browser can recognize, thus gives such error. </p><h3 id="Pressing-“enter”-don’t-automatically-submit-the-input"><a href="#Pressing-“enter”-don’t-automatically-submit-the-input" class="headerlink" title="Pressing “enter” don’t automatically submit the input"></a>Pressing “enter” don’t automatically submit the input</h3><p>It’s more like a UX experience than a problem. In the traditional input and button structure:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input </span><br><span class="line">placeholder=<span class="string">"typing something here..."</span></span><br><span class="line">value=&#123;<span class="keyword">this</span>.state.inputText&#125;</span><br><span class="line">onChange=&#123;<span class="keyword">this</span>._onChange&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>._onClick&#125;&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></p><p>However, after user types in something in the input box, pressing “enter” key won’t directly submit the input. Thus, we want to improve it by converting it into a form style to automate whole process:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>._onClick&#125;&gt;</span><br><span class="line">&lt;input </span><br><span class="line">placeholder=<span class="string">"typing something here..."</span></span><br><span class="line">value=&#123;<span class="keyword">this</span>.state.inputText&#125;</span><br><span class="line">onChange=&#123;<span class="keyword">this</span>._onChange&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> text=<span class="string">"Submit"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure></p><p>Then, pressing “enter” key right after you finish typing should work!</p><h2 id="Tricks-and-Notes"><a href="#Tricks-and-Notes" class="headerlink" title="Tricks and Notes"></a>Tricks and Notes</h2><h3 id="Render-JSX-with-if-else-logic-control"><a href="#Render-JSX-with-if-else-logic-control" class="headerlink" title="Render JSX with if-else logic control"></a>Render JSX with if-else logic control</h3><p>Sometimes, we just want to render JSX depending on some state values like in Angular. We can simple assign JSX to variable inside <code>render()</code>, and note that we need a parathesis around JSX for assignment. This code snippet is used in <a href="https://github.com/chocoluffy/redux-todolist" target="_blank" rel="noopener">redux-todolist</a>. Do note that to avoid confusion, I still use <code>.bind(this)</code> syntax below, but I recommend to put binding logic inside <code>constructor()</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">var</span> todoText;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.props.todo.isCompleted)&#123;</span><br><span class="line">todoText = (</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">s</span>&gt;</span>&#123;this.props.todo.text&#125;<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">todoText = (</span><br><span class="line">&lt;div&gt;&#123;<span class="keyword">this</span>.props.todo.text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;li&gt;</span></span><br><span class="line"><span class="regexp">&#123;todoText&#125;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this._onComplete.bind(this)&#125; &gt;Complete&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Some other times, in order to keep render function clean, we will move the render logic into another function to return JSX syntax and call that function inside <code>render()</code>, note that we don’t need the <code>.bind(this)</code> syntax in this case! Because, the whole reason of using <code>.bind(this)</code> is that inside the _onClick handler function, the <code>this</code> will points to nothing(null), instead of the React component, which may causes the “this.props” not found error and the like. However, in this case, we simply return JSX syntax based on if-else logic, and we won’t need the binding.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">renderTodoText()&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.props.todo.isCompleted)&#123;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">s</span>&gt;</span>&#123;this.props.todo.text&#125;<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;&#123;<span class="keyword">this</span>.props.todo.text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;li&gt;</span></span><br><span class="line"><span class="regexp">&#123;this.renderTodoText()&#125;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this._onComplete&#125; &gt;Complete&lt;/</span>button&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>._onDelete&#125;&gt;Delete&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>li&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Check more information in <a href="http://devnacho.com/2016/02/15/different-ways-to-add-if-else-statements-in-JSX/" target="_blank" rel="noopener">this post</a>.</p><h3 id="Webpack-in-production"><a href="#Webpack-in-production" class="headerlink" title="Webpack in production"></a>Webpack in production</h3><p>Pretty similar with using webpack in dev mode, but much simpler in that you only need to specify a correct output path, and webpack will handle the else stuff. And it contains Uglify plugins and others that can help produce the production bundle.js file.</p><p>check <a href="http://www.pro-react.com/materials/appendixA/" target="_blank" rel="noopener">this post</a> for more information.</p><h3 id="How-redux’s-state-update-react’s-components"><a href="#How-redux’s-state-update-react’s-components" class="headerlink" title="How redux’s state update react’s components"></a>How redux’s state update react’s components</h3><p>When you use Redux in React application, follow one simple rule - all your components are stateless (means, <strong>no component initializes its state or calls .setState() anywhere</strong>).</p><p>The redux way of design based on state container, one big object that holds all application state. As React component, being connected to Redux store, Redux will pass the state (or portion of it) into that component, as this.props.state property.</p><p>That high-order component (or smart component), renders its children components (or dumb components) and handles events from them.</p><p>If child component requires change, it triggers corresponding handler (which typically passed as props). The only way to change the state is to dispatch an action. That action contains a type and a payload and based on that type, corresponding reducer is selected. The reducer then produces a new state, based on previous state and action payload.</p><p><strong>If in the result of reducer call, state got changed, Redux will re-render high-order component, passing new state in properties. So, all child components will be updated correspondingly.</strong></p><p>Check <a href="http://stackoverflow.com/questions/33668827/refresh-logic-in-react-component-or-flux-redux" target="_blank" rel="noopener">this post</a> for more information.</p><h3 id="How-to-use-seperate-reducers-to-handle-different-parts-of-state"><a href="#How-to-use-seperate-reducers-to-handle-different-parts-of-state" class="headerlink" title="How to use seperate reducers to handle different parts of state"></a>How to use seperate reducers to handle different parts of state</h3><p>One thing to note that in seperate single reducers functions like this one, we no longer pass in the whole state tree, but instead the correct portion of that state tree, in this case, only todos array. And this part of code handles that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">'./todoReducer'</span>;</span><br><span class="line"><span class="keyword">import</span> userReducer <span class="keyword">from</span> <span class="string">'./userReducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">    todos: todoReducer,</span><br><span class="line">    user: userReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure><p>Note that after we split the reducer function, we will also update all related files.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Dan Abramov开源的react hot loader boilplate的浅探， 同时复习一下webpack与react搭配开发时的常用配置。&lt;a href=&quot;https://github.com/chocoluffy/react-hot-boilerplate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="http://chocoluffy.com/tags/react/"/>
    
      <category term="redux" scheme="http://chocoluffy.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative-简易个人博客客户端</title>
    <link href="http://chocoluffy.com/2016/07/03/ReactNative-%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://chocoluffy.com/2016/07/03/ReactNative-简易个人博客客户端/</id>
    <published>2016-07-03T15:25:11.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>记录了学习React Native过程中一开始的上手项目， 对初学者提供对比参考。<a href="https://github.com/chocoluffy/ReactNativeEveryday/tree/master/Day3SimpleNavigator" target="_blank" rel="noopener">Github Source</a></p><a id="more"></a><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f5h54wb0ung20dc0ob4qu.gif" style="height: 486px; margin: 0 auto;"></p><h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2><p>react native components:</p><ul><li>TabBarIOS</li><li>Navigator</li><li>WebView</li></ul><p>third library:</p><ul><li>react-native-vector-icons</li></ul><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><h3 id="Use-rnpm-to-link-with-third-party-libraries"><a href="#Use-rnpm-to-link-with-third-party-libraries" class="headerlink" title="Use rnpm to link with third-party libraries"></a>Use <code>rnpm</code> to link with third-party libraries</h3><p>Sometimes the third-party libraries not fully integrated into the project even doing <code>rnpm link</code>. In such case, delete the node_modules folder and install again, <code>rm -rf node_modules &amp;&amp; npm install</code>, then do <code>rnpm link</code> to help link with IOS libraries instead of doing it mannually.</p><h3 id="How-to-center-an-image-of-fixed-size"><a href="#How-to-center-an-image-of-fixed-size" class="headerlink" title="How to center an image of fixed size"></a>How to center an image of fixed size</h3><p>Apply <code>flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39;</code> styling on image’s parent element, then for that image’s styling, only specify its fixed height and width will work!</p><h3 id="TouchableHighlight"><a href="#TouchableHighlight" class="headerlink" title="TouchableHighlight"></a>TouchableHighlight</h3><p>TouchableHighlight component can only has one child element, thus if we want to have multiple children elements, wrap them into a single view container. </p><blockquote><p>Notice one error I met, we need to directly use a <code>View</code> component after <code>TouchableHighlight</code>.</p></blockquote><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p>Finally using Navigator instead of NavigatorIOS, there are several important things to remember:</p><ul><li>we have an <code>renderScene</code> method in index.ios.js that defines what component to render when there is an scene being pushed.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In parent component, we define renderScene method:</span></span><br><span class="line">renderScene(route, navigator) &#123;</span><br><span class="line">   <span class="keyword">if</span>(route.name == <span class="string">'Main'</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Main</span> <span class="attr">navigator</span>=<span class="string">&#123;navigator&#125;</span> &#123;<span class="attr">...route.passProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">   &#125;</span></span><br><span class="line"><span class="xml">   if(route.name == 'Home') &#123;</span></span><br><span class="line">     return &lt;Home navigator=&#123;navigator&#125; &#123;...route.passProps&#125; /&gt;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// And in child component, we put all data we want to pass to next scene in route object.</span><br><span class="line">_navigate(property)&#123;</span><br><span class="line">  this.props.navigator.push(&#123;</span><br><span class="line">    name: 'Home',</span><br><span class="line">    passProps: &#123;</span><br><span class="line">      name: property</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;TouchableHighlight onPress=&#123; () =&gt; this._navigate('Hello World') &#125;&gt;</span><br><span class="line">    &lt;Text&gt;GO To View&lt;/Text&gt;</span><br><span class="line">&lt;/TouchableHighlight&gt;</span><br></pre></td></tr></table></figure></li></ul><p>And utilizing the spread syntax of passing properties, we can easily allow next scene to use the data passed from the previous scene, the one being trigger(ususally by pressing).</p><ul><li>The problem of “this”. In the above example, we use the ES6 arrow syntax, which automatically bind “this” for us, which means that the “this” inside the function we called points to the current component. However, if we use common function assignment like <code>onPress={this.onPress.bind(this)}</code>, we have to manually bind this to it!!!</li></ul><p>check <a href="https://medium.com/@dabit3/react-native-navigator-navigating-like-a-pro-in-react-native-3cb1b6dc1e30#.1kuxzxyps" target="_blank" rel="noopener">this post</a> for more information. And refer to the source code of example <a href="https://rnplay.org/apps/9_1QSA" target="_blank" rel="noopener">navigator example</a>.</p><h3 id="TabBarIOS"><a href="#TabBarIOS" class="headerlink" title="TabBarIOS"></a>TabBarIOS</h3><p>Check <a href="https://devdactic.com/react-native-tab-bar/" target="_blank" rel="noopener">this post</a> for more helpful information.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;TabBarIOS selectedTab=&#123;<span class="keyword">this</span>.state.selectedTab&#125;&gt;</span><br><span class="line">        &lt;TabBarIOS.Item</span><br><span class="line">          selected=&#123;<span class="keyword">this</span>.state.selectedTab === <span class="string">'welcome'</span>&#125;</span><br><span class="line">          systemIcon=<span class="string">"featured"</span></span><br><span class="line">          onPress=&#123;() =&gt; &#123;</span><br><span class="line">              <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                  selectedTab: <span class="string">'welcome'</span>,</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">            &lt;Welcome/&gt;</span><br><span class="line">        &lt;<span class="regexp">/TabBarIOS.Item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TabBarIOS.Item</span></span><br><span class="line"><span class="regexp">          selected=&#123;this.state.selectedTab === 'more'&#125;</span></span><br><span class="line"><span class="regexp">          systemIcon="featured"</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                this.setState(&#123;</span></span><br><span class="line"><span class="regexp">                    selectedTab: 'more',</span></span><br><span class="line"><span class="regexp">                &#125;);</span></span><br><span class="line"><span class="regexp">          &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;More/</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/TabBarIOS.Item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>TabBarIOS&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Test-on-real-device"><a href="#Test-on-real-device" class="headerlink" title="Test on real device"></a>Test on real device</h3><ul><li>Change from localhost to my computer’s IP.</li><li><a href="https://gist.github.com/andrewsardone/91797ff9923b9ac6ea64" target="_blank" rel="noopener">Add one more key to info.plist</a></li></ul><h3 id="Image-not-rendering-from-ListView"><a href="#Image-not-rendering-from-ListView" class="headerlink" title="Image not rendering from ListView"></a>Image not rendering from ListView</h3><ul><li>One weird thing happened is that using the same uri from Day2 project, I want to render luffy on each row of ListView, but it doesn’t show up. Then, I change to a <em>small and https-sourced</em> image from facebook’s github repo, then it works. Not sure how to deal with it yet.</li><li>Some one from issue panel says that image may not be updated in ListView and you have to add an “ID” attribute to forcely update it, it can be saved for later’s use.</li></ul><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>Most used library for Icon is “react-native-vector-icons”, and simply import corresponding libraries will do the tricks, <code>import Icon from &#39;react-native-vector-icons/Ionicons&#39;;</code> Then, use <a href="http://ionicframework.com/docs/v2/ionicons/" target="_blank" rel="noopener">this website</a> for searching new icons. If animation required, use <a href="https://github.com/oblador/react-native-animatable" target="_blank" rel="noopener">react-native-animatable</a> to animate. icons.</p><h3 id="Nativebase"><a href="#Nativebase" class="headerlink" title="Nativebase"></a>Nativebase</h3><p>It’s a surprise for me! Just like the bootstrap for html, nativebase gives so much template to build react native front-end. Check <a href="http://nativebase.io/docs/v0.3.0/components" target="_blank" rel="noopener">this tutorial</a> for more examples.</p><h3 id="Webview-render-HTML"><a href="#Webview-render-HTML" class="headerlink" title="Webview render HTML"></a>Webview render HTML</h3><p>Use <a href="https://github.com/jsdf/react-native-htmlview" target="_blank" rel="noopener">react-native-htmlview</a> to render HTML-like text, which usually contains HTML tags like <code>&lt;p&gt;</code> and <code>&lt;/br&gt;</code> and so on. In order to directly jump to the original web page, we simple use react-native-webview library.</p><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><h3 id="Grab-data-from-RSS"><a href="#Grab-data-from-RSS" class="headerlink" title="Grab data from RSS"></a>Grab data from RSS</h3><p>Here is a handy website that transforms rss feed into json, and provides a API for that: <a href="http://rss2json.com/" target="_blank" rel="noopener">http://rss2json.com/</a>. For example, my blog’s rss feed being transformed to json is: <a href="http://rss2json.com/api.json?rss_url=http%3A%2F%2Fchocoluffy.com%2Fatom.xml" target="_blank" rel="noopener">http://rss2json.com/api.json?rss_url=http%3A%2F%2Fchocoluffy.com%2Fatom.xml</a>. Then using this json file, we can have a much more consistent and clear structure to formatize into RN app.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录了学习React Native过程中一开始的上手项目， 对初学者提供对比参考。&lt;a href=&quot;https://github.com/chocoluffy/ReactNativeEveryday/tree/master/Day3SimpleNavigator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react native" scheme="http://chocoluffy.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>VRTO展会游记</title>
    <link href="http://chocoluffy.com/2016/06/27/VRTO%E5%B1%95%E4%BC%9A%E6%B8%B8%E8%AE%B0/"/>
    <id>http://chocoluffy.com/2016/06/27/VRTO展会游记/</id>
    <published>2016-06-27T12:49:07.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>记录在VR Toronto展会第一次尝试Oculus和Vive的使用体验。</p><a id="more"></a><p><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f59mz8yt2sj20ww0jhwiy" alt="down hall"></p><p>先是有多大Steve Mann教授的开幕panel演讲， 其实内容和上学期ECE516的课程slides重合度非常高， 主要关于教授这四十年左右对VR的研究和总结， 以及他draft的三条关于VR的laws， 更多具体内容和demo可以在课程网页上找到。 </p><p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f59n0318qmj20vj0ki783" alt="lecture"></p><p>我还记得在课上Steve展示的频率可视化手环和水波乐器， 都在昨天和今天的会场展示了， 错过的同学们可以在教授的个人主页上看到更详细的介绍。</p><div class="video-container"><br>    <iframe width="560" height="315" src="https://www.youtube.com/v/Z9qiWqRPrcw" frameborder="0" allowfullscreen></iframe><br></div><p>接下来是一系列VR相关的演讲和demo展示， 尝试了目前市场比较流行的Oculus和Vive， 有很多游戏和服务行业开发公司都将各自的应用带到了展台， 大致的感受是：Oculus画质暂时比较差， 场景移动快的demo会导致轻微眩晕感， Vive的画质和human interaction相比之下都更加得细腻出色。</p><p>但同时不可否认的是， Facebook旗下的Oculus受到更多开发者的青睐， 拥有更多的游戏选择和强大的技术支持, 但最近曝出来的Oculus强制要求某些游戏开发商的优先发行权还是有损企业形象。Sony的VR头盔暂时没有出现在今天的展示中， 但基于PS4成熟市场规模和玩家预期来说， 仍是最值得期待和大规模流行的VR设备。Vive，在我今天的体验之后， 也给我留下了很深刻的印象， 一个三维画画的游戏应用， 见配图， 将手指slide\click\hold的操作融合得很棒， slide换画板， click选择不同的画笔画布装备， hold来画画， 也的确是本场最immersive的应用之一。</p><p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f5a31m8ag3j20pu0klmzn" alt="demo"></p><p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f5a30nl323j20qg0mo75v" alt="ada"></p><p>苹果也一直既往地选择观望态度， 短期内没有推出的VR设备的计划。微软Hololens作为AR设备， 相比VR， 拥有更大的生活场景应用空间， 今天体验到的Internet of Things， 包括家具电器灯泡的控制， 餐馆点餐是菜单的选择… 这个demo应该是今天最惊艳的展示了， 也感觉这一两年着力布局家居科技环境的苹果也将加入AR的市场。</p><div class="video-container"><br>    <iframe width="854" height="480" src="https://www.youtube.com/v/xG3hslceFqo" frameborder="0" allowfullscreen></iframe><br></div><p>同时讲座上提及的myo手环， 曾计划是写个应用给朋友庆祝生日的， 结果用户体验实在太差（动作捕捉不准确）， 不得不放弃myo， 目前市场上较实用的motion detection的设备更多时候还是参考大公司的产品风险比较小。</p><p>综上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在VR Toronto展会第一次尝试Oculus和Vive的使用体验。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="虚拟现实" scheme="http://chocoluffy.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
  </entry>
  
  <entry>
    <title>写给高考三年后自己的一封信</title>
    <link href="http://chocoluffy.com/2016/06/11/%E5%86%99%E7%BB%99%E9%AB%98%E8%80%83%E4%B8%89%E5%B9%B4%E5%90%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <id>http://chocoluffy.com/2016/06/11/写给高考三年后自己的一封信/</id>
    <published>2016-06-11T20:49:24.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p><a id="more"></a><blockquote class="blockquote-center">“One Piece到底存不存在，我不想知道。”</blockquote><p><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f4ryvevg44j21fn0cl79q" alt="one piece"></p><p>3年前， 我刚结束高考， 坐在爸妈的车上一起从学校回家， 路上没多少车， 很像我当时空空的心。</p><p>我是一个很容易有抽离感的人， 和周围的人与声音闹腾久了， 仿佛像一根针戳破了泡泡，我会安静下来。 还记得那天高考最后一门结束之后， 一群家长拥挤了课室， 突然一下子把我推进了陌生的热气腾腾。 然而我已经不记得当时的我送上了多少笑脸， 但我清楚的记得那种从未有过的空旷， 是高考的戛然而止意犹未尽也好， 还是一种抵达终点的疲态彷徨， 我站在那里， 听着最熟悉而陌生的寒暄， 无所适从。直到在人群里瞅见了爸爸妈妈， 我才回过了神， 当时就想一直抱着他们。</p><p>太多人的掌声和欢呼让你觉得高考就是终点， 可没有多少人理解你的彷徨和张望。</p><p>“好像一下子什么都结束了……”</p><p>3年后，或是命运的偶然和眷顾， 我碾转在中山大学， 加州伯克利大学， 并于去年落脚在多伦多大学。 回望高中毕业这几年我走过的脚印， 太多太多的人与事牵扯着我， 震撼着我， 改变着我。 相比现在能够掌握着自己努力的痕迹和方向， “高考”两字对现在的我而言， 更像是翻看儿时日记那般哭笑不得旳嫌弃和惋惜。 嫌弃当时自己那种不能够再真实的空阔无助， 惋惜， 或许能够更早些为热爱的东西付出更多的机会。也正是这份切切实实的想法， 有时候让我发梦：如果让我回去三年前， 看着课桌前傻乎乎的自己， 我会和自己说写什么。</p><p>一、</p><p>我相信偶然， 不是否定去勤奋、去努力的意义， 不是去反驳人定胜天、铁杵成针的精神， 而是我希望更多的宽容。初中高中大量大量不需要天赋而强调记忆的训练， 中考高考前弥漫的三个月苦学逆袭的故事与激励， 太容易让我们去接受一个线性因果论的世界， 因为我这般这般的“付出”与训练， 我一定能得到即时可见的成果， 而往往成绩也很服气的提高更让我相信， “这条路我没有选错， 只是我还不够努力而已”， “他们的成绩还没有提高， 一定是还不够努力”的幻想。 很难讲这种思路对那个人的高考帮助到底大不大， 但这却是一种很残酷的逻辑。</p><p>试想想， 在一个付出就有回报的世界里， 你所有的成功与荣光， 都只与你自己相关， 别人的失手挫折， 都只因为他们付出的不够多； 富人的富， 是天经地义的， 而穷人的穷， 也都无非是他们活该； 善良与同情变得胆怯了， 伸出的援手好像也因为“到底他值不值得我的帮助”的打量而颤抖， 我们生活在这样的世界里， 太容易变得坚硬而自负， 人定胜天不再是面对过程的鼓励而成了面对结果的嚣张。一个失去了尊重和惊喜的世界， 我不喜欢。</p><p>我们想要尊重与惊喜， 我们会因此想要理解对方的不同和允许那变幻莫测的运气， 会想起宽容。 不是“如何如何原谅别人的错误”，而是相信自己的任何成就都离不开周遭人的相助与教诲， 都离不开前人的经验和教训， 相信没有那么理所当然。 感觉又像说起了大道理， 可对于一个高中生， 乃至现在许多的成年人过分的自我价值追求， 这最最简单的一条， 却一直不肯承认。</p><p>我记得很清楚， 我初高中时候的“努力轨迹”。到初三前一直是吊车尾， 只到发现自己玩的最好的一群小伙伴和自己喜欢的女生都可以毫不费力地进省级重点班， 这成了自己当时努力的理由； 一直喜欢听宣布自己理科成绩的那一刻的掌声和赞叹， 这成了我选择奥数、奥化的理由； 因为老师在作业本上给我写了个“有灵气”， 成了我那三年那门课必须考满分的理由； 因为想要证明我比另一个同学更厉害， 成了我必须保持年纪前列不断去争第一的理由。林林总总的理由， 有笑有泪其中不乏充满了记忆与感动的理由， 只可惜， 没有一个理由是因为我喜欢……</p><p>我所谓的成就， 不过是在某学科某考试上考的相对好一点罢了， 可我所付出的， 却是一段“太专注”的冲刺， 以致于根本没来得及想自己的热情和兴趣所在， 而自顾自地认为“我值得一切结果与荣誉”。 就像跑在跑道里的我们， 从来好像都没有质疑过跑道的方向， 而越跑越忘记了自己所属的那个方向， 乃至奔跑的意义。</p><p>每个人都有走近舞台中央的时刻， 学会宽容打在自己身上的光，学会理解运气和偶然， 想的清楚别人的扶持与帮助， 更看得清自己究竟属不属于这个舞台， 毕竟这个世界上最简单而粗暴的忽悠， 就是叫你去看着别人跑到哪儿， 你也去那儿。 </p><p>二、</p><p>没有一个能解决所有问题的答案， 但是可以有一个更倾向改变的角度。</p><p>下面这个故事是我在知乎上看到的一个印象很深刻的故事。 2016年普利兹克建筑奖得主Alejandro Aravena在2014年Ted论坛上的讲述他的设计哲学，开篇说道：如果设计有任何力量的话，那就是整合的力量。</p><p>事情的起因源于12年前Alejandro曾接到的一个项目，他要为智利北部伊基克市中心非法占据了半公顷土地的100个家庭设计一套社会保障性住房。而得到的预算是1万美元。1万美元的用途，包括买地，建房子，以及建相关基础设施。绝对的资金匮乏让他提出了一个绝妙的方案：“一个普通中产家庭拥有80平方米的住房是可接受的，但如果资金不够，这个家庭可能只好去买40平方米的小房子。如果我们把这个40平方米的小房子，看做是一个80平方米的“好房子的一半”（half of a good house），来建造并提供给这些家庭，给予这些家庭另外40平方米的可拓展空间，那么这无疑鼓励了这些家庭在未来财力足够的时候“扩建”自己的房子，成功拥有一个完整的好房子。”（摘自知乎原文）很惊喜的是， 这些家庭大部分都同意了兴建， 不仅同意， 在主动助力修建工作， 因为未来的另一半也是要他们自己建的， 这是他们自己的房子。每户家庭想到的不再是如何和政府拉锯谈判， 而是对未来自己的房子的憧憬和期待。一个很简单却也更有人情味的角度， “撬动了人们的自发性，我认为，这就是一种“整合”，就是“设计的力量””。</p><p>经济学的小伙伴可能很快就看出来了， 这貌似就是所谓的“外部利益内部化”的一个更经典的例子嘛。 小到多人合租房间的打扫卫生， 工作在大公司成为其中一颗齿轮， 大到保护地球生态环境， “搭便车行为”无所不在， “公地悲剧”也不断上演。 非要深究原因的话， 书上说是因为“公共物品产权难以界定”， 我说， 也不过就是当规模大了， 涉及的人多了， 就慢慢失去了归属感罢了。归属感， 一个带着温度的词语。 我不想去深入探讨“拥有”（所谓的“产权”）和“归属”到底区别在哪里， 简单来讲， 你“拥有的”并不一定能带给你“归属”感， 而归属， 自愿付出， 本身就沾着承诺与责任的味道。</p><p>“拥有好房子的一半（half of a good house）”这简单的口号没有解决任何资源稀缺的问题， 而只是， 给了伊基克市中心的居民们重新清晰的归属感， 房子是自己未来好房子的一半， 我会认真粉刷， 仔细打扮， 悉心准备装饰那另一半的到来……没有一个能解决所有问题的答案， 但是可以找到一个更加打动的角度， 一个更有人情味儿的角度， 毕竟所有问题最终归根结底都回到人， 而人， 因为曾被温柔相待的归属， 更倾向改变。</p><p>类似地， 精致有心旳设计， 真实客观的摄影， 复杂而饱满的戏剧， 这些艺术解决不了大部分现实问题， 却苦勤于人心。 他们努力提出一个角度， 无谓对与错， 更没办法用高中习惯的判分标准参考答案来审判， 往往出其不意， 往往饱受误解， 可也因那更多数的理解和感动而孵育着改变。很难讲艺术的意义究竟是什么， 但如果一定要用一句话来概括， 我想是：</p><p>我也会想成为温柔的人， 因为曾被温柔的人那样对待， 深深了解那种被温柔相待的感觉。</p><p>或许这就是改变的初衷吧。</p><p>三、</p><p>“One Piece到底存不存在，我不想知道。”</p><p>《海贼王》里面描述过很多不同身世背景的伙伴和路飞一起战斗的精彩剧情， 但对我来说同样难忘的， 还有另一幕， 当乌索普问冥王雷利， “那个独一无二的大秘宝One Piece， 究竟……”， 还没等乌索普说完， 路飞大吼一声， 谁也没有见过路飞这样严肃的表情， “宝藏在哪里我不想知道，连宝藏又没有我也不想知道， 虽然什么都不知道， 但是大家都是这样赌上性命出海的， 要是在这里就被大叔透露了……我就不当海贼了”。</p><p>对于终点和意义的讨论从来没有停止过， 而高考， 在其重大的社会责任下背负了太多塑造一生、决定一生的名声， 可就像生命里其他重要的选择一样， 听过掌声， 走过低谷， 我们依旧要继续上路。意义是很私人的东西， 你做不到让别人帮你生活， 也做不到按图索骥去参悟旅行的意义， 希冀的快乐也远远不同于世界上其他任何人。 过早地接受了终点的模样而擦身而过无数或美妙或苦涩却都精彩无比的可能性， 或许正是所谓的“终点”最大的诅咒了吧。</p><p>冥王雷利幽幽地问道， “伟大航路的艰险远远超出了你们的想象， 敌人都很强悍， 你办得到吗？统治这片大海。”， 路飞看着雷利， 咧开一个笑容， “我才不要统治呢， 这片大海上最自由的人， 就是海贼王！”</p><p>时间仿佛停止在这一刻， 思绪宛若卷入一幕幕电影场景般跳跃， 肃立在舞台的正中央看着灯光慢慢聚拢， 光脚游走在柔和的森林， 再跳入环游世界的海贼船把手臂高高举起……想起了好多好多， 感慨了好多好多， 终于回过神， 才恍然自己有多么幸运。 高中的学习课余生活让我成长了太多， 在省实也让我认识了可以一起撒娇打诨很久很久的朋友。 但同时我也慢慢意识到， 面向高考的教育仿佛无可避免地让我们更容易接受线性因果的世界观， 存在面面俱到的标准答案和一种风光却道听途说的生活。</p><p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p><p>说实话， 在我刚上高中那年级， 脑子里除了跑跑卡丁车， 就是怪物猎人了吧。 日子过得特别慢， 谁会花功夫想这些折腾呢！</p><p>虽然一直不擅于文字， 却很庆幸自己还存留着对文字的眷恋。也是想看看和文字里的自己一起成长吧。 </p><p>新世相最近一篇关于高考的文章很有意思， 还记得里面开头的一个提问， 过去很多年，我真的从高考中夺回自己的控制权吗？</p><p>Yes, finally.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>socket.io开发多人聊天室教程</title>
    <link href="http://chocoluffy.com/2016/05/23/socket-io%E5%BC%80%E5%8F%91%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%99%E7%A8%8B/"/>
    <id>http://chocoluffy.com/2016/05/23/socket-io开发多人聊天室教程/</id>
    <published>2016-05-24T02:43:41.000Z</published>
    <updated>2018-03-09T21:55:16.430Z</updated>
    
    <content type="html"><![CDATA[<p>用socket.io搭配express写的一个多人聊天室应用， 同时借这个机会复习了一下socket及TCP/IP的一些细节知识， 在UI上用jquery， 简洁而快速地完成一些基础前端样式的开发， 开发时用nodemon和browser-sync来辅助开发流程。<a href="http://52.20.64.23/chatroom" target="_blank" rel="noopener">在线Demo-网页版</a>, <a href="https://github.com/chocoluffy/chatroom" target="_blank" rel="noopener">github源代码</a>, 欢迎提交bug issue或者pull request~</p><a id="more"></a><p><img src="http://ac-TC2Vc5Tu.clouddn.com/1a5c1f59080e5cc1.png" alt="socket.io"></p><h2 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket?"></a>什么是socket?</h2><p>socket是对TCP/IP协议的封装， 本身是一个调用接口， 也就是我们常说的API， 用socket可以让程序员更方便的使用TCP/IP协议而已。 </p><p>在学习C语言(csc209)的时候大家接触到的socket的接口函数比如<code>create/listen/connect/accept/send/read/write</code>， 实际上正是针对TCP编程的接口， 在课程里我们用C语言来实现TCP最基础的一个socket链接， 监听， 包括server-client之间的通信，同样的， socket这个调用接口也可以用java, python和nodejs任何后端语言来实现， 也会出现在各种各样需要服务器端和客户端通信的应用中。</p><p>而什么是TCP呢？</p><p>Transmission Control Protocol (TCP) 就是其中发送文本信息的<strong>规则规范</strong>而已。 TCP依赖更底层的函数实现来在网络上传输binary data。 这里和大家介绍telnet\putty这些利用TCP在command line上帮助你发送和接受纯文本消息的应用， 你可以利用telnet来， 比如， 发送消息到google.com：<code>telnet google.com 80</code> 在端口80连接到google.com(80默认给网络请求)。我们当然不会随便发文本消息给google.com， 因为我们知道google.com不会接受随意的， 没有结构的文本请求。 是的， 我们需要一个<strong>标准(protocol)</strong>来规范交流的方式。我们在浏览器输出<a href="http://google.com，" target="_blank" rel="noopener">http://google.com，</a> 这意味着：</p><ul><li>在port 80用TCP协议连接google.com的服务器。</li><li>请求返回资源“／”（默认资源）。</li><li>将请求用http（hypertext transfer protocol）的形式来规范。</li></ul><h2 id="什么是socket-io"><a href="#什么是socket-io" class="headerlink" title="什么是socket.io?"></a>什么是socket.io?</h2><p>“Socket.IO goes a step beyond just providing an easy-to-use and more robust API on top<br>of web sockets. It also provides the ability to seamlessly use other real-time protocols if WebSockets are not available. For example, it will fall back on JSON long polling in the absence of WebSocket support.” from Rohit Rai</p><p>简单来说，socket.io来socket本身的接口函数上再抽象了一层， 让程序员可以专注应用逻辑的开发， 而由socket.io来操作底层的函数调用和优化， 比如有些时候， 由于浏览器的原因不能使用web socket时， 可以默认用long polling来达到同样的效果。</p><p>在socket.io出现之前，我们会采用很多的hack来解决一个问题：<strong>怎样在server和client端更有效率地双向传递信息？</strong>比如上文提到的long polling,  client端发送XHR请求， 然后在server端挂住， 直到server收到数据， 就回传数据， 还是比较常见的hack。</p><p>直到HTML5的大规模使用， 出现了两种从服务器端推送数据到客户端的新方法， 一个是Server-Sent Events (SSE)， 另一个是今天的主角， 支持双向通信的WebSockets.</p><h2 id="怎么用socket-io"><a href="#怎么用socket-io" class="headerlink" title="怎么用socket.io?"></a>怎么用socket.io?</h2><h3 id="http模块实现"><a href="#http模块实现" class="headerlink" title="http模块实现"></a>http模块实现</h3><p>下面用一个简单的例子来说明socket的使用， 很明确， 在服务器段当有新的连接的时候， 向客户端发送一个”greeting-from-server”的消息， 同时还监听客户端发来的”greeting-from-client”的事件，将消息打印在console里面。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plain http's version of server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line">fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if using express framework, we can define router easier!</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">fs.readFile(__dirname + <span class="string">'/index.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>);</span><br><span class="line">res.end(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The above code is used for create a server to serve the static index.html file under the current directory. The following part is the main idea of how to use socket.io to construct and listen to events.</span></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on http://localhost:3000'</span>);</span><br><span class="line"></span><br><span class="line">io = socketIO(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">socket.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">greeting: <span class="string">'Hello client!'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'greeting-from-client'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- client side index.html  --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> socket = io(<span class="string">'http://localhost:3000'</span>);</span></span><br><span class="line"><span class="javascript">            socket.on(<span class="string">'greeting-from-server'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.createTextNode(message.greeting)</span></span><br><span class="line"><span class="undefined">                );</span></span><br><span class="line"><span class="javascript">                socket.emit(<span class="string">'greeting-from-client'</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    greeting: <span class="string">'Hello Server'</span></span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码很简洁。以上是用node原生的http模块来搭建的本地服务器， 还可以尝试使用express这个最负盛名的node框架之一来重新实现一下相同的逻辑。</p><h3 id="Express模块实现"><a href="#Express模块实现" class="headerlink" title="Express模块实现"></a>Express模块实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express's version of server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express(),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>),</span><br><span class="line">    server, io;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server = http.Server(app);</span><br><span class="line">server.listen(<span class="number">5000</span>);</span><br><span class="line">io = socketIO(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">      greeting: <span class="string">'Hello Client'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  socket.on(<span class="string">'greeting-from-client'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Express is a collection of HTTP utilities and middleware that make it easier to use Node as a web server.</p></blockquote><p>用<code>var app = express()</code>来创建一个Express应用，将这个Express app当作第一个参数传入HTTP模块得到本地的简易服务器，we told Node that we wanted to use Express as our handler for HTTP requests. 而这个服务器的作用是在接收到对“／”默认资源的请求时， 将index.html文件传回给客户端，也就是我们的浏览器上显示出内容。</p><p>Next, we passed the HTTP server directly to the SocketIO method exactly as we would have if we were using a nonExpress HTTP server. Socket.IO took the server instance to listen for new socket connections on it. </p><p>其中一个小细节：用 <code>emit</code> 来传输named message, 用 <code>send</code> 来传输a message without name.</p><h2 id="多人在线聊天室"><a href="#多人在线聊天室" class="headerlink" title="多人在线聊天室"></a>多人在线聊天室</h2><p>下面是对以上应用的一个简单拓展。使用一个轮播(broadcasting)的方式， 将客户端传来的消息显示给每一个在线的用户。</p><p><a href="https://github.com/chocoluffy/chatroom" target="_blank" rel="noopener">github源代码    </a></p><p><a href="http://52.20.64.23/chatroom" target="_blank" rel="noopener">在线Demo-网页版</a></p><p>在手机上也是可以用的， 不过UI没有专门针对移动端优化， 会有点糗的感觉😭。有bug汇报到Issue呀， 谢谢~</p><h3 id="效果图Demo"><a href="#效果图Demo" class="headerlink" title="效果图Demo:"></a>效果图Demo:</h3><p>[1] pick a nickname:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/8d0dd106f5f226f4.png" alt="demo-nickname"></p><p>[2] chatroom initialization:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/8b9309129959f85e.png" alt="demo-init"></p><p>[3] multi users chatting(one in chrome, another in safari):<br><img src="http://ac-TC2Vc5Tu.clouddn.com/4aa537ca52ea8080.png" alt="demo-multusers"></p><h3 id="server端源代码"><a href="#server端源代码" class="headerlink" title="server端源代码"></a>server端源代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A fragment of server.js</span></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on '</span> + port);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = socketIO(server);</span><br><span class="line"><span class="keyword">var</span> sockets = [];</span><br><span class="line"><span class="keyword">var</span> ID2user = &#123;&#125;; <span class="comment">// username </span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">sockets.push(socket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> updateUserNum = <span class="function"><span class="keyword">function</span>(<span class="params">skt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> people = sockets.length === <span class="number">1</span> ? <span class="string">'person'</span> : <span class="string">'people'</span>;</span><br><span class="line">skt.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">greeting: <span class="string">'Welcome! '</span> + sockets.length + <span class="string">' '</span> + people + <span class="string">' online now!'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">updateUserNum(socket);</span><br><span class="line"></span><br><span class="line"><span class="comment">// boardcast?!</span></span><br><span class="line">socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> userlistChanged = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!ID2user[socket.id])&#123; <span class="comment">// if new user comes in.</span></span><br><span class="line"><span class="keyword">var</span> profile = &#123;</span><br><span class="line">username: message.username,</span><br><span class="line">avatar: message.avatar</span><br><span class="line">&#125;;</span><br><span class="line">ID2user[socket.id] = profile;</span><br><span class="line">userlistChanged = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; sockets.length; i++)&#123;</span><br><span class="line">sockets[i].emit(<span class="string">'message'</span>, message);</span><br><span class="line"><span class="keyword">if</span>(userlistChanged)&#123; <span class="comment">// update userlist when new user comes in.</span></span><br><span class="line"><span class="built_in">console</span>.log(ID2user[socket.id].username + <span class="string">'(id: '</span> + socket.id + <span class="string">' )'</span> + <span class="string">'joins!'</span>);</span><br><span class="line">sockets[i].emit(<span class="string">'userlist'</span>, ID2user);</span><br><span class="line">updateUserNum(sockets[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;sockets.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sockets[i].id === socket.id)&#123;</span><br><span class="line">sockets.splice(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> usernameOut = ID2user[socket.id].username;</span><br><span class="line"><span class="keyword">delete</span> ID2user[socket.id]; <span class="comment">// remove user from online users.</span></span><br><span class="line"><span class="comment">// send to client an updated userlist.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; sockets.length; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(usernameOut + <span class="string">'(id: '</span> + socket.id + <span class="string">' )'</span> + <span class="string">'leaves...'</span>);</span><br><span class="line">sockets[i].emit(<span class="string">'userlist'</span>, ID2user);</span><br><span class="line">updateUserNum(sockets[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"There are "</span> + sockets.length + <span class="string">" active sockets remaining."</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于我们需要将这个应用放在服务器上看效果， 所以port number就不能一直是本地的localhost了， 需要改成<code>var port = process.env.PORT || 3000;</code>。</p><h3 id="达到的效果"><a href="#达到的效果" class="headerlink" title="达到的效果"></a>达到的效果</h3><ul><li>显示同时在线的人数和user list。根据你自己选的nickname在user list上显示。</li><li>每当有人加入或者disconnect的时候，更新所有客户端的user list。同时console都会有记录。</li><li>每当有客户端发送消息的时候， broadcasting给所有在线用户。</li></ul><h3 id="TODOs"><a href="#TODOs" class="headerlink" title="TODOs"></a>TODOs</h3><ul><li>local cache most frequent online users, to make the message transfer much much more efficient and effective. </li><li>support image transfer, which should be quite similar to text message, but rather using binary image data. </li><li>introduce animation!! this part should be quite familiar to me but I’s just being lazy……</li><li>social media ;)</li></ul><h3 id="client端源代码"><a href="#client端源代码" class="headerlink" title="client端源代码"></a>client端源代码</h3><p>下面是部分client端的代码：由于监听了一些事件（毕竟我还是调整了前端的😂）, 所以代码有点长， 下面只显示核心部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// part of index.html's script</span><br><span class="line">var socket = io();</span><br><span class="line">socket.on('connect', function()&#123;</span><br><span class="line"></span><br><span class="line">    // ... some codes here ...</span><br><span class="line"></span><br><span class="line">socket.on('greeting-from-server', function(msg)&#123;</span><br><span class="line">$('#greeting').empty();</span><br><span class="line">$('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>').addClass('headline').text(msg.greeting).appendTo($('#greeting'));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    // MAIN IDEA: if message comes, append to right place, and self adjust the view!</span><br><span class="line">socket.on('message', function(msg)&#123;</span><br><span class="line"></span><br><span class="line">var container = $('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>').attr('id', 'container');</span><br><span class="line">var bubble = $('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>').addClass('talk-bubble tri-right left-in border');</span><br><span class="line">var textWrapper = $('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>').addClass('talktext').appendTo(bubble);</span><br><span class="line">$('<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>').html(msg.messageText).appendTo(textWrapper);</span><br><span class="line"></span><br><span class="line">// append the jquery clone to target destination.</span><br><span class="line">var nameClone = username2jqy(msg.username);</span><br><span class="line">var avaClone = avatar2jqy(msg.avatar);</span><br><span class="line"></span><br><span class="line">avaClone.appendTo(container);</span><br><span class="line">nameClone.appendTo(container);</span><br><span class="line">bubble.clone().appendTo(container);</span><br><span class="line">container.clone().appendTo($('#messages'));</span><br><span class="line"></span><br><span class="line">$('<span class="tag">&lt;<span class="name">br</span>&gt;</span>').appendTo($('#messages'));</span><br><span class="line"></span><br><span class="line">// self-adjust scrolling height.</span><br><span class="line">var msgWrapper = document.getElementById('messages');</span><br><span class="line">msgWrapper.scrollTop = msgWrapper.scrollHeight;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    // MAIN IDEA: when user list need to update, do it!</span><br><span class="line">socket.on('userlist', function(userlist)&#123;</span><br><span class="line">$('#userlist').empty();</span><br><span class="line">$('<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>').text('Online users:').appendTo($('#userlist'));</span><br><span class="line">Object.keys(userlist).map(function(d)&#123;</span><br><span class="line">var usrImg = $('<span class="tag">&lt;<span class="name">img</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span>').attr('src', userlist[d].avatar);</span><br><span class="line">var usrName = $('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>').text(userlist[d].username).addClass('listname');</span><br><span class="line">var profileWrapper = $('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>').addClass('userlistProfile');</span><br><span class="line">usrImg.appendTo(profileWrapper);</span><br><span class="line">usrName.appendTo(profileWrapper);</span><br><span class="line">profileWrapper.appendTo($('#userlist'));</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="背景知识补充"><a href="#背景知识补充" class="headerlink" title="背景知识补充"></a>背景知识补充</h2><p>完成一个小demo的开发同样会需要很多边角料信息的补充， 没有人会记得所有javascript各种处理对象的函数， 也没有人需要记得。留个note给自己， 也再以后查纠的之后方便回忆。</p><ul><li><a href="http://ios.jobbole.com/85230/" target="_blank" rel="noopener">微信,QQ这类IM app怎么做——谈谈Websocket</a></li><li><a href="http://betterexplained.com/articles/a-simple-introduction-to-computer-networking/" target="_blank" rel="noopener">A Simple Introduction To Computer Networking</a></li><li><code>array.splice(i, 1);</code> will remove one item from ith index in that array, namely, in this case, remove the ith item from array.</li><li><code>docuemnt.createTextNode(string) \ document.createElement(&#39;div&#39;); \  document.getElementById(&#39;SOMEID&#39;).appendChild(element);</code> are some common DOM objects munipulations example.</li><li>refer to this post: <a href="http://stackoverflow.com/questions/8894226/javascript-submit-textbox-on-enter" target="_blank" rel="noopener">send message by pressing enter</a>, by adding an eventlistener function to message-box, we listent on the keyCode we press, if it is 13(Enter key), then we trigger the message send function.</li><li>refer to this post: <a href="http://codepen.io/Founts/pen/gmhcl" target="_blank" rel="noopener">styling for chat bubble</a></li><li>Know how to create DOM elements in jquery: <code>$(&#39;&lt;div&gt;&lt;/div&gt;&#39;).addClass(&#39;headline&#39;).html(msg).appendTo($(&#39;#greeting&#39;));</code></li><li>create modal in a visually good-looking way, refer to this post: <a href="https://github.com/kylefox/jquery-modal" target="_blank" rel="noopener">jquery.modal.js</a></li><li>add user a good-looking avatar! <a href="https://github.com/adorableio/avatars-api" target="_blank" rel="noopener">adorable avatar!</a></li><li>change html input focus, refer to this post: <a href="https://api.jquery.com/focus/" target="_blank" rel="noopener">html input focus</a></li><li>auto-adjust the scrolling top to the latest message, refer to this post: <a href="http://stackoverflow.com/questions/15432691/css-overflow-value-for-chat" target="_blank" rel="noopener">srollTop = scrollHeight</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用socket.io搭配express写的一个多人聊天室应用， 同时借这个机会复习了一下socket及TCP/IP的一些细节知识， 在UI上用jquery， 简洁而快速地完成一些基础前端样式的开发， 开发时用nodemon和browser-sync来辅助开发流程。&lt;a href=&quot;http://52.20.64.23/chatroom&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线Demo-网页版&lt;/a&gt;, &lt;a href=&quot;https://github.com/chocoluffy/chatroom&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github源代码&lt;/a&gt;, 欢迎提交bug issue或者pull request~&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="AWS" scheme="http://chocoluffy.com/tags/AWS/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
  </entry>
  
  <entry>
    <title>前端开发工具库[第一期]-npm script</title>
    <link href="http://chocoluffy.com/2016/05/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93-%E7%AC%AC%E4%B8%80%E6%9C%9F-npm-script/"/>
    <id>http://chocoluffy.com/2016/05/15/前端开发工具库-第一期-npm-script/</id>
    <published>2016-05-15T21:48:45.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>在自动构建工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么我们需要自动构建工具？</p><p>在前端开发的时候，会遇到很多实际产品开发之外上的需求，比如开发者希望做到“所写即所得”，可以一边在编辑器里面修改和开发代码，浏览器可以同步更新而不需要我们手动去refresh页面； 比如我们希望可以压缩最后的成品代码， 图片资源的大小，让每次浏览器下载所需要的js代码的时间可以更短，或者考虑CDN； 比如我们希望我们写的scss可以适配任何类型的浏览器等等。</p><p>很多功能曾经是要开发者手动引入script文件的，但鉴于npm上活跃的开发者将很多需求的module开发并发布出来， 我们可以利用npm这个包管理器来配置使用这些方便的module，在能够达到同样功能的工具里面比如bower, grunt, gulp，我认为对于一个轻量的小项目， 个人项目来说, npm script是最方便的， 最容易上手的。<strong>没有最好的工具， 只有最合适的使用场景。</strong></p><p>而今天的主题：在配置工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p><p><strong>因为simplicity matters。</strong>没有必要在需要用的时候才去找那些数量有限的grunt, gulp plugins，而直接将node modules拿来用。对于个人开发和维护的小项目， 有没有必要花时间去研究Gruntfile.js怎么去配置， 或者说， 在配置上花的时间相对短期集中开发的时间来说值不值？不是说反对使用grunt, gulp和webpack等工具， 而是我们没有必要拿大炮去打蚊子， 我们想要agile development。 也正是simplicy， 所以才有RoR, meteor等全栈框架的出现来挑战java等较为臃肿的开发流程不是么？</p><p>下图是截止至今年1月为止的各平台的插件数量，仍在不断地增加中。</p><p><img src="http://ac-TC2Vc5Tu.clouddn.com/f247d4b81bd3044a.png" alt="npm script"></p><h2 id="什么是npm-script"><a href="#什么是npm-script" class="headerlink" title="什么是npm script"></a>什么是npm script</h2><p>其实npm script就是希望执行的command的alias， 类似与command line里面的make， 通过提前设置希望执行的命令， 我们可以通过<code>npm run &lt;alias&gt;</code>来执行我们预先设置的命令。 还有一些特别方便的commands比如：</p><ul><li><code>npm home request</code>， 可以直接跳转到那个module的介绍页面；</li><li><code>npm install request --save</code>可以将我们使用的modules以“^”形式保存在package.json文件里面， 这意味着下一次用同一个package.json安装依赖模块时， 没有经过major version jump的模块可以下载到本地项目目录； </li><li><code>npm install --production</code>可以安装生产环境的模块， 同<code>NODE_ENV=production npm install</code></li></ul><h2 id="如何config你的npm-script"><a href="#如何config你的npm-script" class="headerlink" title="如何config你的npm script"></a>如何config你的npm script</h2><p>而目前npm上有很多很棒的module可以直接处理项目， 下面列出来的是我平时自己经常使用的module: </p><p>比如: browserfy将文件的各种文件和浏览器同步; postcss和autofixer可以将css文件添加适配各种浏览器的前缀同时进行压缩; js-lint用来检查js文件的各种格式细节; uglify用来压缩js文件的大小; imagemin用来压缩各种图片文件的大小， 在各种大型网站中， 图片的大小占据了大部分。</p><h3 id="node－sass"><a href="#node－sass" class="headerlink" title="node－sass"></a>node－sass</h3><p>下面是一些具体使用的例子：比如我们想将sass compile成css。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev node-sass</span><br></pre></td></tr></table></figure><p>将<code>node-sass</code>这个module装在developing环境之后，可以直接<code>node-sass --output-style compressed -o dist/css src/scss</code>来将”src/scss“这个文件夹下面的sass文件compile出来并保存在”dist/css“文件夹下面； 或者一个更便捷的做法，是使用npm script：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"scss"</span>: <span class="string">"node-sass --output-style compressed -o dist/css src/scss"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在console里run <code>npm run scss</code>就可以执行这个相同命令了。和makefile的原理和使用习惯可以类比， 只不过使用场景和平台不同。</p><h3 id="autoprefixer"><a href="#autoprefixer" class="headerlink" title="autoprefixer"></a>autoprefixer</h3><p>同理对上文提到的autoprefixer这个module， <code>npm install --save-dev postcss-cli autoprefixer</code>来安装， 然后配置script：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"autoprefixer"</span>: <span class="string">"postcss -u autoprefixer -r dist/css/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>npm run autoprefixer</code>这个效果就相当于<code>postcss -u autoprefixer --autoprefixer.browsers &#39;&gt; 5%, ie 9&#39; -r dist/css/*</code>。</p><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><p>类似地还有eslint这个对js文件进行syntax testing的常用module：<code>npm install --save-dev eslint</code>或者使用shortcut：<code>npm i -D eslint</code>, 然后配置package.json的script部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"lint"</span>: <span class="string">"eslint src/js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目源代码示例"><a href="#项目源代码示例" class="headerlink" title="项目源代码示例"></a>项目源代码示例</h2><p>一个实战项目的源代码使用在这里和大家分享：</p><p>考虑到开发和生产环境的不同，还需要配置不同的环境，这个项目在开发上有浏览器同步更新，语法检查，压缩源文件， 监听端口， s3同步备份的自动化优势， 还引入了前端的jade框架代替html， stylus框架代替css，mocha的testing框架和karma驱动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"npm-scripts-example"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"An example of how to use npm scripts"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"browserify"</span>: <span class="string">"^6.3.2"</span>,</span><br><span class="line">    <span class="string">"hashmark"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"http-server"</span>: <span class="string">"^0.7.3"</span>,</span><br><span class="line">    <span class="string">"jade"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="string">"jshint"</span>: <span class="string">"^2.5.10"</span>,</span><br><span class="line">    <span class="string">"karma"</span>: <span class="string">"^0.12.28"</span>,</span><br><span class="line">    <span class="string">"karma-browserify"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"karma-cli"</span>: <span class="string">"^0.0.4"</span>,</span><br><span class="line">    <span class="string">"karma-mocha"</span>: <span class="string">"^0.1.10"</span>,</span><br><span class="line">    <span class="string">"karma-phantomjs-launcher"</span>: <span class="string">"^0.1.4"</span>,</span><br><span class="line">    <span class="string">"live-reload"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="string">"minifyify"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="string">"nodemon"</span>: <span class="string">"^1.2.1"</span>,</span><br><span class="line">    <span class="string">"opener"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line">    <span class="string">"parallelshell"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"rimraf"</span>: <span class="string">"^2.2.8"</span>,</span><br><span class="line">    <span class="string">"s3-cli"</span>: <span class="string">"^0.11.1"</span>,</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"^0.49.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"clean"</span>: <span class="string">"rimraf dist/*"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"prebuild"</span>: <span class="string">"npm run clean -s"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"npm run build:scripts -s &amp;&amp; npm run build:styles -s &amp;&amp; npm run build:markup -s"</span>,</span><br><span class="line">    <span class="string">"build:scripts"</span>: <span class="string">"browserify -d assets/scripts/main.js -p [minifyify --compressPath . --map main.js.map --output dist/main.js.map] | hashmark -n dist/main.js -s -l 8 -m assets.json 'dist/&#123;name&#125;&#123;hash&#125;&#123;ext&#125;'"</span>,</span><br><span class="line">    <span class="string">"build:styles"</span>: <span class="string">"stylus assets/styles/main.styl -m -o dist/ &amp;&amp; hashmark -s -l 8 -m assets.json dist/main.css 'dist/&#123;name&#125;&#123;hash&#125;&#123;ext&#125;'"</span>,</span><br><span class="line">    <span class="string">"build:markup"</span>: <span class="string">"jade assets/markup/index.jade --obj assets.json -o dist"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"karma start --singleRun"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"watch"</span>: <span class="string">"parallelshell \"npm run watch:test -s\" \"npm run watch:build -s\""</span>,</span><br><span class="line">    <span class="string">"watch:test"</span>: <span class="string">"karma start"</span>,</span><br><span class="line">    <span class="string">"watch:build"</span>: <span class="string">"nodemon -q -w assets/ --ext '.' --exec 'npm run build'"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"open:prod"</span>: <span class="string">"opener http://example.com"</span>,</span><br><span class="line">    <span class="string">"open:stage"</span>: <span class="string">"opener http://staging.example.internal"</span>,</span><br><span class="line">    <span class="string">"open:dev"</span>: <span class="string">"opener http://localhost:9090"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"deploy:prod"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/prod-site/"</span>,</span><br><span class="line">    <span class="string">"deploy:stage"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/stage-site/"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"http-server -p 9090 dist/"</span>,</span><br><span class="line">    <span class="string">"live-reload"</span>: <span class="string">"live-reload --port 9091 dist/"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"npm run open:dev -s &amp;&amp; parallelshell \"npm run live-reload -s\" \"npm run serve -s\" \"npm run watch -s\""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候就是因为准备的工具效率高， 开发者也因此得以集中精力于产品逻辑， 在更短的时间内开发出更好更稳定的产品。</p><h2 id="后记小结"><a href="#后记小结" class="headerlink" title="后记小结"></a>后记小结</h2><p>npm script不是没有缺点的，就像我一再强调的，没有最好的工具， 只有最合适的使用场景， 在个人小项目适合的npm script，在大项目， 动辄几十万的前端项目的构建和测试下， npm script会显得特别臃肿和难以维护。 而目前大热的grunt\gulp\webpack也迎来了他们的舞台。下一期，集中介绍grunt和webpack，公司里使用的也是grunt，为什么它会在众多工具中脱颖而出。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.zybuluo.com/yangfch3/note/249328" target="_blank" rel="noopener">用npm搭配脚本执行</a> npm 不仅可以用于模块管理，还可以用于执行脚本。对于多个任务的操作很方便！</li><li><a href="https://www.nczonline.net/blog/2016/03/mimicking-npm-script-in-node-js/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+nczonline+%28NCZOnline+-+The+Official+Web+Site+of+Nicholas+C.+Zakas%29" target="_blank" rel="noopener">Mimicking npm script in Node.js</a> The underlying mechanism of using npm script is that npm modifies the PATH environment variable so that it affects the lookup of executables. Run <code>npm install --save-dev eslint</code>, then do <code>npm run lint</code>, it works because npm script is actually running <code>node_modules/.bin/eslint</code>.</li><li><a href="http://gon.to/2015/02/26/gulp-is-awesome-but-do-we-really-need-it/" target="_blank" rel="noopener">Gulp is awesome, but do we really need it?</a></li><li><a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/" target="_blank" rel="noopener">How to Use npm as a Build Tool</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在自动构建工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>另一种鼓声-读《途客圈》有感</title>
    <link href="http://chocoluffy.com/2016/05/13/%E5%8F%A6%E4%B8%80%E7%A7%8D%E9%BC%93%E5%A3%B0-%E8%AF%BB%E3%80%8A%E9%80%94%E5%AE%A2%E5%9C%88%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://chocoluffy.com/2016/05/13/另一种鼓声-读《途客圈》有感/</id>
    <published>2016-05-14T01:45:08.000Z</published>
    <updated>2018-03-09T21:55:16.434Z</updated>
    
    <content type="html"><![CDATA[<p>“如果你清醒地知道你要去哪儿，脑海中还保留着那份憧憬，那么你就能逢山开路，遇水搭桥，所有的阻碍都将成为一个个里程碑，被踩在你的身后……”</p><a id="more"></a><p><img src="http://ac-TC2Vc5Tu.clouddn.com/7c3aa7a1e64bda62.png" alt="生命不能承受之重"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="http://chocoluffy.com/2016/04/25/%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%EF%BC%8C-%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/">关于创业, 那些不能说的秘密</a>里主要记录了阅读<the hard="" thing="" about="" things="">的阅读手记， 而另一本几乎同时完成的书&lt;途客圈创业记&gt;的阅读记录思考，在这里分享。</the></p><p>在一个充斥着来自CEO乃至风险投资人视角的创业回顾的环境下， 一个来自技术合伙人(CTO)的视角显得尤为可贵。 从最早的技术选型， 到带领其它技术人员的开发和维护， 到技术过渡和商业选择， 陈天给了一份很详细和真挚的参考选项。</p><p><img src="http://ac-TC2Vc5Tu.clouddn.com/6ceefbf6929babac.png" style="display: block; margin: 0 auto;"></p><p>每本书， 每个文字对不同的人意义都是不同的。 下面纪录了我在看完这本书之后的想法。</p><h2 id="关于创业，那所有无关技术的事"><a href="#关于创业，那所有无关技术的事" class="headerlink" title="关于创业，那所有无关技术的事"></a>关于创业，那所有无关技术的事</h2><p>一开始不要设置过高的期权池， 期权池的主要目的是未来吸引和留住人才。期权与股权不同，股权代表所有权，期权代表的则是在特定的时间、以特定的价格购买特定所有权的权利，它可被视作是员工与公司之间关于股权买卖的一份合同。行权之后员工获得的股份是普通股。</p><h3 id="在创新工场里的打拼"><a href="#在创新工场里的打拼" class="headerlink" title="在创新工场里的打拼"></a>在创新工场里的打拼</h3><p>在和创新工场就入驻细节的交谈中：</p><ul><li><p>清算优先权</p></li><li><p>反稀释条款</p></li></ul><p>如何雇佣到最好的人， 的确拥有创新工场这个名字更容易发现更好的技术人员。</p><p>nanfang就是通过创新工厂的招聘进来的。同时alex的官方博客和知乎都可以用来获取人才的来源。</p><h3 id="技术选型和工具库"><a href="#技术选型和工具库" class="headerlink" title="技术选型和工具库"></a>技术选型和工具库</h3><p>当时作者使用的是amazon的四台最小免费计算单元， 用4个账号注册的。一台用来跑翻译， 一台跑wordpress， 一台跑toureet.com， 和另一台。 现在国内的云服务可以考虑阿里云。</p><p>在UI上要直观和实用。 一定要在第一轮宣传之前完成UI的设计和构架， 毕竟第一轮宣传之后， 往后的宣传的力度和效果都将大大不如之前。</p><p>同时也需要考虑的就是域名和注册的问题!!</p><p>要把钱花在刀刃上， 要舍得去花钱。app的制作是必须的!!!!!!!!尽管大家使用web的时间很多， 但是下载了一个app就是护城河。</p><p><strong>对于一些特别优秀的人， 一定要和他们经常讨论产品的发展方向， 因为对于他们来说， 他们之所以加入你， 已经不是因为技术的吸引力了， 而是因为他的声音很可能在塑造他准备推出的产品， 因为从未有的对产品的掌控力。而这， 也是创业的魅力吧!</strong></p><h3 id="市场推广"><a href="#市场推广" class="headerlink" title="市场推广"></a>市场推广</h3><p>历时一个月的推广大赛， 烧了30万（加上员工的工资）， 换来的是一次性的用户， 看热闹的用户， 注册了3万多人， 然而没有什么用。</p><p>如果你战略上不是很清晰，你再做什么也是没有用的，<strong>是在用战术性的疲劳掩盖战略上的懒惰</strong>。百场汇不停地在战略层面做一些调整，所以战术上大家不会那么辛苦。一年来，百场汇全公司只有一个人离职。这对初创公司来说是很不容易的。</p><h2 id="关于功能的实用和噱头"><a href="#关于功能的实用和噱头" class="headerlink" title="关于功能的实用和噱头"></a>关于功能的实用和噱头</h2><p>有没有想过如果微信把朋友圈的功能作为每一次打开的初始页面？而不是一直以来的群组或者单聊？首屏一定要放你最最核心的功能， 而社交是最为用户粘性的方式之一， 绝对不能喧宾夺主。或者说， 所有的工具式网站， 都应该考虑围绕那个工具所最最合适的社交场景。</p><p>比如微信的工具属性是：即时通讯和群聊， 那么聊天的社交场景就应该是： 让更多的人发现聊天的内容， 也从纯文字转换到图片和视频和直播， 乃至可以让更多的人加入和感受到聊天的这个场景里面。</p><p>比如网易云音乐的工具属性是： 发现和享受高品质音乐， 那么找音乐和听音乐的社交场景就应该是： 让更多的人去发现你喜欢和收藏的音乐， 并基于这些音乐进行进一步的交流。而我觉得一个非常非常棒的功能就是， 不仅仅允许用户分享他们自己创作的歌单， 而且允许把他们最常听的那25首歌显示出来。你不会欺骗你自己的耳朵。如果可以把这一栏更突出地显示会更好？！</p><h2 id="关于工具和社区的交叠和矛盾"><a href="#关于工具和社区的交叠和矛盾" class="headerlink" title="关于工具和社区的交叠和矛盾"></a>关于工具和社区的交叠和矛盾</h2><p>每一个需求在被解决的时候， 产品是被工具化的， 而希望推广这种解决方案的时候， 产品是被社区化的。 现在大部分围绕工具性产品还是社区性产品的讨论， 如果被抽象出了产品本身要解决的问题的话， 基本都是废话和干扰。 拿两种使用场景和频率比较不同的方向做比较， 比如听音乐和旅游这两个商业方向。 </p><p>人们听音乐的两个需求， 在自己疲惫不爽的时候听到自己最喜欢的音乐， 和发现那些不认识却好听的音乐； 当然， 人们还会从分享自己组好的歌单或者评论里面得到分享和反馈的满足，但我认为这种行为是因为社区化带来的，因为在人群中， 所以也想得到人群的温暖和共鸣 ，但这种社会心理的需求我暂不归于听音乐本身的需求。 就拿网易云音乐APP作例子， 其本身在很多细节上做得很棒了， 但是我认为还可以提高的地方：</p><p>基于喜欢同一个专辑的乐众的社交兴趣小组。人们对自己喜欢的东西永远都有如数家珍般的热情。</p><p>从你不会骗自己的耳朵， 你最最经常听的25首歌。</p><p>同样发现别人最最经常听的25首歌。</p><p>用户对收集到歌曲的分类的自我重组。 应当支持双向的标记， 一是tag， 二是collection。像管理笔记一样去管理音乐， 同时将任何collection都注重社交化的分享， 像pinterest的理念学习。</p><p>评论分为两栏， 一栏是trending， 一栏是历史最热。 trending要像hackernews一样的不断让新事物涌现来代替旧评论， 而历史最热， 则是就硬碰硬的质量。原因？你不会去参加一个高低胜负已经分明的比赛。你之所倚评论， 你总会有被反馈的渴望， 而看见自己的文字被淹没是最最失落的， 哪怕你知道这的确不是最好的文字~</p><h2 id="关于期权池"><a href="#关于期权池" class="headerlink" title="关于期权池"></a>关于期权池</h2><p>以下内容， 来源自知乎。可参考：<a href="http://zhuanlan.zhihu.com/p/20726127" target="_blank" rel="noopener">知乎专栏</a>, 作者：黄海, 著作权归作者所有。</p><p>可能有创业者会问了：我给了员工股份，他3个月以后就跳槽了，我不就亏了。当然不会，首先记住这是股权池，不是股份池。给的是股权，不是直接送股份。所谓股权，就是一定时候，可以以行使价格买入股票，这个行使价格由董事会决定，一般特别低。</p><h3 id="有股权的员工和创始人的区别"><a href="#有股权的员工和创始人的区别" class="headerlink" title="有股权的员工和创始人的区别"></a>有股权的员工和创始人的区别</h3><p>你最早的员工可能和你一起度过了创业的全过程，而且还通过股权池获得股权，那你可能会问，那他们算创始人么？</p><p>答案是，他们与创始人还是有很大不同的。首先，如果他们不行使权利，他们甚至都不算是股东，话语权当然不一样。另外创始人开始都是、没有工资，甚至自己就是投资人，承担了所有的风险。员工就很不一样，依然是雇佣关系，除了失业风险较大，同时劳资可能相对低，但这些都是个人风险，而不是企业风险。所以还是有很大区别的。</p><p>越迟加入公司的员工需要冒的风险越低。</p><p>创始人应该最终拿整个公司大约50%的股份。首层下面的5层员工的每一层最终都分别分到大约10%的公司股份，每一层的员工都将平分这10%的股份。</p><p>现在，你搞定了一个公平的份股系统，但还有一个重要的原则：你必须执行“股份绑定”(vesting)。股份绑定期最好是 4 到 5 年。任何人都必须在公司做够起码 1 年才可持有股份（包括创始人）。好的股份绑定计划一般是头一年给 25%，然后接下来每个月落实 2%。否则，你的合作创始人将加入公司 3 个星期后跑掉，然后 7 年后又出现，并声称他拥有公司的 25% 的股份。</p><p>没有“股份绑定”条款，你派股份给任何人都是不靠谱的！</p><p>没有执行“股份绑定”是极其普遍的现象，后果可以十分严重。你看到有些公司的 3 个创始人没日没夜地工作了 5 年，然后你发现有些混蛋加入后 2 个星期就离开，这混蛋还以为他仍然拥有公司 25% 的股份，就因为他工作过的那 2 个星期。</p><p>好了，让我们清理一下整个设计蓝图中没搞定的小问题。</p><p>如果你的公司融资了，股份如何分割？</p><p>投资可以来自任何方向，一个天使投资人，一个风险投资公司，或者是某人的老爸。基本上，回答很简单：</p><p>新的投资将“稀释”所有人的股份。</p><p>千万不要用分配股权来解决这些问题。</p><p>其实，你只需要针对每位创始人拿的工资做好记帐：不拿工资创始人就给 她记着工资“欠条”。当公司有了足够现金，就根据这个工资欠条补发工资给她。接下来的几年中，当公司现金收入逐步增加，或者当完成第一轮风险投资后，你可 以给每一位创始人补发工资，以确保每一位创始人都可从公司得到完全一样的工资收入。</p><h3 id="创业构想提出者应该多拿股份吗？"><a href="#创业构想提出者应该多拿股份吗？" class="headerlink" title="创业构想提出者应该多拿股份吗？"></a>创业构想提出者应该多拿股份吗？</h3><p>不拿。构想基本上是不值钱的。仅仅因为提出创业构想就获得更多股 权，因此导致纷争是不值得的。如果你们当中有人首先提出的创业构想，但你们都同时辞工并同时开始创业，你们应该拿同等的股份。为公司工作才是创造价值的原 因，而你洗澡的时候突发奇想的“创业点子”根本不值什么钱。</p><h3 id="创始人不全职投入工作？"><a href="#创始人不全职投入工作？" class="headerlink" title="创始人不全职投入工作？"></a>创始人不全职投入工作？</h3><p>那么，他（们）就不能算是“创始人”。在我的概念中，如果 一个人不全职投入公司的工作就不能算是创始人。任何边干着他们其它的全职工作边帮公司干活的人只能拿工资或者工资“欠条”，但是不要给股份。如果这个“创 始人”一直干着某份全职工作直到公司拿到风投，然后辞工全职过来公司干活，他（们）和第一批员工相比好不了多少，毕竟他们并没有冒其他创始人一样的风险。</p><h3 id="如果有人给公司提供有价值的东西？"><a href="#如果有人给公司提供有价值的东西？" class="headerlink" title="如果有人给公司提供有价值的东西？"></a>如果有人给公司提供有价值的东西？</h3><p>比如提供了设备， 专利或者是域名。</p><p>很好啊。按这些东西的价值支付现金或开个“欠条”咯，别给股份。你准确算一下他给公司带来的那台电脑的价值，或者他们自带的某个聪明的字处理专利的价格，给他们写下欠条，公司有钱后再偿还即可。在创业初期就用股权来购买某些公司需要的东西将导致不平等，纷争和不公平。</p><p><strong>再重复一遍!! 用欠条， 而不是股份解决问题!!!!解决大部分的资金纷争和各种帮助!!</strong></p><p>今天买来的用户，明天还是不会成为你的品牌用户。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“如果你清醒地知道你要去哪儿，脑海中还保留着那份憧憬，那么你就能逢山开路，遇水搭桥，所有的阻碍都将成为一个个里程碑，被踩在你的身后……”&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="商业评论" scheme="http://chocoluffy.com/tags/%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
