<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[One Piece]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://chocoluffy.com/"/>
  <updated>2016-05-05T18:26:09.000Z</updated>
  <id>http://chocoluffy.com/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[AWS elastic beanstalk使用体验]]></title>
    <link href="http://chocoluffy.com/2016/05/04/AWS-elastic-beanstalk%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>http://chocoluffy.com/2016/05/04/AWS-elastic-beanstalk使用体验/</id>
    <published>2016-05-05T01:03:58.000Z</published>
    <updated>2016-05-05T18:26:09.000Z</updated>
    <content type="html"><![CDATA[<p>本文对目前市面上的主流Paas(platform as a service)提供商进行了比较， 比如heroku和amazon家的新星elastic beanstalk。并以一个nodejs爬虫的实例部署在了eb的服务器上。很多关于服务器端的概念也因此理清了， 比如reverse proxy server, dynamic IP addressing和后端的一些配置。也在文章中做个小结， 分享给感兴趣的大家。</p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/de08e7610183200c.png" alt="aws"></div>

<h2 id="概览">概览</h2><p>将之前用nodejs写的对<a href="https://cnodejs.org/?tab=good" target="_blank" rel="external">cnode社区精华帖</a>的爬虫放在AWS的EC2 instance下管理， 利用elastic beanstalk来对AWS资源进行分配和调控， 由于使用的还是free-tier的single instance， 则elastic beanstalk所特有的load-balancing的优势没有办法享受到。</p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/69662ed94ae1f3ff.png" alt="ebean"></div>

<p>一开始如果直接按照AWS给的方法, <code>eb init</code>初始化一个elastic beanstalk的项目， <code>eb create</code>创建一个environment和一个EC2实例, 然后<code>eb deploy</code>将.git里面committed的改动push到elastic beanstalk的生产环境里面， 然后用<code>eb open</code>来打开这个IP address， 如果之后需要终止这个app的话， 就<code>eb terminate</code>就好了。</p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/143c21d61cd3cf33.png" alt="heroku"></div>

<p>如果之前有使用heroku的经验的话， 其实你会发现其实amazon elastic beanstalk和heroku提供的服务非常相似， 实际上， 就这两家服务的定位而言， 都是platform as a service（Paas）， 也就是让developer可以将网站， 移动端部署在云端(cloud)不需要顾虑backend server和database的configuration。 而heroku本身相对于其他市面上的Paas在auto-scaling上做得更加出色， 它的computing resources(dyno)可以按照计算的需求而叠加从而满足在高流量下的网站后端流畅运行。而近几年amazon的elastic beanstalk的出现， 在这个Paas的市场给我们developer多一个很好的选择。就自己的使用而言， 感觉两者的command line interface其实设计得差不多， 都很简洁方便， 不过相比heroku， amazon的AWS还涉及租用到计算单元EC2, 就配置的操作来说， 你在配置AWS的服务上需要花更多的时间去设置环境变量和考虑密钥存储， 毕竟你可能有时候有ssh远程登陆amazon linux服务器的需求。相比之下， heroku的配置就是很简单的在<code>~/.bashrc</code>文件里面添加toolbelt文件夹的路径了。</p>
<blockquote>
<p>补充： 其实heroku它本身就是deploy在了AWS上的呀😂， 所以理论上在performance上不会有太大的差别。</p>
</blockquote>
<p>而在pricing上， 我认为AWS的价格和服务会更加的实惠， 毕竟考虑到你有一张信用卡就可以申请到你一年的free-tier的single instance的使用权利， 而single instance对一些小型的side project来说完完全全是够用的呀。即便不够用， 换成large instance也是several clicks away， 反正也是按用量收费， 经济实惠!</p>
<h2 id="遇到的问题">遇到的问题</h2><p>第一个使用EB部署的应用是一个nodejs爬虫， 负责爬去cnode社区的精华帖， 然后返回一个json object收集精华帖的link, 标题和作者avatar， 为了显示的直观， 我并没有写前端的样式， 而是直接<code>JSON.stringify(json)</code>然后send会浏览器。之后如果仅仅作为REST API使用的话， 还需要在router上修饰一下URL。目前还是有点粗糙的。<a href="https://github.com/AirLoft/web-scraper" target="_blank" rel="external">github链接</a></p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/9fd7dd3d203d2d91.png" alt="demo"></div>

<p>一开始我直接将在本地localhost运行的版本deploy到了elastic beanstalk上， 由于缺少了这一行配置<code>var port = process.env.PORT || 3000;</code>， 我直接把port定在了3000， 而elastic beanstalk是有应该占用的port的， 所以得到了“502 bad gateway error”。</p>
<p>还有一点需要注意的是<code>npm start</code>这个npm script里面的配置， AWS elastic beanstalk会找到这条指令并去执行来执行相应的js文件， 比如我把写cnode网站的爬虫写在了cnode.js里面， 那么我需要</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node cnode.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>来保证服务器执行的是我对cnode这个网站的爬虫。</p>
<h2 id="Q&amp;A">Q&amp;A</h2><p>以下内容是我在自己折腾Elastic Beanstalk的时候收集的一些比较简练而准确的总结， 在这里分享给大家。 其实amazon的AWS教程写得非常详细的， 大家自己如果有能力最好去尝试自己阅读和实践它给的例子!</p>
<p><strong>How elastic beanstalk works?</strong><br>Now you have a web app running in AWS Elastic Beanstalk. As Elastic Beanstalk creates your environment, it <strong>interacts with several other AWS services</strong> to create the resources required to run your web app securely and resiliently.</p>
<p><strong>How EC2 instance works?</strong><br>EC2 instance – A virtual machine that runs Amazon Linux or Microsoft Windows Server and that is configured to run web apps on the platform that you choose.<br>Each platform runs a different set of software, configuration files, and scripts to support a specific language version, framework, web container, or combination thereof. Most platforms <strong>use either Apache or nginx as a reverse proxy</strong> that sits in front of your web app, forwards requests to it, serves static assets, and generates access and error logs.</p>
<p><strong>What is reverse proxy server?</strong><br>A proxy server is a go-between or intermediary server that forwards requests for content from multiple clients to different servers across the Internet. A reverse proxy server is a type of proxy server that typically <strong>sits behind the firewall in a private network</strong> and directs client requests to the appropriate backend server. A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.</p>
<p>Common uses for a reverse proxy server include:</p>
<ul>
<li>Load balancing – A reverse proxy server can act as a “traffic cop,” sitting in front of your backend servers and distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer redirects traffic to the remaining online servers.</li>
<li>Web acceleration – Reverse proxies can compress inbound and outbound data, as well as cache commonly requested content, both of which speed up the flow of traffic between clients and servers. They can also perform additional tasks such as SSL encryption to take load off of your web servers, thereby boosting their performance.</li>
<li>Security and anonymity – By intercepting requests headed for your backend servers, a reverse proxy server protects their identities and acts as an additional defense against security attacks. It also ensures that multiple servers can be accessed from a single record locator or URL regardless of the structure of your local area network.</li>
</ul>
<p><strong>What is amazon s3 bucket?</strong><br>Amazon S3 bucket – A storage location for your source code, logs, and other artifacts that are created when you use Elastic Beanstalk.</p>
<p><strong>How your domain will look like?</strong><br>Domain name – A domain name that routes to your web app in the form subdomain.region.elasticbeanstalk.com.</p>
<p><strong>When should I use AWS Lambda versus Amazon EC2?</strong></p>
<p>Amazon Web Services offers a set of compute services to meet a range of needs.</p>
<p>Amazon EC2 offers flexibility, with a wide range of instance types and the option to customize the operating system, network and security settings, and the entire software stack, allowing you to easily move existing applications to the cloud. With Amazon EC2 you are responsible for provisioning capacity, monitoring fleet health and performance, and designing for fault tolerance and scalability. AWS Elastic Beanstalk offers an easy-to-use service for deploying and scaling web applications in which you retain ownership and full control over the underlying EC2 instances. Amazon EC2 Container Service is a scalable management service that supports Docker containers and allows you to easily run distributed applications on a managed cluster of Amazon EC2 instances.<br>AWS Lambda makes it easy to execute code in response to events, such as changes to Amazon S3 buckets, updates to an Amazon DynamoDB table, or custom events generated by your applications or devices. With Lambda you do not have to provision your own instances; Lambda performs all the operational and administrative activities on your behalf, including capacity provisioning, monitoring fleet health, applying security patches to the underlying compute resources, deploying your code, running a web service front end, and monitoring and logging your code. AWS Lambda provides easy scaling and high availability to your code without additional effort on your part.</p>
<p><strong>To create a hosted zone in Amazon Route 53</strong></p>
<ul>
<li>Open the Amazon Route 53 management console.</li>
<li>Choose Hosted Zones.</li>
<li>Choose Create Hosted Zone.</li>
</ul>
<p>For Domain Name, type the domain name that you own. For example: example.com.</p>
<p>Choose Create.</p>
<p>Next, add a CNAME record to the hosted zone. A CNAME record registers a domain name that you own as an alias of your web app environment’s elasticbeanstalk.com subdomain.</p>
<p>When an Amazon Route 53 DNS server receives a name request for your custom domain name, it resolves to the elasticbeanstalk.com subdomain, which resolves to the public DNS name of your Elastic Load Balancing load balancer, which resolves to your web app’s IP address.</p>
<p>Note<br>In a single-instance environment, the elasticbeanstalk.com subdomain resolves to an Elastic IP address attached to the instance running your web app.</p>
<p><strong>关于elastic beanstalk的价格</strong><br>有小伙伴在comment里面提问， 如果用完了一年的free-tier的话， 价格怎么计算呢? 可以参考下amazon的<a href="https://aws.amazon.com/elasticbeanstalk/pricing/" target="_blank" rel="external">这篇介绍</a>里面详细记录了EC2, S3, DB等等AWS相关服务的价格。如果是个人的side project, 对CPU和图片等用户信息存储的需求不是特别大的话， 免费的plan或者是micro的instance是完全够用的， 如果是在某方面的需求特别大， 比如说unsplash这个高清摄影图片分享的社区。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/bb0b5ef1d0298d11.png" alt="unsplash"></p>
<p> unsplash将用户上传的照片存储在Amazon的S3服务上会比较安全和便捷，(搭配着Imgix这个service使用)， 具体的网站花销可以参考<a href="http://backstage.crew.co/what-does-unsplash-cost/" target="_blank" rel="external">这篇博文</a>， 里面记录了unsplash一个月网站使用的各种服务的明细记录， 也可以给一些希望做图片分享社区的创业者们一个参考。一个值得注意的点是， unsplash的花销是比较适合借鉴的， 因为unsplash和目前许多的创业公司一样， 选择将自己的主服务host在heroku这个平台， 选择S3等等主流的服务， 不像一些更geeky的公司可能为了省钱就自己来搭建和管理自己的服务器和数据库。 当然， 管理成本和维护成本都要考虑进去， 所以综上我才认为unsplash的例子是非常值得借鉴的!</p>
<h2 id="参考链接">参考链接</h2><p>下面的链接是我在自己尝试搭建环境时参考的内容， 以及我选择free-tier的configuration的页面。其中就有以express为例子的服务端环境搭建。</p>
<ul>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html#set_aes_home_linux" target="_blank" rel="external">setting up EC2 cli on mac</a> we store EC2 api tool, aws-access-key and aws-secret-key in <code>~/.bashrc</code>, so that we can use the shortcut commands to do <code>init\create\deploy\open</code>. The common commands are listed as followed.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eb init</span><br><span class="line">eb create</span><br><span class="line">eb deploy</span><br><span class="line">eb open</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://docs.aws.amazon.com/quickstarts/latest/webapp/welcome.html" target="_blank" rel="external">A high level explanation of what EB does and what can we config</a> trying to give a high-level description of what is the use and purpost of each AWS service, including EC2, the reverse proxy server sitting in front of servers, router 53 and so on so forth.</li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html" target="_blank" rel="external">A detailed explanation of how to host an express app on EB full-step tutorial</a> The tutorial uses an express app to explain how to use EB.</li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs.html" target="_blank" rel="external">How to deploy a nodejs project to EB</a> similar to the previous tutorial post.</li>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html" target="_blank" rel="external">how to connect to EC2 instance using ssh</a><br>by using <code>ec2-describe-instances</code>, we can get the id of my instance.</li>
</ul>
<p>So after we have created an project, we go to the elastic beanstalk console, we will see the dashboard of all the application I host on EB such as the recent one(webscraper). The following is a screen capture of the configuration of that application on EB as in a free-tier plan:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/7c3a33a6cfab0843.png" alt="configuration"> In this page, we can set the scaling option from single instance to load-balanced configuration, and when we add a load-balancer, it will automatically adjust the number of instances depending on the need.</p>
<p>When you turn on load balancing, Elastic Beanstalk creates a load balancer, deletes the Elastic IP address from your environment, and provisions a new EC2 instance. Elastic Beanstalk also updates DNS records to point the web app’s domain name to the load balancer instead of to the IP address of a single instance.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文对目前市面上的主流Paas(platform as a service)提供商进行了比较， 比如heroku和amazon家的新星elastic beanstalk。并以一个nodejs爬虫的实例部署在了eb的服务器上。很多关于服务器端的概念也因此理清了， 比如reverse proxy server, dynamic IP addressing和后端的一些配置。也在文章中做个小结， 分享给感兴趣的大家。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://chocoluffy.com/tags/AWS/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[第一期]AirLoft组织动员宣言]]></title>
    <link href="http://chocoluffy.com/2016/04/27/%E7%AC%AC%E4%B8%80%E6%9C%9F-AirLoft%E7%BB%84%E7%BB%87%E5%8A%A8%E5%91%98%E5%AE%A3%E8%A8%80/"/>
    <id>http://chocoluffy.com/2016/04/27/第一期-AirLoft组织动员宣言/</id>
    <published>2016-04-28T01:46:44.000Z</published>
    <updated>2016-04-28T01:49:28.000Z</updated>
    <content type="html"><![CDATA[<p>The best education comes from inside. </p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/b000a844b66d48d1.jpg" alt="pink"></div>

<h2 id="Orientation">Orientation</h2><p>这个ada内部组织airloft成立的目的， 是我希望大家能在一个更加紧密和熟悉的环境下分享和学习课外知识， 采用github托管的形式是因为它管理代码的高协作效率和peer review的便捷。</p>
<p>为了保证大家自学步骤的一致性和自由发挥的空间， 我决定采取的是任务发布形式。 <strong>每周会由我或我指定的负责人发布1-2篇的教程或任务</strong>， 任务内容从刚入门的git的使用与协作， 到之后的网站样式布局， 移动端，动效设计，后端编程都会涉及， 而教程则主要来源于<strong>所有有心人对某些创意点子的实现过程无论成败的记录(任何人都可以发布)</strong>。 我不会在任务完成度上给大家太多压力， 但是所有的任务都会指向最终AirLoft移动端APP及一系列配套web app的诞生， 能够深入互动参与每个方向讨论和实践并自己动手coding的人， 也会收获远比完成一个作品， 一个产品更多也更重要的东西， being insightful and clear of what you really want to do。</p>
<p>组织内部大致的方向：<br>我主导的 - AirLoft reactive native的开发， 并将Airloft网站端从angular1.4全部由react重写。<br>朱子宁主导的 - 爬虫scripts， 对于校园内部热门活动消息，教务信息和周边消息的收集和呈现。<br>Joyce主导的 - 走进多大的web app及html5微信移动页面。<br>Jerry主导的 - 基于GPS的餐饮外卖信息呈现和成交平台。</p>
<p>每个方向都由不同的coding侧重点， 每个人可自由参与任意方向， <strong>不强制任务进度， 但强制定期分享。</strong>就最终成果而言， 作品与作品之间可以相互配合和改善， 举个例子， 我会使用服务器端的爬虫来收集兴趣小组的讯息， 会在之后的宣传阶段用html5写移动端的宣传页面， 而基于GPS本身就是AirLoft的功能基础。</p>
<p>而需要再强调一遍的是， <strong>任何人， 在任何时候， 都可以提出新的开发方向和想法， 无论关乎技术还是设计还是美工还是用户体验。</strong>我会欢迎脑洞， 折腾些好玩却可能“无用”的东西， 比如哪一周主题或许就是自学Sketch来给AirLoft换个图标？或者就开个repo去参加HackerRank？能带你自己一直走下去的， 不是压力， 是兴趣。</p>
<p>很多人会好奇我自己的成长轨迹， 而如果真的往回看， 我是在2015年3月29号那天， 在交换时期参加的一次hacker meeting上， 第一次见识到html\css\js， 那天的主题是用meteor.js和mongo在5min内搭建一个todo应用， 嘉宾是伯克利大二的一个学生。到现在学CS大概有1年了吧， 从一开始写javascript各种运动框架开始， 到用ruby on rails自己前后端折腾了5， 6个中型blogging, social或者API网站， 到上学期用react重写各种网站及耗时一个月的SPA应用Airloft， 和现在react native。 我并不觉得自己已经有能力开始回顾自己过去的作品和荣誉， 只是最近挺多人问我“如果想做课外的项目应该学些什么的问题”， 我把我自己的轨迹拿出来给大家参考。永远没有一步登天的成就， 去凭着兴趣摸索， 因为好奇而坚持， 是我能给的最好的建议。</p>
<p>Orientation动员会的最后， 和大家分享两句话， 第一句来自自己的体会， 第二句来自ECE516 prof: Steve Mann：</p>
<ul>
<li>the best education comes from inside.</li>
<li>the best way to learn is to teach.</li>
</ul>
<h2 id="第一期任务">第一期任务</h2><p>学会git的简单使用, 直接在org内创建一个新的repo， 添加一个readme.md文件， 在里面写上你对两件事的想法， <strong>1、关于社区建造。 你认为应该怎样打造一个经久不衰的社区？举个现实生活中的例子？为什么？ 怎么设计回馈和奖励机制能够造就一个好的社区？哪些设计体现或者暗示了这些机制？2、你对哪个具体开发方向感兴趣？如果在这方面有充足的能力， 你可以怎样贡献到哪个任务里？做出怎样的作品？</strong>， 或者直接在github网页端操作创建新的repo和添加新文件， 或者更佳推荐的方式是本地代码备份然后关联到github的相关repo再push你的本地修改。</p>
<p>创建好之后， 做第三件事， <strong>3、至少在其他一个别人的repo里面的issue panel提出你对他这个想法的看法和补充</strong>。</p>
<blockquote>
<p>任务解释， 比如我喜欢看hackernews， 我对它的投票机制特别感兴趣， 我就拿这个社区的各种机制来举例， 又或者我喜欢B站， 去尝试分析B站哪些设计是特别有用户吸引力的， 记录下来， 新创repo分享。所有可能遇到的问题， 尝试记录下来自己解决， 找不到办法， open一个新的issue然后在微信群里讨论讨论。</p>
</blockquote>
<p>参考的链接， 我在第二期任务发布的时候公布。开始折腾起来吧。</p>
<h2 id="题外话">题外话</h2><ul>
<li>暑假就是要好好浪的。周末去骑trail， 打球， 聚餐什么的都要约起来啊。</li>
<li>我喜欢爱折腾的小伙伴。 有什么想说的话都可以私戳我。</li>
<li>认真对待梦想。 可能这个时代最一文不值和被轻易低估的， 就是梦想了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The best education comes from inside. </p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于创业, 那些不能说的秘密]]></title>
    <link href="http://chocoluffy.com/2016/04/25/%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%EF%BC%8C-%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://chocoluffy.com/2016/04/25/关于创业，-那些不能说的秘密/</id>
    <published>2016-04-26T03:39:01.000Z</published>
    <updated>2016-04-26T12:56:49.000Z</updated>
    <content type="html"><![CDATA[<p>每个人， 在每个阶段， 都会有个不容分说的理由。</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/88dd510b8366b952.jpg" alt="preface image"></p>
<p>趁着考完期末考的一段自由时间， 把之前一直积压着的两本书给读完了。</p>
<div style="text-align:center" markdown="1"><br><img src="http://ac-TC2Vc5Tu.clouddn.com/e98f89a56b7989aa.jpeg" alt="the hard thing about hard things"><br></div>

<p>第一本是来自Ben Horowitz的创业维艰， 前半段描述了他管理Loudcloud到Opsware将一个濒临破产的公司带到最后以16亿美元的价格被惠普收购的传奇经历， 后半段则记录下了他对公司管理的各个细节的心得思考。巧合的时， 就在我阅读这本书的期间， 曾任多家上市公司董事， Ben的精神导师Bill Campbell逝世了。 他对Ben说的那句， “要和员工一起宣布这个消息”的告诫仿佛还历历在目， 通过Ben的描述， 看得出Campbell极其富有同理心(empathy)的领袖气质。 向Campbell致敬。</p>
<div style="text-align:center" markdown="1"><br> <img src="http://ac-TC2Vc5Tu.clouddn.com/6ceefbf6929babac.png" alt="toureet"><br></div>

<p> 第二本书是硅谷创业者陈天的随笔。 在一个充斥着来自CEO乃至风险投资人视角的创业回顾的环境下， 一个来自技术合伙人(CTO)的视角显得尤为可贵。 从最早的技术选型(为什么用Django)， 到带领其它技术人员的开发和维护(4台EC2)， 到技术过渡和商业选择， 陈天给了一份很详细和真挚的参考选项， 也让一个非商圈的学生， 慢慢了解到国内白手起家创业的一条非常有代表性的道路。感激陈天老师的分享。</p>
<p>曾经一直以为， 创业是一件离自己很远的事情。直到一个月前， 一个多伦多大学毕业的直系师兄找到我来聊聊创业的可能。 他希望我能够以技术合伙人的身份帮他做出一个类似airbnb的网站和移动端， 已经有另外两个商科毕业已经工作的学姐愿意参与市场营销和推广， 万事具备， 就差个程序员了。</p>
<p>也是第一次， 我感觉到创业， 其实也只是一种选择罢了， 突然想到一句微博上看到的话， “对有能力的人来说， 很多事情不是机会， 而是选择。”， 我当然不觉得我自己有能力和把握在这个阶段就合适技术合伙人的身份， 只是当我在一个旁观者的角度去看我身边的故事时， 好像创业， 也并没有倾家荡产， 孤注一掷般的惊天动地， 好像创业， 更像是创始人在生命某个时期赴的一场约， 选择了一条人迹罕至的路， 也由此义无反顾。</p>
<p>下面是我在阅读时记录下的文字， 从我的角度出发， 或摘录， 或直接是自己的感受， 像《金蔷薇》里那个收集着金色尘土的老人， 我把它们留在这里：</p>
<h2 id="The_hard_thing_about_hard_things">The hard thing about hard things</h2><ul>
<li>在团队有十几个人的时候， 我招了一个人力管理人员， 专门帮我们招聘最聪明的人从硅谷。</li>
<li>Ben从一个同事分享的mosaic浏览器， 发现这就是未来， 于是第二天就去面试mosaic公司。</li>
<li><strong>究竟为什么要上市？</strong> 在文中， 作者是在2000年互联网泡沫的时候， 发现私人资金已经没有出路的时候， 想到公开上市， 认为公开市场， 会有更多的人来给自己投资， 而不是一直以来私人投资者的钱。</li>
<li><strong>如何做资产重组？</strong> 在Ben即将破产的时候， 他问他自己， 如果要退出， 他会怎么做， 他说他会把opsware带出来卖给别人用， 因为这是他自己开发的， 他知道这个特别好用， 但是基于当时的情况， 这个软件被限制住， 没法和loudcloud分离开用， 于是他回去分配了一个精英小组去尝试从现有软件分离出来。</li>
<li>在紧急情况的时候， 有很有多人议论你， 他们有些人是因为同情， 因为关心， 也可能是想摧毁你。 也会有很多人想帮你， 想帮你摆脱困境， 给出各种各样的建议。 永远从数据和具体情况出发， 没有任何一个旁观者有这个耐心帮你理顺所有的商业策略， 如果你任凭那些根本不了解具体情况的人对公司指手画脚， 那公司就无药可救了。</li>
</ul>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/93c8d666c10be4ba.png" alt="pied piper"></p>
<p><strong>很多时候， 我们都会评论那些伟大的CEO， 很自恋自大， narcisist， 专制。 然而他们只是没有听进去那些愚蠢的建议吧了， 又有谁比他们更清楚公司发展的每一个细节呢？</strong></p>
<ul>
<li><p>EPS真正想要的是tangram这家公司的软件， 而opsware在tangram比较低股价的时候收购了tangram， 让主要负责融洽opsware的EPS负责任frank特别高兴。也就是Ben他的要求， 弄清楚买方到底想要什么， 去提供他最想要的东西， 而不是一个劲地夸自己好。</p>
</li>
<li><p>同时非常重要的也是团队会议， Ben在两次会议中表现都超出了我的意料。第一次在计划从loudcloud中分离出opsware的时候， Ben将新公司的股票送给所有人， 同时允许有人决定退出。 “我不会送你出门， 但我汇帮你找份新的工作。要明确自己此刻所站的位置， 哪些人可以依靠。告诉大家你的决定。”<br>第二次， 在遇到bladelogic这个强劲的对手的时候， Ben再次开了一个全体的会议， 和大家说明白， 他需要大家， 在未来的6个月里面卯足了劲， “我要你们和你们最关心的人认真地谈一次话， 我们需要一次达成目标。”</p>
</li>
<li><p>研发出好产品是创新者的职责， 而不是客户。 <strong>客户只知道根据现在的产品体验来判断自己想要什么。</strong></p>
</li>
<li><p>在会议中添加一项， “我现在没有做什么” 的议程。而大家觉得的还没有做到的事， 都是一致的。那就是自动化。在公司慢慢做大的时候， 会有很多收购的声音， 其中， 你也会<strong>仅仅因为别人打算收购的意愿而得到股票的溢价</strong>， 要看清楚自己的价值。 同时， 也充分了解自己的直系下属他们的意愿。</p>
</li>
<li><p>而对于一个CEO能力的最好的考量， 是逆境不是顺境， 是专心致志的能力， 和在走投无路的时候选择最佳路线的能力。不是去如何不犯错误， 而是在犯错误之后如何去深刻理解那些你必须要做的事。</p>
</li>
<li><p>当你意识到一个CEO的职责就是为公司解决问题的时候， 你就知道， 有些没有用的空话可以省去了。</p>
</li>
<li><p><strong>在人类的所有交往中， 沟通量和信任程度成反比。</strong>现在很多的公司文化会阻碍坏消息的传播， 真相如果永远只能被戏谑地说出来， 那么等到采取行动的时候就晚了。建立一个奖励文化， 对找到问题症结和解决方案的人给予奖励。于此同时， 公司的任何决策必须当机立断， 比如像裁员这一类的重大决定， 如果不小心走漏风声， 当员工过来质问管理层的时候， 管理者就只有两种选择了， 要么表现出不知情， 要么就是撒谎， 而这其中任何的一个行为都会破坏公司文化。</p>
</li>
<li><p>对待裁员。 裁员对公司的最大伤害就是士气。而士气低下的主要表现症状就是怀疑， 所以越是困难的时候， 就越要坦诚相待你的员工。同时， 这是一个非常严重和严肃的时刻， 需要一名直接亲属上司去温和地解决这个事情， 你只要记住， 你的员工可能并无法记得他在这里工作的每一天， 但是他一定会记住他被辞掉的那一天。 <strong>永远记得， 聪明是一种天赋， 而善良是一种选择。</strong> 但是有一点也很重要， <strong>话是说给留下来的人听的</strong>， 你怎么对待那些被辞去的员工， 在困难时候， 就会是留下来的员工的一次自我映照。</p>
</li>
<li><p>一定要明晰什么时候笨办法最有用， 不是欺骗自己说， “产品是完美的， 是没有问题的， 问题出在销售人员， 问题出在用户的三分钟热度。”， 不， 问题是， 产品不够好。</p>
</li>
<li><p>不让这个公司最精英的人才去参与最棘手的问题， 完全就是浪费。<strong>一个人， 无论多出色， 都解决不了他不了解的问题。也就像开源社区所倡导的一样， 只有有足够多的眼镜， 就可以让所有问题浮出水面。</strong></p>
</li>
<li><p>很多时候， 你会吩咐很多指令给你的下属， 但他们并不一定会严格执行， 甚至不会执行这些要求。 而这种现象的背后原因是， <strong>你只告诉了他们应该怎么做， 他们却不知道为什么要这么做。</strong>一个好的工作环境就是， 每个人早上一睁开眼睛就知道自己所做的工作高效有用。管理层需要和每个员工有一对一的会面。当然就有人问了， 好的工作环境和坏的工作环境有什么区别， 是的， 在一切顺利的时候， 没有区别， 你的亮眼成绩会遮住所有可能质疑声的嘴， 问题不是没有， 而是让解决问题的人自我怀疑了。 但是一旦在事情不顺利的时候， 好与坏就是生与死的差别。</p>
</li>
<li><p><strong>如何对生产力进行直观的测量？</strong></p>
</li>
<li><p>好的产品经理会将一些重要问题以书面形式纪录下来， 竞争中的良策， 艰难的架构选择， 艰难的产品选择。而差的产品经理， 只会以口头的方式表达自己的意见。</p>
</li>
<li><p>大公司的主管都是应答式的, 当有事情要实例， 接受到命令之后， 才会去执行。而小公司的主管， 创业公司的管理者， 你不自己主动承担起很多的责任这个公司就倒了啊。一种很危险的情况就是， 在创业公司艰难的时期， 你雇用了一个认股数还不小的高薪高管， 他好像并没有干什么事， 却能够占到一定比例的利润。这就是并不适应节奏的管理层， 对创业公司的奋斗员工有很大的打击。</p>
</li>
<li><p><strong>关于招聘</strong>。 永远要提醒自己， 我们是找谁拥有解决问题的能力， 而不是谁看上去最适合。每个人都会有或多或少的缺点， 他可能不善于表达， 他可能有点自大， 有点脾气躁， 这些特质都不应该迷惑你真正找寻的目标。 尤其是在国内这个鱼龙混杂的招聘市场， 明明优秀的人就已经是凤毛麟角了， 如果你还只关注缺点， 只希望站在高处评论一番自我麻醉的话， 这对公司就太可惜了。<strong>写下你认为检验人才最好的几个问题， 形成面试的规范。</strong></p>
</li>
<li><p>一个好的管理者思考问题从是会有两个角度， 一个是我想怎么做， 另一个是员工会怎么想。</p>
</li>
<li><p>办公室政治</p>
<ul>
<li>如果你的员工给你提加薪的要求？ 拒绝， 如果你接受了这个要求， 其他员工会认为你加薪是因为你提出了这个要求而不是因为你出色的业绩。 这个会让其他人更加跃跃欲试。坏处二， 那些办公室里老实沉默， 或者对这种政治手段不敏感的人， 是不是就错过了加薪的机会呢？其中一个避免的方法就是<strong>保证员工收入和公司收入之间的一致性</strong>。</li>
<li>如果你的员工给你提希望扩大权力范围的要求？一个绝对不能触碰的底线是， 你给他一个口头承诺， 给了小道消息一次机会。 记住， 在公司的决策方案是， <strong>决策即出， 立即执行， 不要在交谈的时候流露出任何口头承诺的倾向</strong>。</li>
</ul>
</li>
</ul>
<ul>
<li><p>不要因为你在业务上缺乏经验就降低对他们工作的要求。很多年经轻轻的CEO， 会因为在公司创立之初媒体发布的几篇正面报道而喜出望外。这个标准太低了。</p>
</li>
<li><p>管理一家创业公司就像驾驶着一辆高速行驶的汽车， 当你以一个高速过弯的时候， 千万别看墙， 如果你看着墙， 你就直接撞上去， 盯着路， 你就安然无恙。</p>
</li>
<li><p>Ben他们建立一个风投公司的初衷， 就是发现了技术性创始人CEO和职业CEO的区别， 那些伟大的技术型驱动的公司都是由创始人经营的， 然而技术型创始人在管理上， 人脉上和营销宣传上有很大的不足。</p>
</li>
</ul>
<blockquote>
<p>后记： 对于《途客圈》一书的总结回顾将会分开在另外一篇博文中， 主要探讨工具性和社交性产品的比较和更多创始人必须注意的具体股权结构， 敬请期待。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>每个人， 在每个阶段， 都会有个不容分说的理由。</p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创意视频分屏 - HTML5 & JS]]></title>
    <link href="http://chocoluffy.com/2016/04/23/%E5%88%9B%E6%84%8F%E8%A7%86%E9%A2%91%E5%88%86%E5%B1%8F-HTML5-JS/"/>
    <id>http://chocoluffy.com/2016/04/23/创意视频分屏-HTML5-JS/</id>
    <published>2016-04-24T01:53:56.000Z</published>
    <updated>2016-05-05T18:56:44.000Z</updated>
    <content type="html"><![CDATA[<p>和朋友聊天时无意间发现的一个创意视频分屏的想法， 来自<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#at-a-glance" target="_blank" rel="external">beoplay</a>这个高端耳机的宣传页面， 在自己实现的过程中， 也发现了视频自适应居中的这个设计细节， 自己也捣鼓了出来， 话说在之后产品的宣传主页视频可以一试的， 从两个视角去诠释同一个故事， 就是对这样有心思的设计细节没有任何抵抗力呢。</p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><br><img src="https://dl.dropboxusercontent.com/s/09k1efohvmdkphu/beoplay%20demo.gif?dl=0" alt="beoplay"><br></div>

<p>目标： 仿造beoplay这款耳机<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#video" target="_blank" rel="external">主页的宣传视频</a>来实现一个类似的视频分屏的效果。</p>
<p>版本1.0（不加视频自适应居中）:</p>
<div style="text-align:center" markdown="1"><br><img src="https://dl.dropboxusercontent.com/s/zppojylzfsyk6in/screensplit1.0.gif?dl=0" alt="demo1.0"><br></div>

<p>right video是静止的不动的， 同时位于最底层。 目前所有的伸缩都是在控制left video， 同时由于我们设置了left video的<code>z-index</code>为3， 那么左边的视频会覆盖在右边的视频上。接下来的目标就很明确了， 我们需要追踪鼠标在整个container里面的位置(我们会用占宽度的百分比来表示)， 然后， 通过改变左边视频的宽度， 同时也就把位于下面的右边视频暴露出来了， 来达到切换的效果。</p>
<p>理解到这一步之后，目标就是<strong>如何改变视频宽度</strong>了。这里其实隐藏着一个陷阱， 就是因为我们不可以直接改变<strong>视频本身的宽度</strong>，因为视频的高宽比在拍摄的时候就决定了， 我们如果只拉长视频而不同时提高高度的话， 就会使得在纵轴上部分内容被遮盖到， 大致意思如图：</p>
<div style="text-align:center" markdown="1"><br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f37ixae23nj219e0oe77a.jpg" alt="oversizing"><br></div>

<p>而这并不是我们想要的效果， 我们希望， 视频可以维持在同一个大小，而改变的只是<strong>视窗的横向移动</strong>，<br>这一步我用到了一个trick， 就是<code>overflow: hidden;</code>， 我们在左边的视频外面包住了一层<code>div</code>， 因为我们控制的就是左边的视频， 然后我们来改变这个“wrapper”的宽度（同时保证保证里面的left video的宽度占比仍然占最外面container的100%）， 来改变我们的视窗， 所以这个wrapper在网页上所包住的部分， 加上了<code>overflow: hidden;</code>遮去了超出部分后， 显示的就是左边的视频了。</p>
<p>比如一开始， 我们希望两个视频都各占一半， 那么左边的视窗一开始就会是占比原container的宽度的50%， 而原视频本身的宽度应该不变， 即container的宽度的100%， 所以我们需要给left video赋上200%的宽度， 理由是这个属性是对其直接父级的div起作用的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* clipper 即左侧视频的视窗 */</span></span><br><span class="line"><span class="id">#clipper</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该属性作用于左侧视频  */</span></span><br><span class="line"><span class="id">#clipper</span> <span class="tag">video</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">10</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<div style="text-align:center" markdown="1"><br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f37j53tshej21a20o643j.jpg" alt="init"><br></div>

<p>之后的事情就清楚了， 我们只需要改变<strong>左边视窗的宽度， 并同时保证视频本身相对原容器的宽度不变</strong>。写的js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = videoContainer.getBoundingClientRect(),</span><br><span class="line">offset = e.pageX - videoContainer.offsetLeft,</span><br><span class="line">position = ((e.pageX - videoContainer.offsetLeft) / videoContainer.offsetWidth) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (position &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">	videoClipper.style.width = position+<span class="string">"%"</span>;</span><br><span class="line">	leftVideo.style.width = ((<span class="number">100</span>/position)*<span class="number">100</span>)+<span class="string">"%"</span>;</span><br><span class="line">	leftVideo.style.zIndex = <span class="number">3</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单地说， 只需保证<code>videoClipper.style.width * leftVideo.style.width = 100%</code>即可。</p>
</blockquote>
<p>那最后一个改变<code>z-index</code>的目的， 就是确保左边的视频一直叠加在右边的视频之上。</p>
<p>版本2.0（增加了自适应居中）：</p>
<div style="text-align:center" markdown="1"><br><img src="https://dl.dropboxusercontent.com/s/8y6fr3ib87yz9h7/screensplit2.0.gif?dl=0" alt="demo2.0"><br></div>

<p>初衷： 因为从拍摄的角度， 大部分的时间， 我们都会把拍摄的主体放在视频的中间位置， 而如果我们只是简单地移动视窗而不改变视窗的主角位置的话， 我们在鼠标移动的时候， 就只能看到边边角的视频内容了， 这违反设计直觉。</p>
<p>因此我们希望在移动视窗的同时， <strong>同时移动视频本身的位置来弥补视窗的偏差</strong>。相应的js代码是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">offset = e.pageX - videoContainer.offsetLeft,</span><br><span class="line">offsetRight = videoContainer.offsetWidth - offset,</span><br><span class="line"></span><br><span class="line"><span class="comment">// for adaptive resizing:</span></span><br><span class="line">rightVideo.style.webkitTransform = <span class="string">"translate("</span> + offset / <span class="number">2</span> + <span class="string">"px, 0)"</span>;</span><br><span class="line">leftVideo.style.webkitTransform = <span class="string">"translate(-"</span> + offsetRight / <span class="number">2</span> + <span class="string">"px, 0)"</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>画外音： 使用<code>transform</code>来改变DOM元素的位置相比直接改写他们的”定位属性“有很多好处， 其中最突出的就是， transform使用的是GPU， 而那些<code>top\left</code>等的定位元素使用的是CPU， 我们希望充分利用GPU和它提供的硬件加速， 同时<code>transform</code>也不会触发网页的repaint， 从而在渲染上更加的smooth和fast。</p>
</blockquote>
<p>那这个地方，<code>offset</code>就是鼠标在container里面距离左边边框的距离， 那么我们同时根据这个距离， 让左边的视频在视窗移动时， <strong>往相反的方向以一半的速度移动来弥补视窗偏差</strong>。使得可以在视窗移动的时候， 始终保持视频本身拍摄的主体视角也处于该视窗的主体视角! 原理可以参考这个图：</p>
<div style="text-align:center" markdown="1"><br><img src="https://dl.dropboxusercontent.com/s/t99wbc4n3s8c4r7/screensplit3.0.gif?dl=0" alt="demo3.0"><br></div>

<p>那么也就大功告成啦!</p>
<blockquote>
<p>总结： HTML5对media文件更多功能上的支持使得我们可以更好的操作media文件， 包括视频的开始暂停， 以及各种音量的调节， 而这个程序实例， 是一个很好的对相关API的使用的一个示范和一个小小的创意细节。这个项目， 也是饭后和朋友聊天聊出来的实现方案，也希望看到更多的创意脑洞和美的设计!</p>
</blockquote>
<p>这个是这个项目的<a href="https://github.com/chocoluffy/screen-split-video" target="_blank" rel="external">github repo</a>, 这个是项目的展示<a href="http://chocoluffy.com/screen-split-video/">demo</a> 欢迎评论和star~</p>
<h2 id="Q&amp;A">Q&amp;A</h2><p>后续的一些疑问和解答：(基于V2ex和微博的评论)</p>
<p><strong>跟<a href="http://www.mi.com/hezi3s/" target="_blank" rel="external">这个链接</a>中间的 2K－4K 对比差不多一个意思？</strong><br>A: 哈哈在分屏效果上是类似的， 不过那个对图片的处理就会简单很多啦， 感觉就是在某个位置以左叠加一个高斯模糊的滤镜就可以了~ 相比之下， 对视频的处理还要考虑到视窗和视频本身的移动呢! 不过谢谢分享啦!</p>
<p><strong>多个声音怎么办？两个声音会重叠嘛？</strong><br>A: 我做了音轨的渐变处理， 也就是根据视频的相对大小来相对改变音量， 也就是说， 当某个视频占主体位置的时候， 另一个视频的声音是会渐弱的， 这样可能使用体验更好吧! 在博文最后有 demo 的网址， 你可以试试， 我 host 在了 github pages 上， 对了， 这个 demo 只在桌面端 work ， 在手机端还是实现不了这个效果呢， 有点可惜啦， 如果有改进的建议的话， 希望能提出来啦~</p>
<p><strong>快速拉扯的时候边缘缝隙比较大?</strong><br>A: 啊对的！我调试的时候也发现是有， 原因也很明显， 我只对整个 container 绑定了 mousemove 事件， 而 html 页面其他元素是不会监听 mousemove 的， 因此当鼠标快速移出 container 的时候， 就会发现边缘缝隙较大了， 我现在就改改 code ， 加个 condition ， 如果鼠标在 container 之外， 就把视频宽度订死为全屏~谢谢啦!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>和朋友聊天时无意间发现的一个创意视频分屏的想法， 来自<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#at-a-glance">beoplay</a>这个高端耳机的宣传页面， 在自己实现的过程中， 也发现了视频自适应居中的这个设计细节， 自己也捣鼓了出来， 话说在之后产品的宣传主页视频可以一试的， 从两个视角去诠释同一个故事， 就是对这样有心思的设计细节没有任何抵抗力呢。</p>]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://chocoluffy.com/tags/HTML5/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN全栈开发[第三期-Mongo数据库搭建REST API]]]></title>
    <link href="http://chocoluffy.com/2016/03/22/MEAN%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%89%E6%9C%9F-Mongo%E6%95%B0%E6%8D%AE%E5%BA%93%E6%90%AD%E5%BB%BAREST-API/"/>
    <id>http://chocoluffy.com/2016/03/22/MEAN全栈开发-第三期-Mongo数据库搭建REST-API/</id>
    <published>2016-03-23T02:50:55.000Z</published>
    <updated>2016-03-23T02:55:29.000Z</updated>
    <content type="html"><![CDATA[<p>AirLoft的原型。 第三期， 基于mongodb的mongoose来搭建RESTful API， 主要包括了关于各类涉及到对象的GET, POST, PUT DELETE方法的实现。 在postman上不断的模拟， 也最终搭好一个稳定且flexible的后端API处理， 剩下的就是将数据库和这个Express App的controller结合， 并在前端上灵活的应用啦！如果说前端就像一个人的妆容， 那么数据库以及API处理就是他的谈吐和内涵， 这个应用也有了scaling的能力， 加油!</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/c5ee78b5jw1f26lk141v7j21kw0tjn61.jpg" alt="screenshot"></p>
<h2 id="前言">前言</h2><p>In MVC architecture, we need to have views without content or data. An common way to implement MVC architecture is to <strong>first build up a frontend clickable prototype, then extract the content from the view back to controller(concerned with data structure), then back to model.</strong> And now we are in the second step, we try to put variable in jade file in place of content, and put the content as variable into the controller.</p>
<h2 id="Mongoose">Mongoose</h2><p>First set up a connection URI like: <code>var dbURI = &#39;mongodb://localhost/airloft&#39;;</code>, username, password and port number is optional for localhost.</p>
<p>A stupid mistake!! Need to open the <code>mongod</code> before you tried to connect to it. One thing to notice is that Mongoose connection doesn’t automatically close when the application restarts or stops. In order to do that whenever we restart the <code>nodemon</code>, we will need to listen for nodejs event. Nodemon uses <code>SIGUSR2</code>, application termination uses <code>SIGINT</code>, Heroku uses <code>SIGTERM</code>, like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> graceShutDown = <span class="function"><span class="keyword">function</span>(<span class="params">msg, callback</span>)</span>&#123;</span><br><span class="line">	mongoose.connection.close(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'Mongoose is closed through '</span> + msg);</span><br><span class="line">		callback();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">process.once(<span class="string">'SIGUSR2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	graceShutDown(<span class="string">'nodemon restart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		process.kill(process.pid, <span class="string">'SIGUSR2'</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>use <code>process.once</code> to overwrite the default <code>SIGUSR2</code> function, but then use <code>kill</code> to resend the <code>SIGUSR2</code> signal again, but this time we hook up a msg display functionality. Especially the place, we use <code>process.once()</code> instead of <code>process.on()</code> in the <code>SIGUSR2</code> case, since nodejs will listen for the same event, and if we use <code>on</code>, then it will forms a infinite loop. Note that <code>process.kill()</code> serves the functionality of sending the signal.</p>
<blockquote>
<p>Recap: Basically four step as discussed here, first define a connection URI string, then second setup the db connection; third monitor the mongoose connection events like <code>connected</code> and <code>disconnected</code>, and fourth monitor the node process event in order to close the db connection when we restart.</p>
</blockquote>
<p>From view to controller, finally to store in db is what we have gone through so far. It works pretty well, since the moment we move the data to the controller, we gradually solidy the data structure we want to use!!</p>
<p>Some technical names: “path” is like attribute names in relational database while “property object” is like the values but like other JS object, can be nested. Also, we can add data validation inside the schema, two advantages: </p>
<ul>
<li>save the roundtrip time to datebase</li>
<li>save the code inside the application for validation.</li>
</ul>
<p>Adding indexes can make database search more efficiently, jist like adding index to the files you want to search in your drawer. In order to add a GeoJSON path into your application, you only need to do this: <code>coords: {type: [Number], index: &#39;2dsphere&#39;}</code>; using <code>2dsphere</code> allows mongodb to be able to calculate the geolocation fast, thus <strong>it is helpful to build a location-based application.</strong></p>
<p>Subdocument is helpful when handling nested data structure, one thing to note, when creating attributes like <code>timestamp</code>, we use data type called <code>Date</code>, like:   </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reviewSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	rating: &#123;type: <span class="built_in">Number</span>, <span class="string">"default"</span>: <span class="number">0</span>, min: <span class="number">0</span>, max: <span class="number">5</span>&#125;,</span><br><span class="line">	author: <span class="built_in">String</span>,</span><br><span class="line">	createdOn: &#123;type: <span class="built_in">Date</span>, <span class="string">"default"</span>: <span class="built_in">Date</span>.now&#125;,</span><br><span class="line">	text: <span class="built_in">String</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1f1wrkszhcej218w0u6wib.jpg" alt="mongo"> 这张图讲得很清楚， schema是application-side的东西， 每一个model是的实例instance通过schema可以map到database里面的每一个document, 1:1的对应关系。</p>
<p>While typing in <code>mongod</code> will let you start the mongodatabase, using <code>mongo</code> will start tht shell and let you connect to the test database. And some useful commands in mongo go here:</p>
<ul>
<li><code>show dbs</code> to show all existing database so far.</li>
<li><code>use local</code> to switch to another database. And if that db doesn’t exist yet, mongo will create it for us.</li>
<li><code>show collections</code></li>
<li><code>db.startup_log.find()</code> returns all the content from collection, uesful when we check whether the data has been saved.</li>
<li><code>db.missions.save({...})</code> will savev a new document into collection.</li>
<li><code>db.inventory.remove({})</code> will remove all documents in collection <code>inventory</code>.</li>
<li><code>db.missions.update()</code> will query a document and update its content. The first argument is query string, and second argument use <code>$push</code> to insert subdocuments.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &gt; db.locations.update(&#123; </span><br><span class="line">   name: <span class="string">'Starcups'</span></span><br><span class="line">  &#125;, &#123; </span><br><span class="line">    $push: &#123;</span><br><span class="line">      reviews: &#123;</span><br><span class="line">        author: <span class="string">'Simon Holmes'</span>,</span><br><span class="line">        id: ObjectId(),</span><br><span class="line">        rating: <span class="number">5</span>,</span><br><span class="line">        timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Jul 16, 2013"</span>),</span><br><span class="line">        reviewText: <span class="string">"What a great place. I can't say enough good things about it."</span></span><br><span class="line">      &#125; </span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>So far, we have insert a fake data document in our local computer, but in real life, <strong>we want database to be externally accessible.</strong> use <code>heroku addons:add mongolab</code> to register a db URI at mongolab as a heroku addons.<strong> And use <code>heroku addons:open mongolab</code> to go the website interface to check database details. </strong>In order to get the uri of the database, type <code>heroku config:get MONGOLAB_URI</code>. </p>
<blockquote>
<p>Note that in real practice, I have to fixed a typo bug from my previous data stored in mongolab, I have to first go to the mongo shell to <code>remove({})</code> and <code>insert({...})</code> again, then do the <code>mongodump</code> and <code>mongorestore</code> again to dump the data into the temp folder at <code>~/tmp</code> and push the data to live database. And make sure to press the “Delete all collection” button before we did <code>mongorestore</code> to avoid same key collision.</p>
</blockquote>
<p>After receive URI, we will first dump our localhost data into a folder in local computer, then restore the data to the live database. use <code>mkdir -p ~/tmp/mongodump</code> will create a folder to hold up the dumped data. Note that use <code>-p</code> option will create the non-existed folders on the path like “tmp”.</p>
<ul>
<li>use <code>mongodump -h localhost:27017 -d airloft -o ~/tmp/mongodump</code> to export airloft.missions data into BSON.</li>
<li>use <code>mongorestore -h &lt;host and port number&gt; -d &lt;live database name&gt; -u &lt;username(same as database name)&gt; -p &lt;password&gt; &lt;path to dump data folder&gt;</code> to push the data up to the mongolab live database.</li>
<li>Last step(testing), we can use <code>mongo hostname:port/database_name -u username -p password</code> to change the <code>mongo</code> to interact with an external database. Note that in the last two steps, database name is the same as username. Then, we can use commands introduced before to interact with live database. In summery, we have one source code and can be used to manipulate databases at two locations, one in local computer, a test database, and one in Heroku, a live database.</li>
</ul>
<p>Let application use right database. use <code>heroku config:set NODE_ENV=production</code> to set the environment variable <code>NODE_ENV</code> to be production for Heroku. <strong>Environment variable will affect the way the core process runs.</strong> When we tried to use <code>nodemon</code> to start application, one way to make sure what environemnt we are running in is to prepend a ENV variable before nodemon like <code>NODE_ENV=production nodemon</code>, and corresponds to this change, we also change the code in db.js(with a if-else block) to set the dbURI aligned with environment. In application, we can access to such variable by <code>process.env.NODE_ENV</code>, but since we post it in public repo, we don’t want our credentials to be public. Instead, we use environment variables from Heroku configuration.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dbURI = <span class="string">'mongodb://localhost/airloft'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'production'</span>)&#123;</span><br><span class="line">	dbURI = process.env.MONGOLAB_URI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mongoose.connect(dbURI);</span><br></pre></td></tr></table></figure>
<h2 id="REST_APIs">REST APIs</h2><p>REST is an architecture style, it’s stateless, meaning it will not recognize users or history. Having such program interface will allow us to talk to our database through HTTP and perform CRUD operations then send back a HTTP response. An way to construct URLs is to think about the collections in our database. In ‘airloft.missions’ collection, we may want to allow operations like:</p>
<ul>
<li><code>/missions</code> to create an new mission.</li>
<li><code>/missions</code> to read all missions.</li>
<li><code>/missions/&lt;index&gt;</code> to read a specific mission.</li>
<li><code>/missions/&lt;index&gt;</code> to update a specific mission. And so on so forth.</li>
</ul>
<p>As we can see the urls are same for several operations, and we will use different request methods to tell the server what action to take.</p>
<ul>
<li><code>POST</code> to create new data in database(from submitting form).</li>
<li><code>GET</code> to read data.</li>
<li><code>PUT</code> to update a document.</li>
<li><code>DELETE</code> to delete a document.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// missions</span></span><br><span class="line">router.get(<span class="string">'/missions'</span>, ctrlMissions.missionsListByDistance);</span><br><span class="line">router.post(<span class="string">'/missions'</span>, ctrlMissions.missionsCreate);</span><br><span class="line">router.get(<span class="string">'/missions/:missionid'</span>, ctrlMissions.missionsReadOne);</span><br><span class="line">router.put(<span class="string">'/missions/:missionid'</span>, ctrlMissions.missionsUpdateOne);</span><br><span class="line">router.delete(<span class="string">'/missions/:missionid'</span>, ctrlMissions.missionsDeleteOne);</span><br></pre></td></tr></table></figure>
<p>Then in the corresponding controller files, we define these functions and fill them with the simplest response to display when received such request.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendJsonRes = <span class="function"><span class="keyword">function</span>(<span class="params">res, status, content</span>)</span>&#123;</span><br><span class="line">	res.status(status);</span><br><span class="line">	res.json(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.missionsListByDistance = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	sendJsonRes(res, <span class="number">200</span>, &#123;<span class="string">"status"</span>: <span class="string">"success"</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="“GET”_method_implementation">“GET” method implementation</h2><p>Some useful queries in Mongoose:</p>
<ul>
<li><code>find</code> general search based on query object.</li>
<li><code>findById</code> look for specific ID.</li>
<li><code>findOne</code> get the first match document.</li>
<li><code>geoNear</code> find geo-closef query.</li>
<li><code>geoSearch</code> add query functionality to geoNear operation.</li>
</ul>
<p>After using queries, we use <code>exec</code> method execute the query and passes a callback function that will run when the operation is complete. The callback function should accept two parameters, an error object and the instance of found document.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendJsonRes = <span class="function"><span class="keyword">function</span>(<span class="params">res, status, content</span>)</span>&#123;</span><br><span class="line">	res.status(status);</span><br><span class="line">	res.json(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.missionsReadOne = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	Missions</span><br><span class="line">		.findById(req.params.missionid)</span><br><span class="line">		.exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">200</span>, mission);</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we want to add error checking like this: note that we can also utilize <code>console.log</code> to print out some useful information about the data in terminal since we use <code>nodemon</code>. </p>
<p>In real practice, we may not always want to retrive a whole document from mongodb, we may only just need some specific data. Thus, we can limit the data being passed around to improve speed, using <code>select</code> to retriece only “name” and “reviews” entry from a document in collection. Like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.reviewsReadOne = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(req.params &amp;&amp; req.params.missionid &amp;&amp; req.params.reviewid)&#123;</span><br><span class="line">		Missions</span><br><span class="line">			.findById(req.params.missionid)</span><br><span class="line">			.select(<span class="string">'name reviews'</span>)</span><br><span class="line">			.exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(!mission)&#123;</span><br><span class="line">					sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">						<span class="string">"message"</span>: <span class="string">"missionid not found"</span></span><br><span class="line">					&#125;)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(err)&#123;</span><br><span class="line">					sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">var</span> response, review;</span><br><span class="line">				review = mission.reviews.id(req.params.reviewid);</span><br><span class="line">				<span class="keyword">if</span>(!review)&#123;</span><br><span class="line">					sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">						<span class="string">"message"</span>: <span class="string">"reviewid not found!"</span></span><br><span class="line">					&#125;)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				response = &#123;</span><br><span class="line">					mission: &#123;</span><br><span class="line">						name: mission.name,</span><br><span class="line">						id: req.params.missionid</span><br><span class="line">					&#125;,</span><br><span class="line">					reviews: review</span><br><span class="line">				&#125;;</span><br><span class="line">				sendJsonRes(res, <span class="number">200</span>, response);</span><br><span class="line">			&#125;);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">			<span class="string">"message"</span>: <span class="string">"No missionid or reviewid in request"</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Apart from the error checking in the above code, we can use <code>id</code> to query subdocument the <code>_id</code> entry. <strong>note that in the raw data, I mistakenly put the entry name to be <code>id</code> instead of <code>_id</code>, which causes me to re-insert the data again to let the <code>id()</code> work for subdocument.</strong></p>
<p>These above example codes shows us how to simulate “GET” request for mission and reviews in “missions” collection in live mongolab database. When it comes to geo-query, we need to query the longtitude and latitude in <code>req.query</code> with some urls like this: <code>api/missions?lng=-12.34343434&amp;lat=51.22424224</code>.</p>
<p>Besides, the way writing the js code is quite important using closure!! I use an example that will be reused in later geo-distance calculation to illustrate how to <strong>only expost functions for later use with closure to wrap the inner variables from outer collisions.</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> theEarth = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> earthRadius = <span class="number">6371</span>;</span><br><span class="line">  <span class="keyword">var</span> getDistanceFromRads = <span class="function"><span class="keyword">function</span>(<span class="params">rads</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(earthRadius * rads);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> getRadsFromDistance = <span class="function"><span class="keyword">function</span>(<span class="params">distance</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(distance/getRadsFromDistance);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getDistanceFromRads: getDistanceFromRads,</span><br><span class="line">    getRadsFromDistance: getRadsFromDistance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>Then the complete geo searching functions are:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for main page listing by distance.</span></span><br><span class="line"><span class="keyword">var</span> resToList = <span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> lst = [];</span><br><span class="line">	results.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">doc</span>)</span>&#123;</span><br><span class="line">		lst.push(&#123;</span><br><span class="line">				distance: theEarth.getDistanceFromRads(doc.dis),</span><br><span class="line">				name: doc.obj.name,</span><br><span class="line">				author: doc.obj.author,</span><br><span class="line">				rating: doc.obj.rating,</span><br><span class="line">				tags: doc.obj.tag,</span><br><span class="line">				_id: doc.obj._id</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> lst;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.missionsListByDistance = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(req.query.lng &amp;&amp; req.query.lat)&#123;</span><br><span class="line">		<span class="keyword">var</span> lng = <span class="built_in">parseFloat</span>(req.query.lng);</span><br><span class="line">		<span class="keyword">var</span> lat = <span class="built_in">parseFloat</span>(req.query.lat);</span><br><span class="line">		<span class="keyword">var</span> point = &#123;</span><br><span class="line">			type: <span class="string">"Point"</span>,</span><br><span class="line">			coordinates: [lng, lat]</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">var</span> geoOptions = &#123;</span><br><span class="line">			spherical: <span class="literal">true</span>,</span><br><span class="line">			maxDistance: theEarth.getRadsFromDistance(<span class="built_in">parseInt</span>(req.query.maxdistance||<span class="number">2000</span>)),</span><br><span class="line">			num: <span class="number">10</span>,</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// console.log(geoOptions.maxDistance);</span></span><br><span class="line">		Missions.geoNear(point, geoOptions, <span class="function"><span class="keyword">function</span>(<span class="params">err, results, stats</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			sendJsonRes(res, <span class="number">200</span>, resToList(results));</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">			<span class="string">"message"</span>: <span class="string">"Found no longtitue or lattitude in query string."</span></span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>So far, we complete all three “GET” methods for this website, namely, [1]ListByDistance for the main page “/api/missions”; [2]get a single mission information for each mission document in db “/api/missions/<_id>“; [3]get a single review information for reviews from each mission document as subdocument “/api/missions/<_id>/reviews/<_id>“. And next, we will look at other methods like “POST”, “PUT” and “DELETE”.</_id></_id></_id></p>
</blockquote>
<h2 id="“POST”_method_implementation">“POST” method implementation</h2><p>In this project, since we only involve missions and reviews, we need to implement new mission post and new review post from form data, which is stored at <code>req.body.&lt;attr&gt;</code>.<br>The way we create an document is using <code>create()</code> directly :</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.missionsCreate = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	Missions.create(&#123;</span><br><span class="line">		name: req.body.name,</span><br><span class="line">		rating: req.body.rating,</span><br><span class="line">		tag: req.body.tags.split(<span class="string">","</span>),</span><br><span class="line">		author: req.body.author,</span><br><span class="line">		coords: [<span class="built_in">parseFloat</span>(req.body.lng), <span class="built_in">parseFloat</span>(req.body.lat)],</span><br><span class="line">		timepanel: &#123;</span><br><span class="line">			title: req.body.timetitle,</span><br><span class="line">			timeslots: req.body.timeslots.split(<span class="string">","</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">201</span>, mission);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For subdocuments or facing with a list instead of an array, we probably just retrieve that list and <code>push</code> a new item into the list. Then we just need to <code>&lt;instance&gt;.save()</code> to save the item like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addReiview = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, mission</span>)</span>&#123;</span><br><span class="line">	mission.reviews.push(&#123;</span><br><span class="line">		rating: req.body.rating,</span><br><span class="line">		author: req.body.author,</span><br><span class="line">		text: req.body.text</span><br><span class="line">	&#125;)</span><br><span class="line">	mission.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> thisReview;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			sendJsonRes(res, <span class="number">404</span>, err);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			updateAveRating(mission._id);</span><br><span class="line">			thisReview = mission.reviews[mission.reviews.length - <span class="number">1</span>];</span><br><span class="line">			sendJsonRes(res, <span class="number">201</span>, thisReview);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="“PUT”_method_implementation">“PUT” method implementation</h2><p>“PUT” method is similar to “POST” in a way that they both use form data stored in <code>req.body</code>, while one is create from nothing and add to the database, the other is to find an existing one and update part of the information. </p>
<ul>
<li>One hack I thought about is to use <code>Object.keys(obj)</code> to obtain the keys from a js object, then using <code>$set</code> in <code>mongo.update()</code> to only update the value in body? <strong>Ideas:</strong> this idea only works when all field are requiring same manipulation from body data. To be more specifically, some data are needed to be processed to feed for later use, such as we add <code>.split(&quot;,&quot;);</code> for tags data, and some fields like “coords” is an array. Thus, if we want to apply more operations on some data, we cannot just treat them in the same way in a for loop</li>
<li>Or, utilize the the way mongoose model treat model parameters, we can do <code>var newReview = new Review(req.body)</code> to create an instance of “Review” model, then use this to replace the old one?</li>
</ul>
<blockquote>
<p>One important thing to notice is that when we save, we save <strong>parent document!</strong> In our case, we did <code>mission.save(function(err, mission))</code> instead of <code>review.save(...)</code>!</p>
</blockquote>
<h2 id="“DELETE”_method_implementation">“DELETE” method implementation</h2><p>“DELETE” method is easier, we only need to find that document by “missionid”, then do <code>Missions.remove(function(err, mission))</code>. For the subdocument, we simply find that subdocument and call remove at the end. The prototype is like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A working prototype without error checking.</span></span><br><span class="line"><span class="built_in">module</span>.exports.reviewsDeleteOne = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	Missions</span><br><span class="line">		.findById(req.params.missionid)</span><br><span class="line">		.select(<span class="string">"reviews"</span>)</span><br><span class="line">		.exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				sendJsonRes(res, <span class="number">404</span>, &#123;</span><br><span class="line">					<span class="string">"message"</span>: <span class="string">"Found no match"</span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			mission.reviews.id(req.params.reviewid).remove();</span><br><span class="line">			mission.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, mission</span>)</span>&#123; <span class="comment">// save parent document.</span></span><br><span class="line">				updateAveRating(mission._id);</span><br><span class="line">				sendJsonRes(res, <span class="number">204</span>, <span class="literal">null</span>);</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Summery">Summery</h2><ul>
<li><p>How to insert an common model instance into mongodb? I mean, since we can’t generate the “_id” by ourselves, then how comes we insert such object into <code>mongo</code>? <strong>Answer:</strong> we need to know the difference between <code>db.missions.save</code> and <code>db.missions.insert</code>, using <code>save</code>, we can simple provide an model instance according to the model schma, while using using <code>insert</code>, we have to write the object exacty the same as the final document! </p>
</li>
<li><p>“GET” method implementation? <strong>Answer:</strong> using mongodb query like <code>findById</code> and others to get the document from db, and sometimes we need <code>id</code> to retrieve info from subdocument. Besides, <code>geoNear</code> is handy in mongodb to get displaying documents by distance.</p>
</li>
<li><p>Some important places for error checking: </p>
<ul>
<li>If argument is in the <code>req.body</code> or <code>req.query</code> or <code>req.params</code>. <strong>if not, return a message in <code>res</code> saying founding no argument in coming request.</strong></li>
<li>Then given an ID(probably), we may want to search that document in database using <code>getById()</code>, and the callback function contains an <code>error</code> object and a instance object, where the returning instance object indicates whether or not searching database is succeeded or not. <strong>If not, return a message saying object not found in database.</strong></li>
<li>When we tried to update of create a new document, we may usually use <code>save</code> and <code>create</code>, the callback function contains an error object either, <strong>it indicates whether or not such instance can be created or updated correctly, if the error message appears, it usually dues to the fact that some fields violates the validation rules specified in database schema.</strong></li>
</ul>
</li>
</ul>
<h2 id="Tools">Tools</h2><ul>
<li>Unless you fancy adding hundreds of script tags to your pages, you need a build tool to bundle your dependencies. You also need something to <strong>allow NPM packages to work in browsers</strong>. This is where Webpack comes in.</li>
<li>Add a .gitattributes file and push it to github to overwrite the project type calculated by github, adding <code>*.css linguist-language=Javascript</code> into the file to let a specific file being overwritten.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>AirLoft的原型。 第三期， 基于mongodb的mongoose来搭建RESTful API， 主要包括了关于各类涉及到对象的GET, POST, PUT DELETE方法的实现。 在postman上不断的模拟， 也最终搭好一个稳定且flexible的后端API处理， 剩下的就是将数据库和这个Express App的controller结合， 并在前端上灵活的应用啦！如果说前端就像一个人的妆容， 那么数据库以及API处理就是他的谈吐和内涵， 这个应用也有了scaling的能力， 加油!</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN全栈开发[第二期-前端实战手记]]]></title>
    <link href="http://chocoluffy.com/2016/03/11/MEAN%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%BA%8C%E6%9C%9F-%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E6%89%8B%E8%AE%B0/"/>
    <id>http://chocoluffy.com/2016/03/11/MEAN全栈开发-第二期-前端实战手记/</id>
    <published>2016-03-11T20:10:55.000Z</published>
    <updated>2016-03-23T03:00:41.000Z</updated>
    <content type="html"><![CDATA[<p>AirLoft的原型。 第二期， 基于Bootstrap的扁平化设计， 把所有涉及的页面的clickable prototype做出来， 再迁移到express application或者Angular SPA上， 虽然只是前端的prototype， 但是做好一些npm scripts的配置会让前端开发特别的高效和舒服， 也算是在入门了各种炫技的前端展示后， 逐步到一个full-fledged website的过渡。</p>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f1tkjoatboj21kw0r7aic.jpg" alt="project screenshot"></p>
<h2 id="Difference_about_MEAN_stack">Difference about MEAN stack</h2><p>Traditional web server like Apache is multi-thread, <strong><em>the key idea about multi-thread is visitors use seperate resources.</em></strong>Like a bank system, it works perfectly fine when the population size is small, while when the size grows more than the resources, you have to queue for resources. (然而当你访问一个网站的时候， 你是不会等的， 你看那个网站响应很慢， 你就退出了). In nodejs, it is single-threaded. 所以你知道现在很多大型的企业架构， 尤其是国内的， 在前几年还特别严重， 一到过年过节流量特别大的时候， 你的网站就会宕机， 因为太多人访问了， 你必须等。所以解决办法是什么， 通常企业就回去买更多的服务器， 或者更新过大的内存， 来扛过流量最大的时候， 可是有一个问题就是， 在流量没有那么大的绝大多数时候， 你的资源被浪费了! </p>
<p>在单线程的nodejs里面， 有一个非常重要的特性就是必须是非阻塞， 因为默认的情况就是大家都会去同一个center office， 同一个线程， 然而我们不希望前一个的request, 比如request static files or database, 影响到下一个用户， 所以nodejs里面的函数都是异步的。</p>
<p>Some useful helper libraries like Underscorejs, Mochajs, and Colors(which can add color to the nodejs console log).</p>
<p>Check out the articles in Evernore, saying that why we don’t want to use the default way of using directory to organize our view static files in Expressjs, but instead use a function-focused way to group the files.</p>
<p>Mongodbd stores documents as BSON(binary format of JSON). Mongoose like the shell for mongodb, enable us to add data validation on database(schema)</p>
<p>Traditional way of doing web, is let the server do all the data processing and application logic, then passes HTML out to the browser. While angularjs allows us to pull some data and logic to the browser.(so server only pass the data from database). Since we have V8 in Chrome.</p>
<p>The difference of Jquery and AngularJS is that Jquery added to the page to provide interactivity, it assume that you have a complete DOM, While angularjs comes earilier to help you form the HTML.</p>
<p>关于SPA(single page application)的缺点， 尤其在SEO上， search engine only fetches the page layout and it won’t run any javascript, thus those data and contents generated by javascript will be ignored by search engine. <strong><em>the key feature of SPA is that it takes a longer load for first time login, and it can reduce the pressure on server side, since it handle the logic mostly on browser. </em></strong> For example, for a blog website, the blog post entry is for people to read and is expected to show up quitely quickly, is not suitable for SPA, while the admin page can be done in SPA. <strong><em>Thus, for the blog entry, we want the original and traditional method(passing the HTML pages), utilizing Express!</em></strong></p>
<p>Remeber, Angularjs is not only for SPA, it can also provide rich data interactivity to an static pages.</p>
<p><strong><em>API-rich means decouple the reliance!!! You don’t contact directly to the database, but instead use API and if API is satisfied, components can be substituted by any other components.</em></strong></p>
<p>基础的架构是： database\rest API\application在同一个server上， 但之后我们通常会把database分开到另外一个server上（avoid fighting for the same resources）.</p>
<h2 id="Express">Express</h2><p>When using express, we can configure it to have some options, like which html engine to use, which css preprocessor, and whether to add the support for session;</p>
<p>We can see in <code>app.js</code> that there are a lot of <code>app.use()</code>, they are middlewares, and the request coming from the application will go through each of them. For example, use <code>app.use(cookieParser());</code> will parse out the cookie information from the request and prepare to be more friendly in controller code. Server side js(app.js) if modified, should let the server stop and restart, but the client-side js or html or css, can just use browser refresh to update on-the-fly. <strong><em>To fix that, we use <code>nodemon</code>, a module that allows auto-reloading when server-side javascript is changed. I have install it globally, so we just need to type <code>nodemon</code> inside the project folder.</em></strong></p>
<p><code>block content</code> in jade, is the inheritance machanism of HTML layout, we can define some block + <variable name=""> in the parent template, then in each child layout that extends it, the child template will redefine such block, just like in c++\java, an abstract class.</variable></p>
<p>We decided to implement MVC inside the Express, like what we did in rails, we route the corresponding URL to controllers(which we created in a new folder).</p>
<p>Bootstrap is not being processed by node engine, thus we put it under <code>public</code> folder. Inside the <code>layout.jade</code> file, we will include the bootstrap theme and js files we want to use in our project:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    # <span class="operator"><span class="keyword">set</span> viewport metadata <span class="keyword">for</span> better display <span class="keyword">in</span> mobile device.</span><br><span class="line">  	meta(<span class="keyword">name</span>=<span class="string">'viewport'</span>, <span class="keyword">content</span>=<span class="string">'width=device-width, initial-scale=1.0'</span>)</span><br><span class="line">    title= title</span><br><span class="line">    # <span class="keyword">before</span> the <span class="keyword">style</span>.css <span class="keyword">file</span>, so that we can write <span class="keyword">style</span> <span class="keyword">to</span> override <span class="keyword">or</span> polish the <span class="keyword">style</span> <span class="keyword">in</span> bootstrap theme.</span><br><span class="line">    <span class="keyword">link</span>(rel=<span class="string">'stylesheet'</span>, href=<span class="string">'/bootstrap/css/cerulean.bootstrap.css'</span>)</span><br><span class="line">    <span class="keyword">link</span>(rel=<span class="string">'stylesheet'</span>, href=<span class="string">'/stylesheets/style.css'</span>)</span><br><span class="line">  <span class="keyword">body</span></span><br><span class="line">    <span class="keyword">block</span> <span class="keyword">content</span></span></span><br></pre></td></tr></table></figure>
<p>After deciding on the urls we want to use, we will add corresponding controller into the index.js inside the routes folder. since we mainly have two function groups, we use <code>ctrlLocations</code> and <code>ctrlOthers</code> to represent these two main controller files.</p>
<h2 id="Jade_in_Express">Jade in Express</h2><p>Let’s start to move the content in view into controller. When we look at the clickable prototype, especially its Jade view pages, we define Javascript object in hash in controller to store the data. <strong><em>We design data structure to hold data for views.</em></strong> Then in view folder, we can do: [1] use <code>=</code> to use that object’s value, or use <code>#{}</code> to <strong><em>insert</em></strong> the value into a string.</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1= <span class="built_in">title</span> </span><br><span class="line">p &amp;nbsp; #&#123;<span class="built_in">title</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Pay attention to the format when using the programming syntax or inline coding. </p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意在用synax的时候要多空<span class="number">4</span>个space--&gt;</span><br><span class="line">.row</span><br><span class="line">    .<span class="built_in">col</span>-xs-<span class="number">12</span>.<span class="built_in">col</span>-<span class="keyword">sm</span>-<span class="number">8</span></span><br><span class="line">        .row.<span class="keyword">list</span>-group</span><br><span class="line">            each mission in missions</span><br><span class="line">                .<span class="built_in">col</span>-xs-<span class="number">12</span>.<span class="keyword">list</span>-group-item</span><br><span class="line">                    h4</span><br><span class="line">                        <span class="keyword">a</span>(href=<span class="string">'/mission'</span>)= mission.name</span><br><span class="line">                        small &amp;nbsp;</span><br><span class="line">                            - <span class="keyword">for</span> (var <span class="keyword">i</span>=<span class="number">0</span>; <span class="keyword">i</span>&lt;mission.rating; <span class="keyword">i</span>++)</span><br><span class="line">                                span.glyphicon.glyphicon-<span class="keyword">star</span></span><br><span class="line">                            - <span class="keyword">for</span> (var <span class="keyword">i</span>=mission.rating; <span class="keyword">i</span>&lt;<span class="number">5</span>; <span class="keyword">i</span>++)</span><br><span class="line">                                span.glyphicon.glyphicon-<span class="keyword">star</span>-<span class="built_in">empty</span></span><br><span class="line">                        span.badge.pull-<span class="keyword">right</span>.badge-default <span class="number">100</span><span class="keyword">m</span></span><br><span class="line">                    <span class="keyword">p</span>.author= mission.author</span><br><span class="line">                    <span class="keyword">p</span></span><br><span class="line">                        each <span class="keyword">tag</span> in mission.<span class="keyword">tags</span></span><br><span class="line">                            span.label.label-warning= <span class="keyword">tag</span></span><br><span class="line">                            | &amp;nbsp;</span><br></pre></td></tr></table></figure>
<p>In Jade, we want to use <strong>mixin</strong> as functions inside a jada file and use <code>include</code> to make it reuseable for other file. Like this, we usually put mixin at between <code>extends layout</code> and <code>block content</code>. </p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mixin outputRating(rating)</span><br><span class="line">  - <span class="keyword">for</span> (var <span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span>&lt;mission.rating; <span class="built_in">i</span>++)</span><br><span class="line">    span.glyphicon.glyphicon-star</span><br><span class="line">  - <span class="keyword">for</span> (var <span class="built_in">i</span>=mission.rating; <span class="built_in">i</span>&lt;<span class="number">5</span>; <span class="built_in">i</span>++)</span><br><span class="line">    span.glyphicon.glyphicon-star-empty</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--same place, but using `include`--&gt;</span></span><br><span class="line">include _includes/sharedHTMLfunctions</span><br></pre></td></tr></table></figure>
<p>Here is an example of showing how to render sting to HTML when the textarea has newline character:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">	<span class="comment">#banner.page-header</span></span><br><span class="line">		.row</span><br><span class="line">			.col-sm-<span class="number">12</span></span><br><span class="line">				h1= title</span><br><span class="line">	.row</span><br><span class="line">		.col-sm-<span class="number">12</span></span><br><span class="line">			p !&#123;(<span class="keyword">text</span>).<span class="built_in">replace</span>(/\n/g, <span class="string">'&lt;br/&gt;'</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>For now, the data is stored in controller, while in practice, we need database and data model to store the data. But here we are in the right track of fast development, namely, from developing a clickable prototype, to move hard-cored data into controller as variables, and finally put them into database.</p>
<h2 id="Heroku">Heroku</h2><p>Add the <code>engines</code> part at project’s package.json, add the node and npm version on it.</p>
<p>Add a Procfile, used to declare the process type used by application. we put <code>web: npm start</code> inside the Procfile so that it tells Heroku to tun such web process.</p>
<p>Use forego to test before push it into production environment. <code>brew install forego</code> to install forego, then do <code>forego start</code> and go to <code>localhost:5000</code> to see the result.</p>
<p>Then if everything goes fine, from <strong><em>a) engines part b) Profile c) tested under <code>forego</code></em></strong>, then we do <code>heroku create</code> and <code>git push heroku master</code> to push the local git repo to the remote heroku container. Then <code>heroku open</code> to open that url.</p>
<p>Terminology: <strong>Dynos</strong> are isolated, virtualized Unix containers, that provide the environment required to run an application. Generally, if you deploy an application for the first time, Heroku will run 1 web dyno automatically. In other words, it will boot a dyno, load it with your slug, and execute the command you’ve associated with the web process type in your Procfile. <strong>So, it mainly is about scaling, if we have more dynos, we will have more resources. And we got that 1 dyno for free.</strong> we can type in <code>heroku ps</code> to check which dyno is running which process and for this command, <code>heroku ps:scale web=3 queue=2</code>, it means that we can start 5 dynos, 3 for the web and 2 for the queue process types.</p>
<h2 id="Bootstrap">Bootstrap</h2><p>in Bootstrap, there is always 12 columns, and you can define how many columns you want to use in device, <code>col-sm-6</code> means that element will take up 6 columns on device of size sm <strong>and larger.</strong> </p>
<ul>
<li>xs: phone</li>
<li>sm: tablets</li>
<li>md: laptop</li>
<li>lg: external monitors</li>
</ul>
<p><code>&lt;div class=&quot;col-xs-12 col-sm-6&quot;&gt;&lt;/div&gt;</code> means it will take the full width in phone screen while take only half in tablets or larger.</p>
<p>In Jade, in order to put plain text, we need to use pipe at front.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ul.nav.navbar-nav.navbar-<span class="constant">right</span></span><br><span class="line">    li</span><br><span class="line">        <span class="operator">a</span>(href=<span class="string">'#'</span>)</span><br><span class="line">            span.glyphicon.glyphicon-user</span><br><span class="line">            |  Sign Up</span><br><span class="line">    li</span><br><span class="line">        <span class="operator">a</span>(href=<span class="string">'#'</span>)</span><br><span class="line">            span.glyphicon.glyphicon-<span class="built_in">log</span>-<span class="operator">in</span></span><br><span class="line">            |  Login</span><br></pre></td></tr></table></figure>
<p>When dealing with <code>block content</code>, we should note that if some elements are not contrained by css, then they will be strethed to have full width of screen. what we did now is do wrap the content with a <code>div.container</code> so that we can apply css on the container easily.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span><span class="class">.container</span></span><br><span class="line">  block <span class="attribute">content</span></span><br></pre></td></tr></table></figure>
<p>现在的一个主要问题是， 我知道布局是什么样子的， 但是我不知道应该怎么写？when to use <code>.row</code> or <code>.page-header</code>. </p>
<ul>
<li><strong>row. Rows must be placed within a .container (fixed-width) or .container-fluid (full-width) for proper alignment and padding. </strong></li>
<li>Use rows to create horizontal groups of columns.</li>
<li>Content should be placed within columns, and only columns may be immediate children of rows.<strong><em><code>col-</code> is the direct child element for <code>row</code></em></strong></li>
<li>Actually <code>.page-header</code> just applies some of its default styling options to the element with that class. In practice, we find that the element with that class will be margined from normal element. </li>
</ul>
<p>We can download the cutomized bootstrap theme from <a href="http://getbootstrap.com/customize/" target="_blank" rel="external">the website</a>, say it I only want to use the <code>glyphicon</code> icon from Bootstrap, then I can just check that box and download it, then after unzipping the file, we include the file under the css part and <strong>inlcude the css tag inside the html</strong>, then it works fine! Hooray! In this project, I mainly use <code>glyphicon-user</code>, <code>glyphicon-fire</code> and <code>glyphicon-chevron-left</code> for navigation.</p>
<p>Using <a href="https://github.com/nicinabox/superslides" target="_blank" rel="external">superslides</a> to achieve a full-screen images scrolling animation. pretty amazing effects.</p>
<p>Use <code>.panel</code> for inner component positioning.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="class">.panel</span><span class="class">.panel-primary</span></span><br><span class="line"><span class="class">.panel-heading</span></span><br><span class="line">	<span class="tag">h2</span><span class="class">.panel-title</span> Training Time</span><br><span class="line"><span class="class">.panel-body</span></span><br><span class="line">	<span class="tag">p</span> March <span class="number">15</span> - March <span class="number">17</span>: <span class="number">7</span>:<span class="number">00</span> am - <span class="number">7</span>:<span class="number">00</span> pm</span><br><span class="line">	<span class="tag">p</span> March <span class="number">21</span> - March <span class="number">23</span>: <span class="number">7</span>:<span class="number">00</span> am - <span class="number">7</span>:<span class="number">00</span> pm</span><br></pre></td></tr></table></figure>
<h2 id="Additional_reference">Additional reference</h2><p>How to undo the <code>git add &lt;filename&gt;</code> before <code>git commit</code>. Use <code>git reset &lt;filename&gt;</code>. Include <code>node_modules</code> into <code>.gitignore</code> so that it won’t be commited to github. Use</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#You</span> can create your own <span class="class">.gitignore</span> which ignores itself. Create <span class="tag">a</span> <span class="class">.gitignore</span> with this two records:</span><br><span class="line"><span class="class">.gitignore</span></span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure>
<p>在<a href="http://bootswatch.com/" target="_blank" rel="external">free bootstrap themes</a>下载bootstrap theme到public folder.</p>
<p><a href="http://stackoverflow.com/questions/33549178/best-practices-for-loading-videos-on-a-web-page" target="_blank" rel="external">Like Airbnb, how to load video at the background of a website</a>, using progressive loading or ?</p>
<p>使用nodemon来监听server-side js文件的改动来自动更新server， 使用browser-sync来监听各种css file的改动。有两种模式， 一种是通过直接创建一个server来host本地的static file, 另一种模式是通过代理另一个服务器， 比如php server, rails webbrick server, python simplehttpserver, nodejs server都可以的!!!!</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browser-<span class="keyword">sync</span> start --proxy=<span class="string">'localhost:3000'</span> --<span class="keyword">files</span> <span class="string">'app_server/views/*.jade, app_server/controllers/*.js, public/stylesheets/*.css'</span></span><br><span class="line"></span><br><span class="line">browser-<span class="keyword">sync</span> start --server --<span class="keyword">files</span> <span class="string">'app_server/views/*.jade, app_server/controllers/*.js, public/stylesheets/*.css'</span></span><br></pre></td></tr></table></figure>
<p>由于我在nodejs里面设置了服务器的端口是3000， 那么通过让browser-sync监听这个端口并创建在3001的代理， 我可以在<code>localhost:3001</code>上面得到自动更新的网页!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AirLoft的原型。 第二期， 基于Bootstrap的扁平化设计， 把所有涉及的页面的clickable prototype做出来， 再迁移到express application或者Angular SPA上， 虽然只是前端的prototype， 但是做好一些npm scripts的配置会让前端开发特别的高效和舒服， 也算是在入门了各种炫技的前端展示后， 逐步到一个full-fledged website的过渡。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN全栈开发[第一期-前端布局]]]></title>
    <link href="http://chocoluffy.com/2016/03/06/MEAN%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%80%E6%9C%9F-%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://chocoluffy.com/2016/03/06/MEAN全栈开发-第一期-前端布局/</id>
    <published>2016-03-06T14:38:41.000Z</published>
    <updated>2016-03-06T14:45:46.000Z</updated>
    <content type="html"><![CDATA[<p>AirLoft的原型。一个sharing economy的网站。 Loft是阁楼的意思， 每个心中那个静静守候一些秘密和癖好的地方。 有些情感， 只能在尘封的铁门后诉说， 就像有些话， 只讲给某个人听。厌倦了某些网站没有审美的UI， 也趁着青春轻狂， 去改变吧。第一期， 记录我前端页面开发的一些手记， 后面慢慢过渡到数据库和后台API设计。</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>最近在做一个sharing economy的网站，在参考了大部分现有网站的UI的样式后， 我们感觉非常的不满😂(当然像quora这种属于知识信息密度特别高的网站使用文本密集的形势还说的过去)， 但是像airbnb还有携程这种大型的peer sharing的网站， 如何可以从第一屏就吸引到用户是一个很重要的问题。直接上图看看：<br>首先是<a href="https://www.airbnb.ca/" target="_blank" rel="external">airbnb</a>的网站：<br><img src="http://ww1.sinaimg.cn/large/c5ee78b5gw1f1mrezw5z0j21kw0t9dqn.jpg" alt="airbnb website"><br>airbnb在网站的第一屏是用一段视频来当做背景的， 非常惊艳， 但是第一屏没有满屏是什么意思？是想吸引我们可以往下滚嘛？但是这种样式让我非常不舒服， 明明有非常好的创意， 为什么不像这个<a href="http://thenewcode.com/samples/polina.html" target="_blank" rel="external">thenewcode.com</a>一样使用高清全屏的视频来当做网页背景呢， 很惊艳对不对!!</p>
<p>再看一下<a href="http://www.ctrip.com/#ctm_ref=nb_cn_top" target="_blank" rel="external">携程</a>的网站， 感觉还是滞留在上个世纪的UI。<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f1mrhyoxpvj21kw0t7qiu.jpg" alt="携程website"><br>于是， 也是出于对颜值的追求，我决定尝试使用轮播在第二屏的网站展示页面来展示各个兴趣小组（比如一起做早餐吃早餐啦， 一起go hiking啦， 一起复习期末考写作业的兴趣小组啦）</p>
<p>考虑到完整项目的时间紧迫， 就不准备在前端的js的代码上花太多时间， 毕竟后面还有转移到express的jade模版， 然后最后还要用angularjs来重写。 于是我就在找各类比较好的carousel的js插件， 在比较了几个的表现之后， 还是<a href="https://github.com/nicinabox/superslides" target="_blank" rel="external">superslides</a>最得我心。废话不多说， 直接上实例代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Superslides - A fullscreen slider for jQuery<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"../dist/stylesheets/superslides.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slides"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"slides-container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/people.jpeg"</span> <span class="attribute">alt</span>=<span class="value">"Cinelli"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/surly.jpeg"</span> <span class="attribute">width</span>=<span class="value">"1024"</span> <span class="attribute">height</span>=<span class="value">"682"</span> <span class="attribute">alt</span>=<span class="value">"Surly"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/cinelli-front.jpeg"</span> <span class="attribute">width</span>=<span class="value">"1024"</span> <span class="attribute">height</span>=<span class="value">"683"</span> <span class="attribute">alt</span>=<span class="value">"Cinelli"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/affinity.jpeg"</span> <span class="attribute">width</span>=<span class="value">"1024"</span> <span class="attribute">height</span>=<span class="value">"685"</span> <span class="attribute">alt</span>=<span class="value">"Affinity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"slides-navigation"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"next"</span>&gt;</span>Next<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"prev"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"javascripts/jquery.easing.1.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"javascripts/jquery.animate-enhanced.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../dist/jquery.superslides.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">'#slides'</span>).superslides(&#123;</span><br><span class="line">      animation: <span class="string">'fade'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>忽略其他的不管， 如果我们希望引入superslides的功效， 我们只需要添加这几个tag:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--css--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"../dist/stylesheets/superslides.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../dist/jquery.superslides.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意jquery的引入要在superslides的前面， 来保证superslides在引用的时候可以用到jquery里面的定义的函数。</p>
<p>在添加了css和js之后， 我们就可以来创建全屏图片轮播的html结构了， 官方推荐的是在<code>&lt;div id=&quot;slides&quot;&gt;</code>里面放一个div里面放各种img， 或者也可以使用一个<code>&lt;li&gt;</code>来分开img和div来在后期分别写样式和定位， 我在我的项目中使用的就是后者， 比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slides"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"slides-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://flickholdr.com/1000/800"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        Slide one</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://flickholdr.com/1000/800/space"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        Slide two</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://flickholdr.com/1000/800/tech"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        Slide three</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"slides-navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"next"</span>&gt;</span>Next<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"prev"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于我的网站背景颜色是暗色系的， 我添加了<code>reveselay</code>和<code>overlay</code>来创建两个mask来写出渐变渐出的效果， 这样可以很好的和背景颜色混为一体。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"section"</span> <span class="attribute">id</span>=<span class="value">"android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"containerrow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slides"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"slides-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"./image/desk.jpg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"reverselay"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"overlay"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mainbadget"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&amp;nbsp;134 &amp;nbsp;&amp;nbsp;</span><br><span class="line">                <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-fire"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&amp;nbsp;3440</span><br><span class="line">              <span class="tag">&lt;/<span class="title">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"text-container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"maintitle"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Morning Call<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"maintext"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">p</span>&gt;</span>Join our breakfast cooking club for fresh pancakes and sunshine!</span><br><span class="line">              Meet your friends here and enjoy every piece of buttered toast. <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>See more.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"slides-navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"prev"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"next"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"slider-control"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#react"</span> <span class="attribute">class</span>=<span class="value">"active"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#intro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#native"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#touch"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#android"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意我这里的<code>text-container</code>, <code>maintitle</code>, <code>maintext</code>都是用来创建overlay在图片上面的文字， 分离出来比较方便定位。最后记得要初始化js：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  $(<span class="string">'#slides'</span>).superslides(&#123;</span><br><span class="line">    animation: <span class="string">'fade'</span>,</span><br><span class="line">    play: <span class="string">'8000'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有很多的功能选项， 在<a href="https://github.com/nicinabox/superslides" target="_blank" rel="external">主页</a>可以查看到最全的功能配置，也可以参考他的<a href="http://archive.nicinabox.com/superslides/#1" target="_blank" rel="external">实例页面</a> 那就搞定了! 最后附上成品的gif:<br><img src="https://giant.gfycat.com/WetLongHapuka.gif" alt="project gif"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AirLoft的原型。一个sharing economy的网站。 Loft是阁楼的意思， 每个心中那个静静守候一些秘密和癖好的地方。 有些情感， 只能在尘封的铁门后诉说， 就像有些话， 只讲给某个人听。厌倦了某些网站没有审美的UI， 也趁着青春轻狂， 去改变吧。第一期， 记录我前端页面开发的一些手记， 后面慢慢过渡到数据库和后台API设计。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ajax(with Jquery) on Nodejs server]]></title>
    <link href="http://chocoluffy.com/2016/02/20/Ajax-with-Jquery-on-Nodejs-server/"/>
    <id>http://chocoluffy.com/2016/02/20/Ajax-with-Jquery-on-Nodejs-server/</id>
    <published>2016-02-20T19:37:25.000Z</published>
    <updated>2016-02-20T19:44:47.000Z</updated>
    <content type="html"><![CDATA[<p>Nodejs的第一个上手小项目， 就是尝试自己在本地的页面来发送Ajax请求， 并且通过nodejs的json文件返回后以比较优雅的前端样式呈现出来。 算是再一次复习了Bootstrap， fontawesome库的调用， 以及一些jquery的语法。 仔细回想， 其实nodejs的后端开发和rails\django的router的本质都是一样的， 以前在还没有理解实质的时候就上手实战， 现在慢慢理解了才能够融会贯通， 现在的开发速度大大进步了。 同时也学会了如何允许CORS的请求， 和正则匹配的部分细节。<br><a id="more"></a></p>
<p><img src="https://zippy.gfycat.com/FancyWeeBrontosaurus.gif" alt="project gif"></p>
<h2 id="Requirements">Requirements</h2><p>Requesting 127.0.0.1:3000 should give your index page (with CSS and JS). For the subsequent requests, you should use AJAX to send requests to the Node server and update only some parts of the page with the response data. Ideally, you should return JSON data as a response and then format that using Javascript.</p>
<h2 id="Ongoing_notes">Ongoing notes</h2><ul>
<li><p>how to use Ajax to request the data instead of using url request to node server? <strong><em>Main idea is that to use <code>$.getJSON(&quot;http://127.0.0.1:3000/favs.json&quot;, function(...){...}</code> to send out the Ajax request, and set the nodejs script to be able to respond such json file request and properly handle CORS problem. The things left will be just styling and formatted retrieved information and display.</em></strong></p>
</li>
<li><p>nodejs. You might use Node.js to connect to a database (returning a result set from a query, say, or updating a record); deliver HTML, XML, or JSON content; connect to local files; or serve up static web pages like Apache or another web server.</p>
</li>
<li><p>ajax. The mechanism for sending data to and retrieving data from the server with Ajax is the XMLHttpRequest object. So, now that we have an XMLHttpRequest object created, what do we do with it? We use it to make HTTP requests. To do so, we initialize the object with the open() method, which takes three arguments. Like <code>xmlhttp.open(&quot;GET&quot;,&quot;Demo.xml&quot;,true);</code>.</p>
<ul>
<li>HEAD. <code>xmlhttp.open(&quot;HEAD&quot;,&quot;Demo&quot;,true);</code> and <code>xmlhttp.send(null)</code>.</li>
<li>GET. <code>xmlhttp.open(&quot;GET&quot;,&quot;Demo?FirstName=Nat&amp;LastName=Dunn&quot;,true);</code>, the last argument is choose for true(asynchronous) or false(synchronous). The difference is that for synchronous version, browser has to wait for a response. The code below shows how to use Ajax solely to listen to the content change.</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">var</span> contentDiv = <span class="built_in">document</span>.getElementById(<span class="string">"Content"</span>);</span><br><span class="line"> </span><br><span class="line">        xmlhttp.open(<span class="string">"GET"</span>, <span class="string">"Demo?FirstName=Nat&amp;LastName=Dunn"</span>, <span class="literal">true</span>);</span><br><span class="line">        xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// handle Ajax response.</span></span><br><span class="line">            <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">                contentDiv.innerHTML = xmlhttp.responseText;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xmlhttp.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    observeEvent(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btnStart"</span>);</span><br><span class="line">        observeEvent(btn, <span class="string">"click"</span>, start);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Ajax in jquery. In general, Ajax does not work across domains. Exceptions are services that provide JSONP (JSON with Padding) support, which allow limited cross-domain functionality. JQuery provides Ajax support that abstracts away painful browser differences. It offers both a full-featured $.ajax() method, and simple convenience methods such as $.get(), $.getScript(), $.getJSON(), $.post(), and $.fn.load(). A working example of using Ajax of pulling image data from Flick referring <a href="http://www.w3school.com.cn/jquery/ajax_getjson.asp" target="_blank" rel="external">this post</a></p>
</li>
<li><p>How to avoid CORS(cross-origin resources sharing) error, refer to <a href="http://www.bennadel.com/blog/2327-cross-origin-resource-sharing-cors-ajax-requests-between-jquery-and-node-js.htm" target="_blank" rel="external">this post</a>. <strong><em>Main idea is that at the nodejs server part, we allow some origin and some type of content being CORS, thus we can request such resources at client part, which in this case in my own browser.</em></strong></p>
</li>
<li><p>How to regex all the href links inside a tweet? Especially how to do that in javascript? </p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tweet here is a JSON object</span></span><br><span class="line"><span class="keyword">var</span> tweetString = <span class="built_in">JSON</span>.stringify(tweet);</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(https?:\/\/.*?)("|\s)/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchlst = [];</span><br><span class="line">tweetString.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.slice(-<span class="number">1</span>)==<span class="string">'"'</span>)&#123;</span><br><span class="line">		a = a.slice(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	matchlst.push(a);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><em>Main idea is that we first make a JSON object into a string, then we can do regex match on a string. we use //g to indicate that it is search globally. And then for those valid match, we trim out the trailing quote then store it into a list for later formatting use. </em></strong>. Note that we should make full use of the flag option provided with regex matching, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">this post</a>. For example, <code>/.../g</code> is for global match, <code>/.../i</code> is for case-insensitive match.</p>
<ul>
<li>How to use Jquery to construct <code>div</code> or <code>a</code> elements? refer to <a href="http://stackoverflow.com/questions/867916/creating-a-div-element-in-jquery" target="_blank" rel="external">this post</a>, simply do the following: <strong><em>Here I make use of the Bootstrap alert styling!</em></strong></li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="params">(<span class="string">"&lt;div&gt;"</span>)</span>.addClass<span class="params">('alert alert-warning')</span>.html<span class="params">(<span class="string">"&lt;strong&gt;Warning!&lt;/strong&gt; Such user or tweet does not exist. Please enter a valid query."</span>)</span>.prependTo<span class="params">(query_list)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Avoid the <code>submit</code> event cause a page redirection or refresh? simply add a <code>return false</code> at the end of the submit function. Here is the submit function I wrote to process the info after AJAX from nodejs server. Note that my nodejs server host at <code>http://127.0.0.1:3000/</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#queryform"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    		emptyAll();</span><br><span class="line">    		<span class="keyword">var</span> searchval = $(<span class="string">"#search"</span>).val();</span><br><span class="line">    		<span class="built_in">console</span>.log(searchval);</span><br><span class="line">    		$(<span class="string">"#list ul"</span>).addClass(<span class="string">"unseen"</span>);</span><br><span class="line">    		<span class="keyword">var</span> query_list = $(<span class="string">"#query"</span>);</span><br><span class="line">    		<span class="keyword">var</span> nameHash = &#123;&#125;;</span><br><span class="line">    		<span class="keyword">var</span> tweetidHash = &#123;&#125;; </span><br><span class="line">	    	$.getJSON(<span class="string">"http://127.0.0.1:3000/favs.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">tweets</span>)</span>&#123;</span><br><span class="line">				$.each(tweets, <span class="function"><span class="keyword">function</span>(<span class="params">i,tweet</span>)</span>&#123;</span><br><span class="line">					nameHash[tweet.user.screen_name] = tweet;</span><br><span class="line">					tweetidHash[tweet.id_str] = tweet;</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">Object</span>.keys(nameHash).indexOf(searchval)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">var</span> formattedText = <span class="string">"&lt;strong&gt;User screen name: &lt;/strong&gt;"</span>;</span><br><span class="line">					formattedText += searchval + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;strong&gt;Tweet: &lt;/strong&gt;&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;pre&gt;&lt;code&gt;"</span> + <span class="built_in">JSON</span>.stringify(nameHash[searchval], <span class="literal">null</span>, <span class="number">4</span>) + <span class="string">"&lt;/code&gt;&lt;/pre&gt;"</span>;</span><br><span class="line">					$(<span class="string">"&lt;p&gt;"</span>).html(formattedText).prependTo(query_list);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(tweetidHash).indexOf(searchval)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">var</span> formattedText = <span class="string">"&lt;strong&gt;Tweet ID: &lt;/strong&gt;"</span>;</span><br><span class="line">					formattedText += searchval + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;strong&gt;Tweet: &lt;/strong&gt;&lt;br&gt;"</span>;</span><br><span class="line">					formattedText += <span class="string">"&lt;pre&gt;&lt;code&gt;"</span> + <span class="built_in">JSON</span>.stringify(tweetidHash[searchval], <span class="literal">null</span>, <span class="number">4</span>) + <span class="string">"&lt;/code&gt;&lt;/pre&gt;"</span>;</span><br><span class="line">					$(<span class="string">"&lt;p&gt;"</span>).html(formattedText).prependTo(query_list);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;		</span><br><span class="line">					$(<span class="string">"&lt;div&gt;"</span>).addClass(<span class="string">'alert alert-warning'</span>).html(<span class="string">"&lt;strong&gt;Warning!&lt;/strong&gt; Such user or tweet does not exist. Please enter a valid query."</span>).prependTo(query_list);</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">	</span><br><span class="line">			$(<span class="string">"#query"</span>).removeClass(<span class="string">"unseen"</span>);</span><br><span class="line">			$(<span class="string">"#query"</span>).addClass(<span class="string">"seen"</span>); </span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    	&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>Some JS tricks:<ul>
<li><code>if...in...</code> equivalent type in JS as in python. use <code>Array.indexOf(element)&gt;=0</code> to know that if such element exist in this array.</li>
<li>Get the keys array of a Hash. <code>Object.keys(hash)</code>.</li>
<li>Get the last character from a string. <code>string.slice(-1)</code>.</li>
<li>Trim out the last character from a string. <code>string = string.slice(0, -1)</code>.</li>
<li>Use Jquery to get the value from submitted form. </li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Nodejs的第一个上手小项目， 就是尝试自己在本地的页面来发送Ajax请求， 并且通过nodejs的json文件返回后以比较优雅的前端样式呈现出来。 算是再一次复习了Bootstrap， fontawesome库的调用， 以及一些jquery的语法。 仔细回想， 其实nodejs的后端开发和rails\django的router的本质都是一样的， 以前在还没有理解实质的时候就上手实战， 现在慢慢理解了才能够融会贯通， 现在的开发速度大大进步了。 同时也学会了如何允许CORS的请求， 和正则匹配的部分细节。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Online messege sending后端C实现版]]></title>
    <link href="http://chocoluffy.com/2016/02/18/Online-messege-sending%E5%90%8E%E7%AB%AFC%E5%AE%9E%E7%8E%B0%E7%89%88/"/>
    <id>http://chocoluffy.com/2016/02/18/Online-messege-sending后端C实现版/</id>
    <published>2016-02-18T22:51:30.000Z</published>
    <updated>2016-02-18T23:00:55.000Z</updated>
    <content type="html"><![CDATA[<p>原型是最近一门课的作业， 这是我在过程中记下的一些手记心得， 都是我认为是值得关注的地方。 未来会把这些后端函数加入TCP协议， 更贴近实战使用吧。基础的数据结构主要是链表， 算是用C自己再复习一遍链表实现。算法嘛？没有算法😂不需要考虑性能也就没有考虑算法优化咯。</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1f149fxx25oj21360w6n5z.jpg" alt="screenshot"><br><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f149r4zqkaj213e0zgajd.jpg" alt="profileshot"></p>
<h2 id="Ongoing_notes">Ongoing notes</h2><ul>
<li>how to enter the interactive mode? the main function for interactive mode is process_args. Like the code snippet below, it keep reading inputs from stdin(then using <code>fgets</code> to feed it into a input buffer), then using tokenize function(making use of <code>strtok</code> to tokenize the input commands), then the input command is stored in <code>char ** cmdargv</code>, which just like <code>argv</code> we often use. <code>cmdargv[0]</code> stores the first command, like <code>profile</code> and so on. What is left is just to depend on the return value from each core functions to display a proper information back to the screen.  </li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to FriendMe! (Local version)\nPlease type a command:\n&gt; "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fgets(input, INPUT_BUFFER_SIZE, input_stream) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// only echo the line in batch mode since in interactive mode the user</span></span><br><span class="line">    <span class="comment">// just typed the line</span></span><br><span class="line">    <span class="keyword">if</span> (batch_mode) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *cmd_argv[INPUT_ARG_MAX_NUM];</span><br><span class="line">    <span class="keyword">int</span> cmd_argc = tokenize(input, cmd_argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmd_argc &gt; <span class="number">0</span> &amp;&amp; process_args(cmd_argc, cmd_argv, &amp;user_list) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// can only reach if quit command was entered</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>cast type when allocating memory for <strong><em>Fixed length character array</em></strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> user &#123;</span><br><span class="line">    <span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line">    <span class="keyword">char</span> profile_pic[MAX_NAME];  <span class="comment">// This is a *filename*, not the file contents.</span></span><br><span class="line">    <span class="keyword">struct</span> post *first_post;</span><br><span class="line">    <span class="keyword">struct</span> user *friends[MAX_FRIENDS];</span><br><span class="line">    <span class="keyword">struct</span> user *next;</span><br><span class="line">&#125; User;</span><br></pre></td></tr></table></figure>
<p>we need to do this:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char* username = malloc<span class="list">(<span class="keyword">MAX_NAME*sizeof</span><span class="list">(<span class="keyword">char</span>)</span>)</span><span class="comment">;</span></span><br><span class="line">strcpy<span class="list">(<span class="keyword">newuser-&gt;name</span>, username)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>to be able to allocate the memory for that character array. </p>
<ul>
<li>how to handle structs of linked list when only the head of the list is given like <code>int create_user(const char *name, User **user_ptr_add)</code>. Note that since we will modify the linked list itself, we will have to pass in a pointer of pointer. Now if we only want to iterate through this linked list, we don’t need the ptr of ptr. Resolved by referring to <a href="http://geeksquiz.com/linked-list-set-2-inserting-a-node/" target="_blank" rel="external">this post </a>, and refer to <a href="https://www.cs.bu.edu/teaching/c/linked-list/delete/" target="_blank" rel="external">this post</a> and <a href="http://geeksquiz.com/linked-list-set-3-deleting-node/" target="_blank" rel="external">this post from Geeksquiz</a> for deleting a node from a post. <blockquote>
<p>one key thing of dealing with ptr of ptr in linked list is that we need make clear the use of <code>curr</code> pointer and <code>*user_ptr</code> since we are suppore to change it in function <code>int create_user(const char *name, User **user_ptr_add)</code>. </p>
</blockquote>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add the newuser to the end of linked list.</span></span><br><span class="line"><span class="comment">// int create_user(const char *name, User **user_ptr_add) </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// now append this node to the end of linked list.</span></span><br><span class="line">	User* last = *user_ptr_add;</span><br><span class="line">	<span class="keyword">if</span>(*user_ptr_add == <span class="literal">NULL</span>)&#123; <span class="comment">// if linked list is empty</span></span><br><span class="line">		*user_ptr_add = newuser;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123; <span class="comment">// otherwise</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strcmp</span>(last-&gt;name, name) == <span class="number">0</span>)&#123; <span class="comment">// if the first node is the same user.</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(last-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(last-&gt;name, name) == <span class="number">0</span>)&#123; <span class="comment">// if same user exists</span></span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			last = last-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		last-&gt;next = newuser;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delete the user with name from the linked list.</span></span><br><span class="line"><span class="comment">// int delete_user(const char *name, User **user_ptr_del)</span></span><br><span class="line"></span><br><span class="line">		User* curr = *user_ptr_del;</span><br><span class="line">		User* prev; <span class="comment">// store previous node.</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// if head node itself holds the user to be deleted.</span></span><br><span class="line">		<span class="keyword">if</span>(curr != <span class="function"><span class="literal">NULL</span> &amp;&amp; <span class="title">strcmp</span><span class="params">(curr-&gt;name, name)</span></span>== <span class="number">0</span>)&#123;</span><br><span class="line">			*user_ptr_del = curr-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(curr);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(curr != <span class="function"><span class="literal">NULL</span> &amp;&amp; <span class="title">strcmp</span><span class="params">(curr-&gt;name, name)</span> !</span>= <span class="number">0</span>)&#123;</span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		delete_user_from_friends(name, *user_ptr_del);</span><br><span class="line">		prev-&gt;next = curr-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(curr);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>type is not assignable during <code>malloc</code>: <code>struct user *friends[MAX_FRIENDS];</code></p>
</li>
<li><p>segmentation fault!!! <strong><em>Usually in practice, if we want to access the memory location where we don’t have access to, meaning that when we want to set some attributes, we need to first make sure that that part of memory has been malloc!!</em></strong></p>
<blockquote>
<p>One trick on this is to make sure that whenever we see a struct like this: first is to malloc memory for the all struct, then for each array, like here <code>name</code>, <code>profile_pic</code> and <code>friends</code> array. Especially the <code>friends</code> array, the haunting time when debugging for the final function <code>delete_user</code>, I always get a segmentation fault, which results from that I did not malloc the memory for the friend array at the very first beginning inside <code>create_user</code> function, thus when I try to change one element’s value, I will access to unallocated memory, a segmentation fault.</p>
</blockquote>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> user &#123;</span><br><span class="line">    <span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line">    <span class="keyword">char</span> profile_pic[MAX_NAME];  <span class="comment">// This is a *filename*, not the file contents.</span></span><br><span class="line">    <span class="keyword">struct</span> post *first_post;</span><br><span class="line">    <span class="keyword">struct</span> user *friends[MAX_FRIENDS];</span><br><span class="line">    <span class="keyword">struct</span> user *next;</span><br><span class="line">&#125; User;</span><br></pre></td></tr></table></figure>
<ul>
<li>Difference between <code>memcpy</code> and <code>strcpy</code>. <code>strcpy</code> will stop when meeting a ‘\0’ line terminator, while <code>memcpy</code> will not do that, it can do the content copy without looking to the value of the contents.</li>
</ul>
<h2 id="Bugs_remaining_to_fix">Bugs remaining to fix</h2><ul>
<li>time.h. I finally do a trick to cover up the failure of using time.h. we are supposed to record the time when a post is created, and store the address of that <code>time_t</code>, which is actually a long int, to the struct attribute <code>post-&gt;date</code>, while it fails to display the right time when doing <code>ctime</code> in <code>print_user</code> function. I finally insert a time update right into the <code>print_user</code> function to let them next to each other and it display right result?!.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原型是最近一门课的作业， 这是我在过程中记下的一些手记心得， 都是我认为是值得关注的地方。 未来会把这些后端函数加入TCP协议， 更贴近实战使用吧。基础的数据结构主要是链表， 算是用C自己再复习一遍链表实现。算法嘛？没有算法😂不需要考虑性能也就没有考虑算法优化咯。</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://chocoluffy.com/tags/C/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Responsive web design[第三期]-js动画]]></title>
    <link href="http://chocoluffy.com/2016/02/04/Responsive-web-design-%E7%AC%AC%E4%B8%89%E6%9C%9F-js%E5%8A%A8%E7%94%BB/"/>
    <id>http://chocoluffy.com/2016/02/04/Responsive-web-design-第三期-js动画/</id>
    <published>2016-02-05T01:48:22.000Z</published>
    <updated>2016-02-05T01:55:38.000Z</updated>
    <content type="html"><![CDATA[<p>Introduce greensock library to javascript, along with GPU acceleration to create high-quality and smooth animations. </p>
<a id="more"></a>
<h2 id="Introduction">Introduction</h2><p>很多前端开发者会告诉你，你应该避免使用 JavaScript 动画。使用 CSS 动画会有更好的性能（更少的 CPU 时间）和更平滑的效果（更高的帧率）。</p>
<p>然而，JavaScript 动画慢的原因经常是因为你用的库并没有为动画进行优化。优化过的 JavaScript 动画引擎（比如 GreenSock 或 Velocity.js）有堪比 CSS 动画的性能。某些情况下 JS 动画甚至比 CSS 动画更快！可参考下面这个性能的比较， 最后发现在某些情况下greensock的性能会比jquery好上5-6倍</p>
<ul>
<li><a href="https://www.greensock.com/js/speed.html" target="_blank" rel="external">greensock</a> </li>
</ul>
<h2 id="引入greensock_js库">引入greensock js库</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TweenMax.fromTo(<span class="string">"#box"</span>,<span class="number">1</span>, &#123;</span><br><span class="line">    <span class="comment">// from</span></span><br><span class="line">    css: &#123;</span><br><span class="line">      left: <span class="string">"-200px"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="comment">// to</span></span><br><span class="line">    css: &#123;</span><br><span class="line">      left: <span class="string">"200px"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 永久重复动画的选项</span></span><br><span class="line">    repeat: -<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转、重新运行动画的选项</span></span><br><span class="line">    yoyo: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变 easing 类型</span></span><br><span class="line">    ease: Power2.easeInOut,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>什么是fps? 帧率或画面更新率是用于测量显示帧数的量度[1]。测量单位为“每秒显示帧数”（Frame per Second，FPS，帧率）或“赫兹”，一般来说FPS用于描述影片、电子绘图或游戏每秒播放多少帧，而赫兹则描述显示屏的画面每秒更新多少次。<br>由于人类眼睛的特殊生理结构，如果所看画面之帧率高于每秒约10-12帧的时候，就会认为是连贯的[2]， 此现象称之为视觉暂留。这也就是为什么电影胶片是一格一格拍摄出来，然后快速播放的。但30帧仅仅是流畅，而非平滑连续，因此有更多帧率的产品推出也就不足为奇了。<br>有声电影的拍摄及播放帧率均为每秒24帧，对一般人而言已算可接受，但对早期的高动态电子游戏，尤其是射击游戏或竞速游戏来说，帧率少于每秒30帧的话，游戏就会显得不连贯，这是因为电脑会准确地显示瞬时的画面（像是一台快门速度无限大的相机），没有动态模糊使流畅度降低。而使用相同帧率的摄影机拍摄物体移动时，该场景的视频必定会表现所有移动物体在曝光时间内所有位置的完整组合。因此很多新世代电玩游戏以动态模糊为特色。在实际体验中，60帧相对于30帧有着更好的体验。</p>
</blockquote>
<p>在app.js里面我们用y来表现出垂直状态的变化</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> animateLogo()&#123;</span><br><span class="line">	TweenMax.fromTo(<span class="string">"#logo"</span>, <span class="number">2.5</span>, &#123;</span><br><span class="line">		css: &#123;</span><br><span class="line">			y: <span class="string">"-30px"</span>,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		css: &#123;</span><br><span class="line">			y: <span class="string">"20px"</span>,</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		repeat: -<span class="number">1</span>,</span><br><span class="line">		yoyo: true,</span><br><span class="line">		ease: Sine.easeInOut,</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GPU加速">GPU加速</h2><p>你可以把一个网页想象为一堆矩形。布局和绘图都是由 CPU 完成的：</p>
<p>CPU 计算这些矩形的布局。矩形在哪里？它们有多大？<br>CPU 把矩形渲染成点阵位图（bitmap）。<br>之后如果可能的话，矩形被送到 GPU 以获得更好的性能：</p>
<p>CPU 以点阵位图的形式上传到 GPU 中。<br>CPU 给 GPU 发送指令去处理这些位图。可能有平移/缩放/旋转，修改透明度，等等。<br>GPU 为什么比 CPU 快呢？假设我们把一个红色点阵和一个绿色点阵结合，CPU 不得不一个一个像素地做.</p>
<p>总的来说，当修改 CSS 属性时，有三种可能的开销：</p>
<p>重排（CPU。代价最高）。<br>重绘（CPU）。<br>变换, 旋转, 缩放, 透明度（GPU，代价最低）。</p>
<p>因此在使用transform的时候， 我们常常用y在表示垂直方向的移动，这么做是不会重新排列布局的， 而是在局部位置偏移。</p>
<blockquote>
<p>注意： left 只对 position: absolute 生效 </p>
</blockquote>
<p>transform 的原理是由元素的定位位置（absolute or relative) 偏移。<br>用 GreenSocks 去修改 left 的话是改变定位位置。<br>也就是说 left 的动画改变布局，但 transform 动画不会改变布局。</p>
<h2 id="多步骤动画">多步骤动画</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> TimelineMax();</span><br><span class="line">t.<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">1</span>,&#123;<span class="attribute">x</span>: <span class="number">200</span>&#125;)</span><br><span class="line">  .<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">0.5</span>,&#123;<span class="attribute">rotation</span>: <span class="string">"360deg"</span>&#125;)</span><br><span class="line">  .<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">1</span>,&#123;<span class="attribute">y</span>: <span class="number">100</span>&#125;)</span><br><span class="line">  .<span class="keyword">to</span>(<span class="string">"<span class="subst">#box</span>"</span>,<span class="number">0.5</span>,&#123;<span class="attribute">rotation</span>: <span class="string">"-=360deg"</span>&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="指示器(滚动指示条)">指示器(滚动指示条)</h2><p>当窗口滚动时, 你可以用 window.scrollY 来算出窗口正在展示的是哪一部分。那么现在的重点就在于， 怎样可以获得关于元素所在位置， 高度的各种属性， 比如<code>scrollY</code>, <code>offsetHeight</code>, <code>offsetTop</code></p>
<ul>
<li><a href="http://stackoverflow.com/questions/6777506/offsettop-vs-jquery-offset-top/21880020#21880020" target="_blank" rel="external">offset的各种用法实例</a></li>
</ul>
<h2 id="取消link默认行为">取消link默认行为</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSmoothScrolling</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#slider-control a"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;links.length; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> link = links[i];</span><br><span class="line">		<span class="keyword">var</span> section = <span class="built_in">document</span>.querySelectorAll(<span class="string">"div.section"</span>)[i];</span><br><span class="line">		(<span class="function"><span class="keyword">function</span>(<span class="params">sec</span>)</span>&#123;</span><br><span class="line">			<span class="comment">// console.log(sec);</span></span><br><span class="line">			link.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">				<span class="comment">// console.log(sec.offsetTop+"px");</span></span><br><span class="line">				scrollToElement(sec);</span><br><span class="line">				e.preventDefault();</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)(section)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先用一个闭包来保证， 里面的函数在click的时候才之行， 而在那个时候， i 已经到了最后一个link的位置， 所以必须提前找到对应的section， 然后在闭包中传入。 同时需要在click事件的最后加上一个e.preventDefault， 来阻止link的默认行为， link的默认行为是直接跳转， 然后我们需要动画来辅助。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Introduce greensock library to javascript, along with GPU acceleration to create high-quality and smooth animations. </p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Memory allocation in C]]></title>
    <link href="http://chocoluffy.com/2016/01/26/Memory-allocation-in-C/"/>
    <id>http://chocoluffy.com/2016/01/26/Memory-allocation-in-C/</id>
    <published>2016-01-26T22:36:34.000Z</published>
    <updated>2016-02-01T14:52:04.000Z</updated>
    <content type="html"><![CDATA[<p>Learning memory allocation in C for beginners will be totally a pain. This post, distilled from course materials, will provide you a practice guide and example coding snippets to help you learning more and fast in C programming language. It is cherishable, at least to me :)</p>
<a id="more"></a>
<h2 id="Introduction_to_malloc">Introduction to malloc</h2><ul>
<li>Variable defined in function will be stored in stack, so how to use that part of memory after function returns? we use <code>void * malloc(size_t size)</code> will allocate memory in heap. This function will remain the memory for the variables until the function explicitly deallocate them. The argument for this function indicates how many bytes of memory should it allocate.</li>
<li>In general, <code>size_t</code> is unsigned_int. Notice the <code>void *</code> type of the pointer, we know that in C, add 1 to a pointer will go to the next legal address, for <code>int*</code>, it is the next integer, for <code>char*</code>, it is next character.</li>
<li>A void pointer is a pointer that represent a generic type. It just points to the memory specified, so it do not need to specify right now what type of that memory is, instead, we will declare the type when use pointer:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure>
<p>the above code indicates that we will the allocated memory for integer. </p>
<h2 id="Example_code">Example code</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"> * <span class="type">Return</span> an <span class="type">array</span> <span class="keyword">of</span> the squares <span class="keyword">from</span> <span class="number">1</span> to max_val.</span><br><span class="line"> */</span><br><span class="line"><span class="type">int</span> *squares(<span class="type">int</span> max_val) &#123;</span><br><span class="line">    <span class="type">int</span> *<span class="literal">result</span> = malloc(sizeof(<span class="type">int</span>) * max_val);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= max_val; i++) &#123;</span><br><span class="line">        <span class="literal">result</span>[i - <span class="number">1</span>] = i * i ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *squares_to_10 = squares(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    // <span class="keyword">let</span>'s print them <span class="keyword">out</span> </span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        printf(<span class="string">"%d\t"</span>, squares_to_10[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that in the above code, there are several variables that are located in heap. They are, the address store inside the variable result, since it points to a integer that lies in heap, while <strong>the addresss of the variable result is not in the heap, it is in the stack</strong>. One quick trick is that those value in heap, their address is valid. </p>
<h2 id="Explicitly_deallocate_the_memory">Explicitly deallocate the memory</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">play_with_memory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *pt = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    *pt = <span class="number">49</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// What happens if you comment out this call to free?</span></span><br><span class="line">    <span class="built_in">free</span>(pt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// What happens if you uncomment these statements?</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pt); <span class="comment">// output 49</span></span><br><span class="line">    *pt = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pt); <span class="comment">// output 7</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    play_with_memory();</span><br><span class="line">    play_with_memory();</span><br><span class="line">    play_with_memory();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Important issue here: when returned from the function, all variables will be freed from stack, which means that the <code>i</code> and <code>result</code> in the above code will be removed. It will cause a memory leak if we forget to link the memory from <code>malloc</code> to other heap variables. Since there will be no way from elsewhere to access that part of memory.</p>
</blockquote>
<ul>
<li>The danger of memory leak is that if it accumulates, it will finally cause a <code>out of memory</code> issue.</li>
<li>what happens if we print out the value stored in that memory location after we free up that pointer? <strong>Address is still valid and the value can still be accessed, but this time, we are using the part of memory that does not belong to us</strong>. Note that using unallocated memory is OK in some cases, but it will be dangerous when that part of memory being reallocated. So, always use allocated memory!</li>
</ul>
<h2 id="Passing_values">Passing values</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> **arr_matey)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// let's make an array of 3 integers on the heap</span></span><br><span class="line">   *arr_matey = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> *arr = *arr_matey;</span><br><span class="line">   arr[<span class="number">0</span>] = <span class="number">18</span>;</span><br><span class="line">   arr[<span class="number">1</span>] = <span class="number">21</span>;</span><br><span class="line">   arr[<span class="number">2</span>] = <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    helper(&amp;data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's just access one of them for demonstration</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the middle value: %d\n"</span>, data[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>there are basically two ways to help to avoid memory leak, a) <strong>return value</strong>, if we define that function type to be a pointer type, so that we can return the pointer in order to assign the values in main function. b) <strong>argument</strong>, we pass the one we want to assign values to the function and do the assigning part inside that function, and this time, the function type can be void but still finish the task.</li>
<li>However, it is much harder to use <code>argument</code> one since in C, the changes inside the function will not be preserved if we return nothing. Therefore, we need to the “address-value” relation in such scenario – That is <strong>we pass in pointer, we change value pointed at pointer, without returning anything, and we’re done.</strong> While problem comes when we want to change the pointer, say this line <code>*arr_matey = malloc(sizeof(int) * 3);</code>, we want to change the pointer now, but such change will not be preserved after function. Therefore, we will need to pass in a <strong>“poiter of pointer” to deal with pointer assignment!</strong> </li>
</ul>
<h2 id="Nested_structure">Nested structure</h2><p>if we want to use a nested struture to represent an array, say in that array, each element points to another array, since we don’t know that array size at compilation time, we would use <code>malloc</code> to allocate memory for those int array. The code is like</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ** pt = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>Say, now, I want the pt[0] to hold up an array of one integer, the way to do that is to use:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure>
<p>Similarly, if we want pt[1] to hold up 3 integers, we would use:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note that when we free those pointers, we need to free the innermost pointer first then outer one. </p>
</blockquote>
<p>An complete code example:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this allocates space for the 2 pointers</span></span><br><span class="line">    <span class="keyword">int</span> **pointers = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * <span class="number">2</span>); </span><br><span class="line">    <span class="comment">// the first pointer points to a single integer</span></span><br><span class="line">    pointers[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">// the second pointer pointes to an array of 3 integers</span></span><br><span class="line">    pointers[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's set their values</span></span><br><span class="line">    *pointers[<span class="number">0</span>] = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    pointers[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    pointers[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line">    pointers[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// do other stuff with this memory</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// now time to free the memory as we are finished with the data-structure</span></span><br><span class="line">    <span class="comment">// first we need to free the inner pieces</span></span><br><span class="line">    <span class="built_in">free</span>(pointers[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(pointers[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// now we can free the space to hold the array of pointers themselves</span></span><br><span class="line">    <span class="built_in">free</span>(pointers);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Memory_model">Memory model</h2><ul>
<li>note that th variable in main function does not belong to global variable, indicating it should still go to the stack part. The “global data” part contains mainly three stuff: <strong>a) global variables, b) string literals </strong> Note that for the string literals, the code like this: <code>char* str = &quot;Hello world!&quot;;</code> can lie in a local function, it just means that the pointer str can be in the stack, while the string literal “Hello world!” is in global data part. </li>
<li>And dynamic memory allocation lie in heap.</li>
</ul>
<h2 id="String">String</h2><ul>
<li><p>difference between a string and a character is that at the end of string, there is a <code>\0</code> as an ending signal. Once the character array declared, the size is fixed. Note that the difference between these similar version of declaring character array:</p>
<ul>
<li><code>char string[20] = &quot;cool shit&quot;</code>, it is defining a <strong>string variable</strong>, with a <code>\0</code> at the end of the array, note that there will be a lot of <code>\0</code> following the valid words. It can be changed afterwards.</li>
<li><code>char string[] = &quot;cool shit&quot;</code>, defining a <strong>string variable</strong> the size will be fixed according to the first assignment. It can be changed afterwards.</li>
<li><code>char* string = &quot;cool shit&quot;</code>, defining a <strong>string constant</strong>. it is a string literal! cannot be changed!! If you change the string, it will give a “bus error”. Main point here: <em> <strong>it makes string point to a read-only memory where string literal is stored, while the above two way are indeed allocating memory and copy string to them.</strong></em></li>
</ul>
</li>
<li><p>difference between <code>strlen</code> and <code>sizeof</code>. <code>strlen</code> will return the valid number of characters before null character, while <code>sizeof</code> will just give you the size of whole char array including null characters.</p>
</li>
<li><p>use <code>strncpy</code> as a stable counterpart of <code>strcpy</code>, the usage is like: <code>strncpy(s1, s2, sizeof(s1));</code> see the complete code below, s2 is a string literal. </p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">32</span>] = <span class="string">"University of"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is unsafe because s1 may not have enough space</span></span><br><span class="line">    <span class="comment">// to hold all the characters copied from s2.</span></span><br><span class="line">    <span class="comment">//strcpy(s1, s2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This doesn't necessarily null-terminate s1 if there isn't space.</span></span><br><span class="line">    <span class="built_in">strncpy</span>(s1, s2, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">    <span class="comment">// So we explicitly terminate s1 by setting a null-terminator.</span></span><br><span class="line">    s1[<span class="number">4</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note that s1 is a character array, which means that there is no null characters at the end. if we want to do this way, we want to add null character at the end.</p>
</blockquote>
<ul>
<li>Similarly, <code>strncat(s1, s3, sizeof(s1)-strlen(s1)-1);</code> is the stable version of using strcpy.</li>
<li><code>char * strchr(const char s, int c);</code> return the index at the first occurence of the character</li>
<li><code>char * strstr(const char* s1, const char* s2);</code> find sub string. see the code example below:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">30</span>] = <span class="string">"University of C Programming"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the index of the first 'v'</span></span><br><span class="line">    p = <span class="built_in">strchr</span>(s1, <span class="string">'v'</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Character not found\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Character found at index %ld\n"</span>, p - s1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the first token (up to the first space)</span></span><br><span class="line">    p = <span class="built_in">strchr</span>(s1, <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *p = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if the character specified in the second argument cannot find the right place, then it will assign NULL to p in this case. We can use pointer subtraction to get the index. </p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Learning memory allocation in C for beginners will be totally a pain. This post, distilled from course materials, will provide you a practice guide and example coding snippets to help you learning more and fast in C programming language. It is cherishable, at least to me :)</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://chocoluffy.com/tags/C/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[象征与符号]]></title>
    <link href="http://chocoluffy.com/2016/01/23/%E8%B1%A1%E5%BE%81%E4%B8%8E%E7%AC%A6%E5%8F%B7/"/>
    <id>http://chocoluffy.com/2016/01/23/象征与符号/</id>
    <published>2016-01-24T04:05:53.000Z</published>
    <updated>2016-03-23T15:15:06.000Z</updated>
    <content type="html"><![CDATA[<p>是什么， 在流血。</p>
<a id="more"></a>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f0agj99z92j20zk0zkajv.jpg" alt="mirror"></p>
<p>每一个刺耳的反对声音， 都很容易被看作是一种象征， 与其说是自愿地走上风口浪尖， 不如说， 是在大众的狂欢和幻想意淫里演变为一场戏剧式的剑拔弩张。 人们娱乐着， 消遣着， 像是有了将帅挂靠着的小兵肆意地挑逗着对手的神经， 全然不觉语气里的傲慢与肤浅。 枪口最后还是走火了， 不过看热闹的小兵早已作鸟兽散， 留下曾经市井起义逐渐背离初衷的将帅， 在一片哀叹中， 付出沉重的代价。</p>
<p>关于查理周刊的事情， 我想试着从一个不那么主流， 但是仍然很有趣的角度去想， 究竟什么是象征， 是什么推动了出现象征性。是什么让这种呈现和代表变得躁动不安又难以抗拒。 又是什么， 在流血。</p>
<p>首先引起我注意的是这几句话</p>
<ul>
<li>“一种沉重的象征主义的重量——原本并不存在于我们的漫画中，也离我们很远的东西，现在落在了我们的肩上。”</li>
<li>“实际上，《查理周刊》一直以来都致力于反对象征主义：我们摧毁符号，打破禁忌，将那些幻想的泡沫破灭。我们很高兴看到人们给予《查理周刊》支持，但同时他们的做法却跟《查理周刊》的初衷背道而驰。”</li>
<li>“任何意义的象征主义都能被任何人利用起来做他们想做的事。”</li>
</ul>
<p>我接着联想到的是， 很久之前的一个大新闻， 戴安娜王妃之死。 如果大家还有印象， 当时那个车祸发生之后的几天， 是接踵而来的铺天盖地关于邪恶的小报记者的评论， 大家指责那些追逐在王妃身后的狗仔记者们， 认为他们手上沾满了鲜血， 要对公众心中那个高贵优雅的戴安娜王妃的事故负上不可推卸的责任。 然而如果仔细推敲， 渴望注视戴安娜王妃高贵而优雅的形象， 又在其陨灭之时渴求安慰的， 究竟是那些努力挖掘“隐私”的小报， 还是拥有着窥视他人生活的这个或许谈不上弱点的本能的大众呢？而那些狗仔小报， 或许只是市场的产物， 只是人们愿意窥视， 哪怕只是对他人生活的一种不恶意的关心的象征。 而一旦顶上了象征的头衔， 也容易在万众注视下成为笔伐口诛的对象。 换句话说， 很可能是人们这种不必然具备恶意的欲望， 促成了那种“有害”的小报和令人们讨厌的狗仔记者。</p>
<p>听上去挺“悖论”的， 为什么明明是不必然恶意的东西， 会衍生出有害的结果。 而为什么， 主角都是传媒媒体， 都是传播者。</p>
<p>人们饭前茶后的谈资， 自古放肆得甚至有点愚蠢朋克的法式幽默， 又真得能经受得住媒体放大器般的传播吗？媒体往往是言论自由和新闻自由的象征和符号。 美国宪法史上好几次最精彩的判决和宣判都和言论自由有关， 而关于新闻自由和涉及“所谓的政府内幕的间谍罪”之间的争论也一直不会停止。 人们不希望受到恶意言论所困， 却又畏惧在任何形式上的禁止和压迫上走得更远。 而媒体， 则更像一个扩音器， 无论是积极还是消极的影响都会被施加上令人喘不过气的压迫力。 一个我能想到的理由， 然而并不新鲜， 是更多的人们偏爱剑拔弩张多过鲜花掌声， 反对和刺耳， 带着张着血气的眼神， 比冷静和无为更为刺激和爽感。 而媒体， 只是一次次转发传递的情感累积， 只是在一场场人群的狂欢中那个热气朝天的广场， 没有了人群， 没有了咆哮， 也就没有它本身存在的意义。</p>
<p>人们可以在自己的本能和欲望中注视到许多象征的缘由。 或许象征本身， 就是人们所力所不及却昼夜痴狂的一种群体记忆吧。而没有了回响， 也就没有了意义。</p>
<blockquote>
<p>后记： 这篇文章的大部分构架是我在等地铁的时候偶然想到的。 缘于读书小组的一次主题讨论， 看到朋友分享的一篇文章， 由一些只言片语所启发所引来的一堆胡思乱想。 或许我可以写得更加详细一点， 但是可能大家在自己思考的时候的所思所想也已远超过我的文笔和见解， 多一些余地， 也多一些回响的空间嘛。趁周末的时候写点文字的感觉还是极好的， 望坚持！最后， 本文中关于戴安娜王妃的例子阐述， 也是启发于以前看到的北大法学系苏力教授关于隐私权的探讨， 而那些摘录的句子， 来源于下面这篇朋友转发的文章。附上我所参考的文章原文。</p>
</blockquote>
<h2 id="《查理周刊》幸存者专访：我们不是一种象征，我们只是一本简单的漫画">《查理周刊》幸存者专访：我们不是一种象征，我们只是一本简单的漫画</h2><p>当地时间1月7日，法国漫画杂志《查理周刊》突遭恐怖分子持枪袭击，造成12人死亡，11人受伤。遇难者中包括杂志社五名重要的漫画家以及两名警察。面对这样的暴行，“Je suis Charlie”（我是查理）成为了一句口号，一面宣扬保护言论自由、抵制恐怖主义的旗帜。</p>
<p>Luz在《查理周刊》工作了20年。1月7日是他的生日，因此他在当天早上在《查理周刊》杂志社总部召开的每周编辑会议上迟到了，因此逃过一劫。现在他同其他的幸存者一起在为1月14日发行的下一期《查理周刊》做准备，这一期漫画将印刷100万份。在这份新的杂志中，Luz和他的同事们将在漫画中描述这周日的共和国大游行。在恐怖分子杀死了他的朋友，他的导师，他的亲人之后，Luz向记者讲述了他的愤怒，他的恐惧，他的怀疑。目前悲痛欲绝的他不能确定在1月7日的悲剧之后他是否还能继续画下去。</p>
<p>记者：下周三的《查理周刊》的内容将是很敏感的国家与政治问题。在目前这种不稳定的局势下，你们为什么要承担起这样的责任呢？</p>
<p>Luz：当我最初拿起画笔的时候，我并不认为这是一件危险的事，我们认为我们只是画出类似滑稽的米老鼠的东西而已。但现在，在死亡，枪击，暴力之后，一切都改变了。所以的目光都聚焦在我们身上，我们现在成了一个象征，就像我们画出来的漫画一样。《人道报》Humanité 将《查理周刊》2015年1月7号刊的作家Houellebecq漫画像作为封面，并配上头条标题“自由已被谋杀”，莫大的讽刺。一种沉重的象征主义的重量——原本并不存在于我们的漫画中，也离我们很远的东西，现在落在了我们的肩上。</p>
<p>《查理周刊》1月7号刊，刚出新作《屈服》的Houellebecq登上封面，书中想象了2022年伊斯兰化了的法国。</p>
<p>记者：您所说的“象征主义的重量”是什么意思呢？</p>
<p>Luz: 2007年，当丹麦报纸Jyllands-Posten把一系列穆罕默德的漫画刊登出来之后，我们被看成是为媒体言论自由抗争的麻烦制造者或是勇敢的白衣骑士。在2011年，当我们的办公室被燃烧弹攻击时，我们再一次被看作是白衣骑士。2012年，一部关于穆斯林的喜剧电影上映（穆斯林的无知），当时我们把这部电影画成了相关的漫画，得到了相同的回应：我们再一次成为了危险的麻烦制造者，画出危险的漫画导致法国领事馆关闭、导致在国外的法国人承担恐惧的麻烦制造者。当全球都因此处于恐慌之中时，我们只是该死的一本受大众喜爱的杂志而已。这本杂志成为了国家、国际的象征，但是，被杀死的是“人”，不是“言论自由”！是那些坐在办公室里画漫画的人。</p>
<p>记者：你的意思是说漫画的本质改变了吗？</p>
<p>Luz：自从我们开始画有关穆罕默德的漫画开始，漫画“不承担责任”的本质就开始一点点消失了。从2007年开始，我们的漫画被人们以字面上的意思来理解。人们，包括一些像Plantu那样的漫画家（Plantu，法国政治讽刺漫画家）都认为我们不该画那些关于穆罕默德的漫画，因为这些画都在网络上疯传。因此我们得处处小心遭人报复，这种感觉让人难以忍受。</p>
<p>记者：为什么？</p>
<p>Luz：从2007年开始，《查理周刊》就受到审查并被警告要承担责任。我们画出的每一幅漫画都被解读成是跟政治有关。这些责任就落到了我们肩上。但我们只是一份杂志，买了，打开看了，再合上，就这么简单。若是人们把我们的漫画传到网上，若是媒体强调我们的一些漫画，那是他们的责任，不是我们的。</p>
<p>记者：但同你们事与愿违的事情发生了。</p>
<p>Luz：我们被加上了象征主义的责任，而这本不是《查理周刊》的初衷。我们跟Plantu不同，我们反对象征主义。“战争中鸽子象征着和平”这类隐喻不是我们想要表达的。我们是在细节上下功夫，我们注重的是怎样把我们画的东西用法式幽默表达出来。</p>
<p>记者：漫画在某些情况下会被认为是粗鲁的，或是很朋克的东西。</p>
<p>Luz：有些时候愚蠢，有些时候粗鲁，至于朋克，那是肯定的。有时候漫画不会产生任何影响，另一些时候它就只是供人消遣的娱乐。《查理周刊》聚集了一群思想差异很大的漫画家。根据不同的漫画家用不同的风格来表现一副漫画——画政治或是艺术，漫画的本质也在改变。但是这种多样性的表达方式现在却不复存在了。每一幅漫画都被看作是我们所有人一起完成的。实际上，《查理周刊》一直以来都致力于反对象征主义：我们摧毁符号，打破禁忌，将那些幻想的泡沫破灭。我们很高兴看到人们给予《查理周刊》支持，但同时他们的做法却跟《查理周刊》的初衷背道而驰。</p>
<p>记者：你们现在已经成为引领民族团结的旗帜。</p>
<p>Luz：这种团结能帮助奥朗德巩固整个国家，同样对于勒庞提倡的恢复死刑的主张也有帮助。任何意义的象征主义都能被任何人利用起来做他们想做的事。而这恰恰跟《查理周刊》追求的不同，你不能去做任何你幻想出来的事情。当我们嘲讽，开政治的玩笑，或者说是娱乐大众的时候，我们没有成为一种符号。我认为Charb（《查理周刊》主编，在11.7恐袭案中遇难）是20世纪末、21世纪初的Jean-Marc Reiser，他用自己的方式对这个社会做出评价。他画出藏在表象下的阴影，那些爱说谎的丑陋的人。而现在我们也被掩盖在表象下了。</p>
<p>记者：您的意思是？</p>
<p>Luz：在目前一种情绪状态下发布《查理周刊》是一个正确的时机吗？这样快速地对所攻击的象征主义做出回应适合吗？我很怀疑。用象征主义来回应象征主义，这不是《查理周刊》做的事。昨天晚上我在脑海中描绘出一幅漫画，不过我可能不会把它画出来：地板上一滩滩污渍代表着遇难者倒下的地方，一幅眼镜散落在角落说“哈哈哈”，背景是黑色。这不是一个好的主意，因为它会被打上象征主义的标签。</p>
<p>记者：所以您的问题时“事件过后你们将以什么方式继续画下去？”</p>
<p>Luz：是的，以及我怎样在这样的背景下画画，在《查理周刊》被赋予了那么多幻想之后。</p>
<p>记者：《查理周刊》将怎么继续下去呢？</p>
<p>Luz：这将会很复杂。除了我之前提到的那些原因之外，我们那几个善于画画、善于思考政治、道德、思想激进的同事—— Charb, Tignous, Honoré，还有其他几位，不在了。在这种困难的时刻，我们剩下的人承担着重任。现在只剩下Catherine, Willem, Coco以及我，还有受伤的Riss。单凭我们几个人的力量怎么才能越过这种象征主义呢？（早前从《查理周刊》离职的Jul现在前来帮助策划下一期的内容。）每个人都能成为漫画家，但他们能抓住查理的精神吗？我们的精神流传了22年了，现在这份杂志得以生存至今都是杂志社所有成员的努力。</p>
<p>记者：你们觉得有必要将先知画进讽刺漫画里吗？抑或你们有时候会觉得自己掉进了陷阱里？</p>
<p>Luz：有趣的是在2007年的事件过后我们继续画了一些有关穆罕默德的漫画。在2007年、2011年以及2012年三次画的默罕默德漫画引起争议之后，Charb 和 Zineb El-Rhazoui（在《查理周刊》工作的穆斯林女记者） 又出了两卷关于穆罕默德生活的漫画，但并没有引起轰动。我们的目的达到了。Charb 想要按照这个设想一直进行下去，穿着他的登山鞋，和他喜欢得不得了的实际上很丑的军裤，站在高处（笑）。Charb相信我们可以继续克服禁忌和符号标准。但现在，我们成为了一种符号。当一种符号就是你自己的时候，你能怎么样去摧毁它？</p>
<p>站在被烧毁的办公楼前的Charb。</p>
<p>记者：我不知道。</p>
<p>Luz：我也不知道。这周我不打算去想这个问题，我也不确定以后我会不会来解决它。我们会继续发布《查理周刊》。我会强迫我自己的。我会去思考我死去的朋友们，我知道他们不是为了法国而倒下的！今天，看上去似乎是《查理周刊》为言论自由而死了。但事实很简单，就是我们的朋友死了。我们爱的朋友，那些有着让我们非常欣赏的才华的朋友死了。</p>
<p>记者：在BFMTV上，我们看到现在局势很混乱。Charb的女友Jeannette Bougrab 说，他们值得被埋葬在法国的先贤祠里。</p>
<p>Luz：《查理周刊》不同意这样做。在先贤祠里被火葬对于居里夫人来说并没有改变任何东西！</p>
<p>记者：这将是一个很好的纪念方式。。。</p>
<p>Luz：1月7日晚的自发集会我没有去。在那里人们唱起了国歌。我们谈起Charb, Tignous, Cabus, Honoré, Wolinski: 他们一定会嘲笑这种行为态度。人们用他们喜欢的方式来表达自己，但是共和国不应该也变成一个歇斯底里的送葬者。这是一种悲哀。</p>
<p>记者：我想这将成为你把明天的集会记录在漫画里的理由吧？</p>
<p>Luz：我也不知道。毫无疑问，明天将会有各种美好的场面，泪水，微笑，或许还会有点荒谬。同时这也会表现出《查理周刊》本质的变化：现在来支持我们的人中，有很多都从来没读过我们的作品。我并不是跟他们生气。我们的目标从来都不是说服所有人。</p>
<p>记者：去年11月，Charb发出声明呼吁大家来订阅《查理周刊》，来拯救这本杂志。那个时候这本杂志很孤独。</p>
<p>Luz：自从第三次因为画默罕默德而受到争议之后，一些时候我们感到很孤独。很多关于《查理周刊》无神论的说法、思想都涌现了出来。但实际上我就就只是简简单单，快乐的不信教的人而已。死掉的那些，都是快乐的无信仰的人。现在他们死了，不存在了，就跟其他所有人一样。</p>
<p>记者：对于瓦尔斯总理没有邀请右派的勒庞来参加明天的共和国大游行一事，你怎么看？</p>
<p>Luz：我没有任何看法。</p>
<p>记者：你认为现在人们是有要拯救《查理周刊》的趋势吗？</p>
<p>Luz：说老实话，去救什么？现在大家还在势头上，有气势。而在一年的时间里，这些为言论自由而战的气势又会剩下多少？会给予私人媒体资金赞助吗？人们会抵制纸媒和报刊亭的衰落吗？人们还会买报纸杂志吗？这些气势会剩下什么？也许会剩下，也许不会。</p>
<p>记者：你们将如何工作？</p>
<p>Luz：我们将继续画那些快乐的小人儿。作为漫画家，我们的工作是以这些快乐的人们为素材来画成漫画，以传达一个观点，就是我们所有人都是快乐的小人物，我们会努力把我们需要做的做好。那些被杀害的人都只是画出那些欢快的小人儿的普通人。</p>
<p>记者：因此让你们这些简单快乐的小人物来拯救整个法国，未免太沉重了？</p>
<p>Luz：是的。</p>
<p>（来源：法媒les in rocks，采访：Anne Laffeter）</p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>是什么， 在流血。</p>]]>
    
    </summary>
    
      <category term="社会人物" scheme="http://chocoluffy.com/tags/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E7%89%A9/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Responsive web design[第二期]-position/overlay]]></title>
    <link href="http://chocoluffy.com/2016/01/20/Responsive-web-design-%E7%AC%AC%E4%BA%8C%E6%9C%9F-position-overlay/"/>
    <id>http://chocoluffy.com/2016/01/20/Responsive-web-design-第二期-position-overlay/</id>
    <published>2016-01-20T20:50:19.000Z</published>
    <updated>2016-01-23T15:55:18.000Z</updated>
    <content type="html"><![CDATA[<p>在使用position等css属性的时候会经常在’absolute’,’relative’和’static’上进坑。 本文从实战的角度介绍position的各种应用和如何添加一层优雅的渐变背景过渡层。</p>
<a id="more"></a>
<h2 id="position:_static">position: static</h2><p>when dealing with nested container, the parent div is usually set to be <code>position: relative</code> while child div is <code>position: absolute</code> so that the child element can be positioned to any pos within parent container, if the parent div is set to <code>position: static</code>, child element will ignore parent position.</p>
<blockquote>
<p>Note that <code>position: static</code> is CSS default setting, so if we want to use <code>position: absolute</code>, we should always set the parent element to <code>position: relative</code>. ReactNative set the default value back, so no worries.</p>
</blockquote>
<p>when use position properties like <code>top</code> and <code>left</code>, we usually set them to <code>50%</code>, but the result will be like the element’s top left corner is sticked to the center, while the rest of it is not at the center, which is not what we want, we usually use <code>transform</code> property and get it to <code>-50%</code> to center the element.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top: <span class="number">50</span>%;</span><br><span class="line">left: <span class="number">50</span>%;</span><br><span class="line">transform: translate(-<span class="number">50</span>%, -<span class="number">50</span>%);</span><br></pre></td></tr></table></figure>
<p>这里我们要说说 static 元素的另外一个坑。</p>
<p>absolute, relative: 有 z-index。<br>static: 没有 z-index。<br>没有 z-index 的元素默认在有 z-index 的元素下面。</p>
<p>img 和 h1 元素都是 position: static。z-index 对 static 元素不起作用，因此它们都在绝对定位的元素下面。</p>
<h2 id="position:_relative">position: relative</h2><p>接下来看看我们嘴经常见到的<code>position: relative</code>。<br>简单地说， 就是在这个元素原本的位置上做位移， 因为有了<code>position: relative</code>的设定， 我们可以用<code>top``left</code>来移动这个元素。<br>If you specify position:relative, then you can use top or bottom, and left or right to move the element relative to where it would normally occur in the document.</p>
<p>Let’s move div-1 down 20 pixels, and to the left 40 pixels:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#div-1</span> <span class="rules">&#123;</span><br><span class="line"> <span class="rule"><span class="attribute">position</span>:<span class="value">relative</span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">20px</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">left</span>:<span class="value">-<span class="number">40px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>Notice the space where div-1 normally would have been if we had not moved it: now it is an empty space. The next element (div-after) did not move when we moved div-1. That’s because div-1 still occupies that original space in the document, even though we have moved it. 效果参考：<img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1f08roukzilj20ry0lwjw8.jpg" alt="position relative"></p>
<p>另外， position:relative 还带来了z-index的属性。</p>
<ul>
<li>references from <a href="https://css-tricks.com/absolute-relative-fixed-positioining-how-do-they-differ/" target="_blank" rel="external">Absolute, Relative, Fixed Positioning: How Do They Differ?</a><br>There are two other things that happen when you set position: relative; on an element that you should be aware of. One is that it introduces the ability to use z-index on that element, which doesn’t really work with statically positioned elements. Even if you don’t set a z-index value, this element will now appear on top of any other statically positioned element. You can’t fight it by setting a higher z-index value on a statically positioned element. The other thing that happens is it limits the scope of absolutely positioned child elements. Any element that is a child of the relatively positioned element can be absolutely positioned within that block.</li>
</ul>
<h2 id="position:_absolute">position: absolute</h2><p>如果我们使用<code>position: absolute</code>呢, 这个元素将会脱离文本， 我们可以人意将它摆放到的想去的位置， 注意和static的区别是， 这个absolute是相对<em><strong>上一个定位为relative</strong></em>的定位， 而static是相对浏览器的定位。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#div-<span class="number">1</span> &#123;</span></span><br><span class="line"> position:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#div-<span class="number">1</span>a &#123;</span></span><br><span class="line"> position:absolute;</span><br><span class="line"> top:<span class="number">0</span>;</span><br><span class="line"> right:<span class="number">0</span>;</span><br><span class="line"> width:<span class="number">200</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果参考：<img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f08rtih4o4j20pe0iadk1.jpg" alt="relative and absolute"></p>
<blockquote>
<p>最后一个补充：我们常常和<code>float</code>搭配使用的<code>clear: both</code>, 作用是使得定义了该属性的元素的左侧和右侧均不允许出现浮动元素。</p>
</blockquote>
<h2 id="滚动控制">滚动控制</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="slider-control"&gt;</span><br><span class="line">  &lt;a href="#native" class="active"&gt;</span><br><span class="line">    &lt;div class="dot"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href="#touch"&gt;</span><br><span class="line">    &lt;div class="dot"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href="#async"&gt;</span><br><span class="line">    &lt;div class="dot"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href="#flex"&gt;</span><br><span class="line">    &lt;div class="dot"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>让它们position: fixed, 效果参考：</p>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1f06g8ze3fhj20yo0pw76w.jpg" alt="movement control"></p>
<h2 id="overlay_平滑过渡">overlay 平滑过渡</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;section&gt;</span><br><span class="line">    &lt;div class="container" id="intro-section"&gt;</span><br><span class="line">    &lt;div class="overlay"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;h1&gt;I Love React&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;I just want to see the so-called live-coding&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure>
<p>将最上面的container的背景设置为图片背景， 然后中间加一个div.overlay的div, 然后通过渐变设置其背景为主背景颜色。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#intro-section&#123;</span></span><br><span class="line">  background-image: url(../image/background.jpg);</span><br><span class="line">  background-size: cover;</span><br><span class="line">  background-position: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#intro-section h1, p&#123;</span></span><br><span class="line">  position: relative;</span><br><span class="line">  z-index: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.overlay&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: <span class="number">0</span>;</span><br><span class="line">  left: <span class="number">0</span>;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  background-image: linear-gradient(rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),rgba(<span class="number">22</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f06lr99d5xj21kw0q47cw.jpg" alt="overlay"></p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://hex2rgba.devoth.com/" target="_blank" rel="external">hex to rgba online converter</a></li>
<li><a href="https://github.com/luckymore0520/sike-react-ilovereact" target="_blank" rel="external">ilovereact</a></li>
<li><a href="http://gugugupan.github.io/sike-react-ilovereact/" target="_blank" rel="external">最后成品效果ilovereact－添加动画</a></li>
<li><a href="https://github.com/gugugupan/sike-react-ilovereact/blob/master/index.html" target="_blank" rel="external">上面github项目的index.html</a></li>
</ul>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用position等css属性的时候会经常在’absolute’,’relative’和’static’上进坑。 本文从实战的角度介绍position的各种应用和如何添加一层优雅的渐变背景过渡层。</p>]]>
    
    </summary>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[时间知道[持续更新...]]]></title>
    <link href="http://chocoluffy.com/2016/01/12/%E6%97%B6%E9%97%B4%E7%9F%A5%E9%81%93-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://chocoluffy.com/2016/01/12/时间知道-持续更新/</id>
    <published>2016-01-12T17:46:57.000Z</published>
    <updated>2016-02-26T00:39:31.000Z</updated>
    <content type="html"><![CDATA[<p>因为， 只有时间知道。</p>
<a id="more"></a>
<h2 id="技术">技术</h2><ul>
<li><a href="http://hanhailong.com/" target="_blank" rel="external">韩海龙的技术博客(Android\IOS)</a></li>
<li><a href="http://jinglei.me/" target="_blank" rel="external">荆雷的技术博客(React\Meteor)</a></li>
<li><a href="http://ramiro.org/vis/hn-most-linked-books-unique-users/" target="_blank" rel="external">Hacker News上评价最高的书</a></li>
<li><a href="http://www.yehbeats.com/" target="_blank" rel="external">YeHbeats的技术博客(Python\Hexo)</a></li>
<li><a href="http://zyden.vicp.cc/#blog" target="_blank" rel="external">Den的技术博客(Swift\Design)</a></li>
<li><a href="http://aljun.me/" target="_blank" rel="external">Aljun的博客(Python)</a></li>
</ul>
<h2 id="文字">文字</h2><ul>
<li><a href="http://think-different-8.lofter.com/view" target="_blank" rel="external">余舜哲的lofter足迹</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为， 只有时间知道。</p>]]>
    
    </summary>
    
      <category term="收藏帖" scheme="http://chocoluffy.com/tags/%E6%94%B6%E8%97%8F%E5%B8%96/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flexbox website layout - Intro]]></title>
    <link href="http://chocoluffy.com/2016/01/12/Flexbox-website-layout-Intro/"/>
    <id>http://chocoluffy.com/2016/01/12/Flexbox-website-layout-Intro/</id>
    <published>2016-01-12T17:00:52.000Z</published>
    <updated>2016-01-26T22:43:07.000Z</updated>
    <content type="html"><![CDATA[<p>My first attempt to build up a responsive website using Flexbox layout. Check <a href="http://chocoluffy.com/flex-layout/">Live Demo</a> here!</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1ezx7kdisiuj21kw0r1di7.jpg" alt="overview"></p>
<p>check <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">this post</a> on the complete guide about Flexbox layout.</p>
<blockquote>
<p>Below is the code that can be applied to many text\presentation related website. [1] font is cool and elegant. [2] layout is fast since we set div to <code>display: flex</code>. We won’t be bother to type that anymore, focusing on “position” and “stretch”</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#1F1E34</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFF</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">"Avenir Next"</span>,</span><br><span class="line">      <span class="string">"HelveticaNeue-Light"</span>, <span class="string">"Helvetica Neue Light"</span>, <span class="string">"Helvetica Neue"</span>, Helvetica,</span><br><span class="line">      Arial, <span class="string">"Lucida Grande"</span>, sans-serif</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">100</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">64px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">100</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">48px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">100</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">p</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">24px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">a</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">400</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFF</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">a</span>:<span class="value">hover &#123;</span><br><span class="line">  font-weight: <span class="number">400</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#DADADA</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>especially the font, it is so beautiful!</p>
<p>These units are vh (viewport height), vw (viewport width), vmin (viewport minimum length) and vmax (viewport maximum length). we set the vh to 100 like this:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">flex-direction</span>:<span class="value"> column</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">align-items</span>:<span class="value"> center</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">justify-content</span>:<span class="value"> center</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100vh</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>for the parent div container, since we want that parent div can take up a viewport height. vh stands for “viewport height”</p>
<blockquote>
<p>Note that <code>flex-direction</code> indicate items’ aligning, rows or columns. Then <code>align-items</code> means main-axis and <code>justify-content</code> is for sub-axis.</p>
</blockquote>
<h2 id="flex">flex</h2><p>在使用 ReactNative 时你会经常看到一个神秘的设定 flex: 1，用了来扩大一个 flexbox。flex 是一个简写，同时设置 flex-grow，flex-shrink 和 flex-basis 三个属性。它们的默认值为：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flex: <span class="number">0</span> <span class="number">1</span> <span class="keyword">auto</span>;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">flex-grow: 0;</span><br><span class="line">flex-shrink: 1;</span><br><span class="line">flex-basis: auto;</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p>flex: 1 意为 flex: 1 1 auto</p>
<h2 id="Summary_For_All">Summary For All</h2><p>basically using some flex-related properties to structure the whole website.</p>
<p>[1] to formate those section-like website, need to use <code>section</code> tag in html file and set the corresponding containter to be <code>100vh</code> which means the viewport height, so that each section can be strecthed to adapt to your screen height. (which is pretty elegant)</p>
<p>we usually use </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">flex-direction</span>:<span class="value"> column</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">align-items</span>:<span class="value"> center</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">justify-content</span>:<span class="value"> center</span></span>;</span><br></pre></td></tr></table></figure>
<p>these properties as container’s property.</p>
<blockquote>
<p>Note that we have main-axis and sub-axis, which will help you position the items by <code>align-items: center;
  justify-content: center;</code></p>
</blockquote>
<p>[2] structure inside each section. we may use another flexbox container inside one parent container to hold up more items like navigation or some scrum-map. And in this way, the <code>flex-direction</code> may usually be the opposite to the parent container. For the child container, we may wonder to stretch the block to whatever proportion to the whole layout. we want to use<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">flex-grow</span>:<span class="value"> <span class="number">1</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">flex-basis</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">align-self</span>:<span class="value"> stretch</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>which also applies the same logic from main-axis and sub-axis when setting their values.</p>
<p>Note that the <code>flex-basis</code> is pretty useful when you try to eliminate the effect of inner text to the block when stretching since <code>align-self: stretch</code> ONLY stretch the empty space to full length!</p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>My first attempt to build up a responsive website using Flexbox layout. Check <a href="http://chocoluffy.com/flex-layout/">Live Demo</a> here!</p>]]>
    
    </summary>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[现实和虚拟的边界]]></title>
    <link href="http://chocoluffy.com/2016/01/09/%E7%8E%B0%E5%AE%9E%E5%92%8C%E8%99%9A%E6%8B%9F%E7%9A%84%E8%BE%B9%E7%95%8C/"/>
    <id>http://chocoluffy.com/2016/01/09/现实和虚拟的边界/</id>
    <published>2016-01-09T21:26:16.000Z</published>
    <updated>2016-03-23T15:16:16.000Z</updated>
    <content type="html"><![CDATA[<p>什么花样。</p>
<a id="more"></a>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1eztyce4tu0j20c807tjs7.jpg" alt="virtual reality"></p>
<h2 id="前言">前言</h2><p>有幸将在这个学期接触并学习虚拟现实， 我的授课教授Steve Mann被誉为“世界穿戴电脑之父”， 放一张图片镇楼：<br><img src="http://ww1.sinaimg.cn/large/c5ee78b5gw1eztyejobw4j21jg17kn6k.jpg" alt="wearable computing"><br>早在20年前就自己在车库里捣鼓出第一代可穿戴设备， 然后在MIT实验室完成很多重大突破。刚好在36氪上看到自己同门师兄的一篇文章（不是这一篇）， 感受到2016年真是虚拟现实技术爆发的“元年”， 就好像07年第一代iphone出世时的轰动以及随之而来移动应用的爆发， VR将在2016-2020期间迎来他的舞台和随着平台而来的新媒体交互， 游戏影视内容。 下面这一篇文章同样来自36氪， 是我认为对场景的分析和vision上比较make sense的， 没有太多国内外过于夸张的描述和猎奇。值得一读。</p>
<p>在平台回复“未来”， 可以回顾以前发布的一篇关于增强现实的文字和视频， 当宠物小精灵在大街上对战…还有什么花样。</p>
<p>余舜哲 16.1.9</p>
<p>一下文字转载自36氪。侵删。</p>
<h2 id="一个_“奥酷拉思”_的未来——为什么我相信_VR_会改变娱乐业以及这个世界">一个 “奥酷拉思” 的未来——为什么我相信 VR 会改变娱乐业以及这个世界</h2><p>图片: Yestone.com 版权图片库</p>
<p>编者按：本文作者王冉，易凯资本有限公司（微信号：china-ecapital）创始人。文章首发于 36 氪。</p>
<p>内容提要：</p>
<p>如果说未来五到十年有什么东西能够像 Uber 颠覆全球出租车行业一样颠覆全球娱乐产业，我认为就是 VR（虚拟现实）这个东西。</p>
<p>我毫不怀疑，2016年 将是 VR 产业的元年。正像当年网景的 IPO 标志着互联网时代的到来，Oculus Rift 的上市也将成为 VR 时代正式开启的历史性标志。</p>
<p>VR 眼镜将遍地开花，谁都可能进入这个领域。至少在初期，各大 VR 眼镜商都会直接参与 VR 内容的制作。</p>
<p>所有需要插入手机、需要 PC 配合、需要手柄操作的 VR 眼镜都是过渡性产品，因为它们违反人性。未来的 VR 眼镜一定是一体式的，直接和云端的内容、应用和计算能力相连。</p>
<p>硬件商与内容商将从不同的出发点出发，互相侵入对方的领地，最终会出现多家硬软联姻、甚至硬软一体的 “索尼哥伦比亚” 或者 “哥伦比亚索尼”。当然，任何创意产业都无法被垄断，因此 VR 内容领域虽然会有巨头，但也会有层出不穷的中头、小头和微头。相比之下，硬件商经过三到五年的合纵连横，最终会走向整合，这个版图上最终留下的玩家应该不会比今天的手机厂商更多。</p>
<p>VR 将导致内容产业重新洗牌。在 VR 发展的初期，每个人都是斯皮尔伯格。VR 电影是 360 度的电影，它的轴心是观众的眼睛，故事必须沿着每一个观众的视线推进。这里面蕴藏着巨大的挑战、机会与诱惑。</p>
<p>VR 给电影业带来了很多前所未有的新课题。譬如，故事怎么讲剧本怎么写？又譬如，场景和声音切换怎么处理？再譬如，导演摄像如何藏身、360 度场景如何剪辑？还譬如，如何有分寸、有节制地进行感官刺激。未来导演会有更多的工作不是在现场，而是在机房。</p>
<p>VR 电影和 VR 游戏的界限会日渐模糊。一个观众可以与之互动并且影响故事进程的电影本质上就是一个具有电影结构和戏剧性的游戏。未来在电影和游戏之外，很可能会诞生 “游戏电影”（也可以称之为 “浸入式电影”）和 “电影游戏”（也可以称之为 “叙事性游戏”），它们的区别仅仅在于观众对于故事进程的影响程度。一个优秀的游戏电影的导演必须深谙游戏的逻辑；反过来一个优秀的电影游戏的导演必须精通电影的语言。未来电影和游戏的商业模式也将日益趋同。游戏里买装备、买道具、买体验的思路很可能会淘汰看电影买门票看贴片和植入广告的思路，真正有前途的是 “会员费 + 场景内购物 + 线下消费” 的强大组合。电影游戏化可能会比游戏电影化更容易走通。</p>
<p>在 VR 时代，超级 IP 同样重要，甚至更加重要。道理很简单：如果你是内容商，你已经承担了新技术新玩法新市场的风险，这时候应该尽量降低内容本身的风险。因此，手里有超级 IP 的内容公司以及与它们合作的硬件公司将比没有这些超级 IP 的玩家们更有机会品尝到 VR 的果实。</p>
<p>VR 电影是衍生品销售的天堂。这里所说的衍生品绝不仅限于玩具、T 恤、饮料这样的简单产品，它可以是一件极富设计感的大衣、一款来自米兰家具展的沙发、一个超级酷炫的数码产品，也可以是一辆梦幻跑车、一家 B 格闪耀的餐厅、甚至一个依山傍水的别墅样板房。这些原本植入在电影里只能当广告看的 “衍生品” 忽然间有了生命，栩栩如生地出现在你的面前，把展示变成了一场 360 度的亲密接触。</p>
<p>VR 时代电影院会遇到前所未有的挑战。在 VR 电影时代，电影院将很难通过小修小补来满足市场的需求，对着大银幕排排坐的观影方式将失去意义，电影院的整体设计只能推倒重来。未来电影院的主流形态会是怎样还有待定义，或许它会是 “常态影厅 + 社交观影包间 + 浸入式 VR 观影透明空间 + 衍生品体验馆” 的某种组合。</p>
<p>视频网站最有机会成为 VR 内容的发行平台。如果它们再和在线票务平台结合起来，取代现有的电影发行公司和院线公司几乎是必然。那个时候让 VR 电影给线下院线留出一个窗口期就好比让大闸蟹给阳澄湖留出一个窗口期一样可笑。</p>
<p>与 “VR 前” 时代相比，VR 时代是一个更加青睐生态型企业的时代。硬软一体、八面协同的生态型企业在 VR 时代的竞争优势将比以往更为明显。</p>
<p>虽然所有探索都值得鼓励，但万恶的资本和资本家们还是会更青睐那些创始人有正确的基因、技术或者模式具有颠覆性、潜在商业化路径清晰、最好还有一定规模的 VR 公司。这样的公司可以是独立的初创企业，也可以是大公司分拆出来的 VR 业务平台。后者甚至比前者更有机会快速发展。</p>
<p>正文：</p>
<p>先提几个问题：</p>
<p>十年后还会有电影院吗？<br>同一部电影，你用六十分钟看完，我看却用了三个小时，有可能吗？<br>你可以坐在沙发上就进入电影场景并且和 “身边” 的汤姆克鲁斯或者安妮海瑟薇互动吗？<br>“吓死宝宝了” 的电影场面有可能不小心真把宝宝吓死吗？<br>我们真的 “回不到从前” 吗？</p>
<p>所有这些问题之所以成了问题，是因为两个字母：VR。</p>
<p>全名叫 Virtual Reality，虚拟现实。</p>
<p>如果说未来五到十年有什么东西能够像 Uber 颠覆全球出租车行业一样颠覆全球娱乐产业，我认为就是 VR 这个东西。</p>
<p>VR 能玩出什么样的花活？</p>
<p>如果用一句话来概括 VR 为什么可以如此强悍，我觉得那是因为它可以让我们在感知上几近逃离物理时空的束缚，从四维世界进入到 “四维乘二” 的世界。</p>
<p>不妨想象一下这样的情景：</p>
<p>–你蜷缩在客厅的沙发上，用手机选好了想看的电影，戴上 VR 眼镜，然后你就进入了一个现代的虚拟 IMAX 影厅。这是你自己的包场，你可以邀请远在另一个城市的好友和你一起观影，他（她）就坐在你的旁边，你们可以一边看一边语音聊天，不用担心吵到别人，不用被不讲公德接电话的人打扰，周围没有韭菜盒子的气味，也没有后排一会儿踹你椅背一脚的小朋友。</p>
<p>–电影开始，你可以选择继续在虚拟 IMAX 厅观看，也可以选择进入电影场景。如果你选择进入场景，汤姆汉克斯或者安妮海瑟薇可能就在你身边，甚至还有可能向你点头致意。一只萤火虫飞来，你可以用手指与它互动。你可能像坐滑翔伞一样飞过一片森林，可能在枪林弹雨中左躲右闪，也可能在海底与大白鲨擦肩而过。你可能站在一个岔路口，选择向哪里走将决定你看到的故事。你也可能置身于一个古堡中，这个时候你推门走进这个房间会看到有一个女神在泡泡浴，而你走进另一个房间就会成为一起血腥凶杀案的目击者；你甚至还可以看到与你一起远程看电影的好友走进的是哪个房间…看完 VR 电影看 2D 就如同在视频网站上看漫画连载，再看 3D 感觉就像隔着睡袋做爱。</p>
<p>– VR 的应用绝不仅仅局限在电影这一个领域。未来你戴上眼镜，可以立刻出现在 TFBOYS 演唱会、《中国好声音》、或者世界杯决赛的现场。你在钢筋水泥的写字楼里坐在文件如山的办公桌前已经连续工作了 20 个小时，想打个盹，为什么不让自己一秒钟就躺在大溪地的海边。你有 200 斤重还有心脏病，你同样可以 “登上” 珠穆朗玛的峰顶。你想和李娜学网球，她随时可以在你身边示范动作。你想去感受一下 Angelababy 的衣帽间，或许只需微信支付 10 元就可以实现。夜深人静你想和远在地球另一半的闺蜜通个电话，拨完号码，你就坐到了她的对面，此刻她可能正穿着比基尼晒着日光浴。哪里发生重大新闻事件，你都可以瞬间成为新闻的现场目击者，新闻不再是用来 “看” 的，而是用来 “经历” 和 “体验” 的。</p>
<p>–还有更煽情的场景：若干年后，当父母不再，你戴上眼镜，马上就可以回到从前，一家人围坐在餐桌前其乐融融，吃着老的饭，谈着老的天，他们从未走远。只有当你摘下眼镜，才会发现眼角有两行泪水潸然而下。</p>
<p>VR 版图上正在发生什么？</p>
<p>我毫不怀疑，2016年 将是 VR 产业的元年。</p>
<p>说到 VR，不能不提奥酷拉思（Oculus）这个名字。这家 2014年 被脸书（Facebook）以 20 亿美元收购的公司是全球 VR 行业的领军企业。他们将于 2016年 初推出第一代面向大众的商用虚拟现实头戴式眼镜 Oculus Rift， 预计售价在 400 美元以内。当然，如果把使用它所需要的 PC 也算在内的话，全套设备的价格可能会达到 1500 美元。正像当年网景的 IPO 标志着互联网时代的到来，Oculus Rift 的上市也将成为 VR 时代正式开启的历史性标志。</p>
<p>为了能够让 Oculus Rift 一上市就有与它匹配的内容，Oculus 已经于今年1月 成立了一家专注于 VR 内容的公司 Oculus Story Studio（奥酷拉思故事工作室），并从 Pixar（皮克斯）这样的动画航母挖了一批顶尖人才。今年7月 份这家公司首映了一部 VR 动画短电影 “Henry” （《亨利》）的预告片。在这部预告片里，Henry 是一个刺猬，他在生日那一天邀请一帮朋友来给他庆生。朋友们都知道他见面喜欢拥抱，但因为他浑身是刺，大家都心有余悸，因此纷纷找借口推脱…作为观众，你你可以随意走动，当你走近 Henry 的时候，他会看着你并和你打招呼，仿佛你们生活在同一个世界里。在奥酷拉思工作室的另一部 VR 短片 “Lost”（《迷失》）里，只有当观众把目光投向一个特定的方向或者物体，电影情节才会继续，这样的电影有点像电影、游戏和图文小说的混合体。“Henry” 和 “Lost” 的完整版以及其它几部工作室制作的 VR 短电影将会和 Oculus Rift 同步推出。</p>
<p>与此同时，其它科技巨头也都不谋而合地把目光瞄准了 VR。</p>
<p>在 VR 眼镜方面，谷歌 2014年 就正式推出了他们经济实惠的 Cardboard (硬纸盒 + 手机) 解决方案。微软今年在展会上演示了集虚拟现实和增强现实于一体的 “混合现实” 眼镜 Hololens 在娱乐和办公领域的巨大潜力，近期他们也将宣布推出一款与谷歌 Cardboard 类似的微软版 VR 硬纸盒产品 VR Kit。三星 2014年9月 就推出了第一代 VR Gear，近日他们又宣布与 Oculus 合作生产的第二代 Gear VR 眼镜将于今年圣诞季启动销售，这款同样需要把手机插进眼镜的设备预计售价 99 美元。在无需插入手机的一体式眼镜市场，索尼刚刚宣布将于明年上半年推出他们的头戴 VR 眼镜 PlayStation VR，售价 399 美元，感觉上这款产品可能会更加侧重游戏体验。从产品上最被寄予厚望的是预计今年11月 面世的 HTC 与 PC 游戏巨头 Valve 合作的 VR 眼镜 Vive。这款配有手柄的 VR 眼镜被一些 IT 评论人称为目前市场上已知的最优秀的产品，售价应该会在 400 美元以上。最新加入战局的是佳能，他们在 9月 份宣布将于今年推出一款手持式 VR 眼镜。至于巨人中的巨人苹果，别以为他们会站在场边，他们已经于今年2月 取得了一项与 iPhone 手机相匹配的 VR 眼镜的专利，未来的 VR 世界里一定会有他们的惊鸿一瞥。</p>
<p>在 VR 拍摄设备方面，Gopro 今年晚些时候将投放一款叫 Odyssey 的专业 VR 摄像机，由 16 台 Gopro 相机组成一个 360 度拍摄转盘，价格将达到 15,000 美元。这和 Google 的开源 VR 平台 Jump 不谋而合。Jump 是一个完整的系统，除了摄影转盘之外还包括 VR 内容编辑器和一个由 YouTube 承载的 VR 内容频道。与谷歌的 Jump 类似的还有一家独立公司 Jaunt,后者的 VR 内容创生系统同样包括 VR 摄像机、内容编辑器和一个 VR 内容发行传输平台。另外一家在 Kickstarter 上完成了众筹的公司 Bublcam 的 VR 摄像机已经面试，这款定价 799 美元的设备拍出的 VR 内容可以通过谷歌 Cardboard、三星 GearVR 和 Oculus Rift 观看。诺基亚则在放弃手机战场后另辟蹊径，宣布将推出一款可以拍摄 VR 内容的 OZO 摄像机。手机巨头三星则期望下一代三星 Galaxy S7 手机的摄像头具有 VR 摄像的功能。最近还有一家初创公司宣布将于明年三月发售可以进行 VR 拍摄的 FlyBi 无人机，戴上配套的眼镜用户可以直接体验与无人机一起飞翔的感受。</p>
<p>视频公司也闻风而动。YouTube 早就设立了可以 360 度观看视频的 VR 频道。Netflix 和 Hulu 近日也都宣布将推出自己的 VR 应用。Netflix 会与 Oculus 和三星合作，为 Gear VR 设计一个可以虚拟观影的频道。Hulu 走得更远，不仅要为用户提供一个虚拟观影的体验（譬如，你可以坐在 Jerry Seinfeld 的沙发上看 Seinfeld），还计划直接投资参与一部 VR 短片的制作。</p>
<p>在 VR 内容方面更是百舸争流，令人目不暇接。</p>
<p>迪斯尼九月份刚刚宣布战略投资了 Jaunt，这几乎可以被认定是他们进入 VR 领域的重要宣言。华纳影业为电影 “Into the Storm”（《不惧风暴》）制作了可以在 VR 眼睛上观看的预告片。狮门影业也为其电影 “Insurgent – Shatter Reality”（《分歧者》）制作了一部四分钟的制作场景体验片。二十一世纪福克斯的 VR 部门福克斯创新实验室将 2014年 奥斯卡参选影片 “Wild”（《荒野》）的片段做成了 VR，还将为即将登上银幕的大片 “The Martian”（《火星救援》）制作一部独立的 VR 预告片。这家新闻集团旗下的电影公司还计划将自己片库里的上百部电影拿出来，放到 Oculus 的虚拟影院观影平台上（无法进入电影场景，但可以邀请远在万里之外的朋友在虚拟 IMAX 影厅一起观看）。三星最近聘请了 “The Walking Dead”《行尸走肉》的制作人 David Alpert 来制作一个 VR 系列剧。顶级好莱坞制作人 Mark Romanek、Robert Stromberg 以及《星际迷航 3》的导演 Justin Lin 也已经开始投入 VR 电影的制作。</p>
<p>与此同时，形形色色的 VR 电影节也开始粉墨登场。美国一家 VR 广告公司 Kaleidoscope 今年开始举办 “万花筒巡回 VR 电影节”，在 8月22日 到 10月14日 这段时间内将登陆纽约、旧金山、西雅图、洛杉矶、蒙特利尔、多伦多等十个城市。中国也有公司开始筹备举办类似的活动。</p>
<p>电影之外，VR 也开始握手电视。独立 VR 短片制作公司 Vrse.works 为全美老牌综艺节目 “Saturday Night Live”（《星期六直播秀》制作了了一期 40 周年VR 版特别节目。从电视节目制作公司 44 Blue 分拆出来的 Ovrture 即将开始制作两部 VR 真人秀，一部是关于监狱生活，一部关于夜间急诊–你可以零距离进入监狱重犯的生活，也可以看到车祸中遭受重创的人在你身边得到救治。今年七月被 HTC 战略投资了的 VR 社区和制作平台 WEVR 最近在 HTC 的 Vive 眼镜上发行了一部叫 “TheBlu: Encounter”（《蓝色邂逅》）的 VR 短片，观众置身于海底的鲸鱼群中，并且可以在一个 5 米乘 5 米的区域内自由游动（走动），领略海底的斑斓。</p>
<p>侧重于人文关怀的 VR 纪录片也开始批量出现。专注于 VR 新闻纪实的 RYOT 公司近期制作了多部 VR 纪录片，让观众身临其境地体验到叙利亚难民、尼泊尔灾民和墨西哥越境者的无望与艰难。Vrse.works 也与联合国合作推出了一部关于埃博拉的 VR 纪录片 “Waves of Grace”（《慈悲为怀》），由一位利比亚女性、埃博拉幸存者把观众带入到疫情中心区。一位看过这部影片的人评论道 “你会觉得埃博拉病毒就在你身边，那种震撼无与伦比。”“Perspective”（《视角》) 是一部 VR 系列剧，第一集讲述一个女大学生参加派对遭遇男生性侵，前半部分是站在感觉 “被邀请” 的男生视角，后半部分是站在感觉 “被侵犯” 的女生视角。VR 可以让观众换位思考，感同身受。</p>
<p>影视之外，游戏也是推动 VR 发展的重要引擎。全球第一个 VR 游戏体验馆 Zero Latency 今年8月15日 在澳大利亚墨尔本开门迎客。这个 400 平米的厂房式建筑里密布了 129 台摄像机。玩家四到六人一组，背着一个 2.5 公斤重的背包（里面包括电脑），戴着头盔眼镜，举着冲锋枪，置身于一个虚拟城市，穿大街走小巷，一会儿是仓库一会是坟场，随时有僵尸来袭，玩家必须相互配合第一时间把他们击毙。整个体验馆只有 100 米长，但一个小时玩下来，玩家平均至少会走动 1000 米。虽然今天还只是人类大战僵尸，但下一步很可能会是人人对战，甚至同队成员的角色会出现翻转，“很可能最好玩的部分就是最后十分钟把自己队伍中的敌人找出来并干掉”。</p>
<p>事实上，在 VR 世界里电影正和游戏合二为一。狮门影业基于自己的票房宠儿 “John Wick”（《疾速追杀》）正在与游戏发行商 Starbreeze 合作，双方将联手推出一款把玩家虚拟为电影主角的枪战游戏。WEVR 将为这款游戏打造一部量体裁衣的 VR 预告片，在 HTC Vive 眼镜上播放。</p>
<p>在 VR 领域，中国几乎与世界同步。</p>
<p>暴风科技之所以在 A 股市场成为 “妖股”，很大程度上是因为他们的 VR 概念。暴风旗下的暴风魔镜今年4月 拿到了华谊兄弟、天音通讯等机构 6000 万元的投资，新一轮融资正在进行中。今年第四季度，暴风魔镜将发布三代魔镜、VR 一体机、VR 摄像头等多款产品。小米、乐视等公司也在研发自己的 VR 产品。</p>
<p>新一代影视公司柠萌影业正在制作中国电视第一支 VR 预告片《择天记》。动画公司米粒影业就在不久前推出了旗下作品《三只小猪与神灯》的 VR 片段，这家公司表示将制作多部 VR 影片，还将推出以影片为主题的 VR 游戏，打造 VR 主题公园。有 “中国的 Pixar” 之称的追光动画除了明年1月1日 将推出首部好莱坞水准大电影《小门神》之外在不久的将来也会有一部 VR 短片问世。</p>
<p>来自中国的资本在全球 VR 市场同样不甘寂寞。黎瑞刚领导的华人文化产业基金（CMC）前不久就参与了由迪士尼领投的 Jaunt 公司 6600 万美元的融资。</p>
<p>VR 将给产业带来怎样的变革？</p>
<p>VR 眼镜将遍地开花，谁都可能进入这个领域。</p>
<p>毫无疑问，人们进入虚拟现实的 VR 世界，戴在头上的 VR 眼镜是一个超级入口。虽然未来或许隐形眼镜和芯片植入可以取代外挂式装备，但至少三五年内 VR 体验还离不开头戴式眼镜。</p>
<p>因此，VR 眼镜一定会成为千军万马的必争之地。已知的进入者包括国外的谷歌、微软、奥酷拉思（Oculus）、三星、索尼、HTC，以及中国的暴风影音、蚁视、天空（Laputa Hero）等。除此之外，苹果、小米、乐视等进入这个市场几乎是必然。</p>
<p>未来但凡与 VR 可能沾上两毛钱关系的商家都会四面八方涌向这里。从做手机和可穿戴设备的到做电视机的，从视频网站、在线售票平台到电影院线，从大型影视娱乐公司、体育公司到游戏公司，从搜索公司、电商平台到软件公司和芯片公司，都很可能会对 VR 眼镜市场有所图谋。当然，也会有形形色色的独立创业公司盯住这个市场，从这里起航。</p>
<p>最终的胜出者会有哪些没有人能预测，但它们必须具备两个基础条件：第一，强悍的技术和材料应用能力；第二，强大的内容制作和获取能力。</p>
<p>至少在初期，VR 眼镜商都会参与内容制作</p>
<p>和手机不同，没有了视频功能，手机还可以用来打电话发微信，而 VR 眼镜离开了 VR 内容就是一坨压在头上的塑料。</p>
<p>因此，VR 眼镜商同之前所有硬件商最不同的一点是–它从孕育的那一刻（注意，不是诞生的那一刻）起就必须开始考虑内容的事。</p>
<p>这也就注定了至少在 VR 眼镜的发展初期，大多数硬件商将会通过各种形式直接参与 VR 内容的制作，有些可能会设立自己的内容公司，从影视产业大量挖角；有些可能会战略投资或者收购现有的影视和游戏内容公司并给它们注入一些 VR 的基因，或者直接战略投资或者收购新兴的专注 VR 内容的公司；还有些可能会选择同现有的影视和游戏巨头设立合资公司，联合开发制作 VR 内容。</p>
<p>未来 VR 眼镜商销售眼镜大致会有两种模式。“1.0 模式” 是你花几百元到几千元不等买一个 VR 眼镜，这里面已经绑定了一个或几个 VR 内容发行平台，上面可能有几十部 VR 短片，将来还会有更多，多数内容免费将来也会有一些内容收费，你回家自己体验。“2.0 模式” 应该是一个巨大无比的电影 IP 你只能在某款 VR 眼镜上看，你可以选择花几千块买个 VR 眼镜免费看包括这部在内的 10-20 部 VR 电影，也可以选择花几千元购买一个 “电影票 + 衍生品 + 电影旅行项目 + 粉丝活动” 的套餐然后免费获得这款眼镜。“2.0” 肯定比 “1.0” 更有威力，未来 “1.0” 和 “2.0” 会长期共存，但 “2.0” 的比例会持续上升。</p>
<p>我相信，未来消费者因为内容买眼镜的情形要远多于因为眼镜而买内容的情形。也因此，在 VR 发展的初级阶段，各大 VR 眼镜商出于培育市场和行业竞争的考虑会直接参与 VR 内容的制作。但很快他们会发现，长期这样做既不现实也不经济，因此一定会出现一两个全行业的 VR 拍摄标准和几个高度整合的 VR 内容发行平台。各眼镜商对独家内容的掌控将更多体现在第一个 “VR 窗口期” 的独家权利和线上线下联动整合营销的各种可能性上，而不是对这个内容的永久垄断上。最终有一天，戴别人家眼镜的客户在别人的播放平台上也应该能看到自己的这部 “独家作品”，类似今天万达影院与万达参与投资拍摄的电影的关系。</p>
<p>VR 将导致内容产业重新洗牌</p>
<p>无论在好莱坞还是在中国，影视公司的市场格局已经基本尘埃落定，前五大公司占据 50%以上票房已是必然。</p>
<p>但 VR 又把人们拉回到同一起跑线–因为，全世界，到今天，还木有人，拍过 VR 大电影，并成功。在 VR 发展的初期，每个人都是斯皮尔伯格。</p>
<p>VR 电影是 360 度的电影，它的轴心是观众的眼睛，故事必须沿着每一个观众的视线推进。</p>
<p>这是多么大的挑战、机会与诱惑。</p>
<p>VR 给电影业带来了很多前所未有的新课题–</p>
<p>譬如，故事怎么讲，剧本怎么写？传统的 2D、3D 电影，无论结构如何跳跃，都是线性的，每个人看同一部电影在第 20 分 30 秒看到的都是同样的情节和场景。VR 电影完全打破了这种线性。观众自己决定他将跟着谁走进哪个房间，是先看墙后面还是先看树上面，在十字路口是向左转还是向右转。同样一部电影，一个人看完可能只需要 20 分钟，另一个人看完却可能用了一个小时。（譬如前面提到 Oculus 制作的《迷失》，观众看完所需的时间从 3 分半到 10 分钟不等。）这个时候故事怎么讲，剧本怎么写？一部电影里需不需要多个平行发生的故事？这些平行发生的故事如何交互连接？你如何引导观众看有故事的这个方向而不是没故事的那个方向，用声音、道具还是用光？我们到底要给观众多大的选择权，在选择与效率、自主与预设之间如何平衡？如果观众就是不听你的引导你要不要强行把他拉回来？能否让观众不仅在电影场景中选择自己去哪里看什么，还能在故事里扮演自己选择的角色，并据此推进他所看到的故事进程？最重要的，如何确保 VR 电影仍然能够讲出好的打动人心的故事而不会让技术喧宾夺主？所有这些今天都没有答案，需要大量的实验和试错。很多人可能不知道，从第一台电影摄像机诞生到第一部真正电影诞生中间隔了二十多年，我相信 VR 长电影的诞生应该不需要那么长的时间。</p>
<p>又譬如，场景切换和声音切换怎么处理？平时我们看电影的时候不会因为场景切换而感到不适，但如果你置身场景当中，场景切换的时候可能就会感到晕眩。你当然可以可以在切换场景之前把观众弹出场景，等到切换完成再重新带入，但这样进进出出会不会让整个体验显得支离破碎？或许，最适合拍 VR 电影的是那些场景有变化不单一但是线性自然、不需要反复切换的故事（举例：一个人在海上漂流、飞机失事一群人滞留孤岛、古堡里发生谋杀案、索马里街头巷战等），而不是像《盗梦空间》那种频繁切换把时空玩残的电影。在声音方面，如何确保声音跟着目光走，让电影的声效变得更加 “聪明”？譬如，你置身于电影中一个喧嚣的夜场，这个时候你看舞台，听到的就是舞台上的演唱；看周围的人，听到的就是他们的喧嚣；看卡座里的人，能听到他们扯着嗓子的对话；男主角出去接电话，你看他的背影，就能听到他在电话里磁性的声音。</p>
<p>再譬如，导演、摄像如何藏身？360 度场景如何剪辑？在传统的 2D 和 3D 电影中，这从来不是一个问题。一旦进入 VR 电影， 这个问题立即凸显。总不能让观众正沉浸在男神女神的激情缠绵或者杀手出现的深度恐怖中忽然一回头就看见导演摄像场工拿着对讲吆五喝六旁边还有一车盒饭。除此之外，剪辑也是一个难题–如何让导演在 2D 的监视器上剪辑出 360 度的场景？</p>
<p>还譬如，如何有分寸、有节制地进行感官刺激。你看传统电影的时候，情节再恐怖，你一看周围的观众或者窗外的车水马龙，立刻就可以得到舒缓。但在 VR 电影时代，你就在场景里，如果你眼前的衣橱里忽然倒下具尸体或者身边猛然蹿出只面目狰狞的怪兽，心脏不好的就未必是一句 “吓死宝宝了” 就可以轻易平复的了，弄不好会出人命。因此，如何在调动感官情愫和尊重生理极限之间保持平衡，将会是是电影人的新课题，在确立全球规范之前也一定会引起一波波的争议。</p>
<p>所有这些新课题都没有现成的答案，华谊光线博纳华策这样的影视巨头也没有可以依赖的现成资源。因此，VR 影视公司批量涌现几乎是必然的。它们中间大多数会失败，少数会被投资或整合，但也会有极少数借着这波 VR 大潮快速发展脱颖而出，成为新一代的影视游戏旗舰，整个行业就此洗牌。</p>
<p>VR 电影和 VR 游戏的界限会日渐模糊</p>
<p>由于观众已经置身于电影场景中，剩下的问题就是在多大程度上电影可以为他们留出与电影中的人物、场景和故事互动的空间。如果一个观众不仅可以身临其境，还可以随时和电影中的人物互动，那么这个电影与游戏其实已经开始接近；如果他还能影响电影里故事的走向和进程，那么它与游戏已经没有本质的区别。一个观众可以与之互动并且影响故事进程的电影本质上就是一个具有电影结构和戏剧性的游戏。未来在电影和游戏之外，很可能会诞生 “游戏电影”（也可以称之为 “浸入式电影”）和 “电影游戏”（也可以称之为 “叙事性游戏”），它们的区别仅仅在于观众对于故事进程的影响程度。一个优秀的游戏电影的导演必须深谙游戏的逻辑；反过来一个优秀的电影游戏的导演必须精通电影的语言。</p>
<p>是技术的进步为电影与游戏的混搭和融合提供了可能。随着形象、动作、表情捕捉技术的不断提升，电脑可以模拟出出演演员的大部分特征，从而减少他们在电影中的物理表演量。这也为观众与演员的互动提供了可能。事实上，一部 VR 电影可能由于平行故事的存在或者与观众互动的需要导致演员的表演总量看似多了很多，但他们真正需要物理表演的部分很可能不升反降。因此，未来导演会有更多的工作不是在现场，而是在机房。</p>
<p>VR 电影的游戏化也意味着未来的影视公司与游戏公司的界限会越来越模糊。VR 电影和 VR 游戏也会像《花千骨》一样天然融合，两边都可能成为对方的广告牌。所有 VR 电影公司里都会有游戏人才，所有游戏公司在推出大游戏 IP 的时候也会把 VR 电影短片作为营销标配。优秀的影视公司和游戏公司会有更多的理由走到一起尝试各种合作与嫁接，在相互学习、渗透、协同和联姻中共同成长。</p>
<p>VR 电影是衍生品销售的天堂</p>
<p>在 VR 电影中，你可以和里面的人物（当然也可以是卡通形象）生活在同一个世界里，他们就在你身边，几乎是触手可及。你可以和他们对视、对笑、游戏、调情，这自然为衍生品销售转动起一个超级强大的引擎。未来你甚至不用脱离场景，就可以在场景中直接下单，等你看完电影摘下眼镜，你购买的衍生品已经被送到你的手边。</p>
<p>这里所说的衍生品绝不仅限于玩具、T 恤、饮料这样的简单产品，它可以是一件极富设计感的大衣、一款来自米兰家具展的沙发、一个超级酷炫的数码产品（譬如下一代可以直接拍 VR 的手机），也可以是一辆梦幻跑车、一家 B 格闪耀的餐厅、甚至一个依山傍水的别墅样板房。这些原本植入在电影里只能当广告看的 “衍生品” 忽然间有了生命，栩栩如生地出现在你的面前，把展示变成了一场 360 度的亲密接触。</p>
<p>VR 时代电影院会遇到前所未有的挑战</p>
<p>如果 VR 电影的入口是头戴式眼镜，那么你是否还需要去电影院观看 VR 电影的确成了一个问题。</p>
<p>在 VR 电影时代，电影院将很难通过小修小补来满足市场的需求，对着大银幕排排坐的观影方式将失去意义，电影院的整体设计只能推倒重来。未来电影院的主流形态会是怎样还有待定义，或许它会是“常态影厅 + 社交观影包间 + 浸入式 VR 观影透明空间 + 衍生品体验馆” 的某种组合。这种侵入式观影空间可能是 2 米 x 2 米的 “小包”，也可能是 50 米 x 50 米的 “大场”，墙壁以全透明或半透明的玻璃为主。那时候你再来电影院，看到的将不是传统电影厅里一排一排头戴 VR 眼镜的观众，而是一个个透明房间里的人，戴着头盔，做出各种怪异的动作和表情。</p>
<p>我相信即便在 VR 电影时代，常态的电影厅还将继续有存在的价值，还会有传统 2D 电影继续上映；反倒是 3D 电影很可能是一个过渡性产品，很快将被 VR 取代。</p>
<p>有人认为 VR 时代的电影院会成为一个拥有非凡计算能力的机房。你可以戴着自己的眼镜过去，用电影院提供的电脑，体验各种 VR 电影的惊心动魄。我觉得这听上去有点像十年前的网吧，把科幻片生生演成了怀旧片。未来所有的计算能力一定都在天上，在云中。你去电影院只有三个可能的原因：a) 为了社交；b) 为了更好的 VR 体验；c) 这电影只有电影院里有。</p>
<p>对电影院来说，a) 是福音，b) 需要主动思考和探索，而 c) 是最大的不确定因素。这是因为–</p>
<p>视频网站最有机会成为 VR 内容的发行平台</p>
<p>短期内 VR 电影或许可以帮到电影院。电影院可以在上映某部大片的同时在电影院里辟出一个体验区，在这个体验区里观众可以戴上 VR 眼镜，置身大片的场景中，体验大片的一个片段。摘下眼镜转身就可以买到你刚刚在场景中看到的东西，然后你可以带着它走进旁边的 5号厅去欣赏完整的 2D 或者 3D 电影。</p>
<p>但这显然只是 VR 发展的初级阶段，不是它的本意。未来 VR 电影的主流一定是完整独立的 VR 电影，而不是 2D、3D 电影的预告片。</p>
<p>即便电影院面向 VR 电影时代进行了改造，完成了升级，一个绕不过去的问题是：对 VR 电影来说，未来的主发行渠道还必须像今天的 2D 和 3D 电影一样必须是电影院吗？如果电影院本身被边缘化了，传统的电影发行公司和院线公司还有存在的意义吗？</p>
<p>我们不妨设想一下，如果带宽和计算能力都不是问题（它们将来一定不是问题），一旦眼镜在观众手里，电影在硬件商和内容商手里，连接观众和内容还需要什么？</p>
<p>无非一个是支付，一个是播放平台（包括背后的带宽、计算能力和 CDN 网络等）。因此，今天领先的视频网站在 VR 内容（至少是影视内容，将来甚至也包括游戏内容）发行方面拥有天然的优势。如果它们再和在线票务平台结合起来，取代现有的电影发行公司和院线公司几乎是必然。那个时候让 VR 电影给线下院线留出一个窗口期就好比让大闸蟹给阳澄湖留出一个窗口期一样可笑。</p>
<p>因此，未来 VR 电影产业链条上真正不可或缺的只有硬件商 + 内容商 + 播放和支付平台，其它的都可有可无。而在这样一个产业链条里，那些拥有大量用户、投得起研发买得起 IP、左手有支付工具右手有视频平台、既有硬件经验又有内容资源、影视和游戏双剑合一的生态型玩家显然会占尽优势。除此之外，也会有一些专注 VR 内容发行和播放的平台破茧而出，试图以 VR 为突破口扩挑战视频和影视发行行业的既有格局。在这样一个时代如果手里没有 VR 硬件、VR 内容和 VR 发行平台这三张牌里的至少一张，将很难出现在影响娱乐业产业格局的公式里。</p>
<p>对传统电影院来说，要想在 VR 电影这波浪潮中不被边缘化，要么找到能让观众即便家里有眼镜也心甘情愿带着眼镜来影院观看的理由（譬如只有在电影院看才能体验到某种特殊效果或者才能场景中下单看完后立即拿到衍生品），要么通过整合做大然后进入 VR 电影的投资和制作确保至少有一部分 VR 电影只有电影院才能看到，否则集中放映和观看这件事会越来越没有市场。这点和体育比赛和演唱会不一样，因为那些都有 “现场” 的概念，你戴上头盔固然可以获得无限接近现场的感受，但你毕竟不在现场。但电影就不同了，电影院本来也不是电影的现场，电影的真正 “现场” 在 VR 电影的场景里。</p>
<p>VR 时代谁将成为赢家？</p>
<p>今天，虽然行业巨头和一些 VC、PE 已经开始在 VR 的方向上投石问路，但总体来说 VR 产业–无论是技术、产品还是内容、应用–都还处于 “Pre-元年” 的早期阶段。</p>
<p>随着 2016 “VR 元年” 的到来，VR 产业在 2016-18年 将进入 “快速播种” 的第一阶段。在此期间，大多数领先的硬件公司、视频网站和内容公司会通过新公司设立、分拆、合资、战投、并购等方式在 VR 领域开始布局，专注于 VR 眼镜、VR 相机、VR 内容制作和 VR 内容发行的创业企业会密集诞生，资本（尤其是早期资本）也会开始密切关注这个产业里的投资机会。一些财务投资人会与产业玩家联手，设立专门的 VR 产业基金，布局 VR 产业链。预计 2016年 全球完成的 VR 短片会达到数百部，2017-18年 随着头戴式眼镜的技术进步（特别是在重量和舒适感方面）或许会有第一部基于强 IP 的 VR 长电影诞生；2016-17年，大型 VR 游戏将陆续推出，并开始引领游戏产业的潮流；2017年 也将出现销售量突破百万量级的 VR 眼镜商。</p>
<p>2018-2020年，VR 硬件公司和内容公司完成初步的勾兑，形成硬软一体的几大 VR 生态阵营，专注 VR 内容跨阵营分发的发行平台会初露倪端。未来很可能不会有只做 VR 眼镜而不涉足 VR 内容的公司；专注 VR 内容的独立制作公司会有很多，但平台级的大内容公司同样会寻求对 VR 硬件的掌控。这是因为未来的市场和产业格局一定会要求大的玩家在硬件与内容之间有完美协同联动、根据需要自由安排收入模式分配商业利益的能力。这个阶段的核心商业模式就是两个，要么以内容拉动硬件销售，要么以硬件拉动内容销售。国外以 Oculus、苹果、三星为代表，国内以乐视、小米为代表的硬件公司很可能会成为娱乐内容产业升级的重要推手，每一部有影响力的 VR 电影的出品方中都会出现硬件商的名字。此外，随着 VR 内容的不断丰富，有规模的 VR 广告平台会开始出现。</p>
<p>2020年-2022年，VR 行业的标准基本确立，跨阵营的发行平台如日中天取代了今天的电影发行公司，VR 场景内营销和售卖将会逐渐形成规模，基于 VR 内容的新电商平台将会诞生。在这个阶段，VR 也将被更加广泛地应用到娱乐之外的其它领域。</p>
<p>尽管一切才刚刚开始，百舸争流的热闹场面已经在发生，但和所有其它产业一样，最终能够胜出的一定只是少数人。除了 Oculus 多少有点一骑绝尘的感觉之外，目前其他的玩家都大致还在同一个起跑线上。</p>
<p>对于谁有可能成为未来 VR 产业的赢家，我的总体感觉是：</p>
<p>所有需要插入手机、需要 PC 配合、需要手柄操作的 VR 眼镜都是过渡性产品，因为它们违反人性。未来的 VR 眼镜一定是一体式的，直接和云端的内容、应用和计算能力相连。清晰度、舒适度和内容兼容度都可能成为决定 VR 眼镜厂商命运的向度。虽然最终芯片技术的发展或许可以让我们不再需要头戴式设备，但直到那一天，我看不到头戴式眼镜取代手机的可能性。它可以和手机完美互动，但这种互动肯定不应以把手机放进自己躯体里的方式来进行。</p>
<p>硬件商与内容商将从不同的出发点出发，互相侵入对方的领地，最终会出现多家硬软联姻、甚至硬软一体的 “索尼哥伦比亚” 或者 “哥伦比亚索尼”。当然，任何创意产业都无法被垄断，因此 VR 内容领域虽然会有巨头，但也会有层出不穷的中头、小头和微头。相比之下，硬件商经过三到五年的合纵连横，最终会走向整合，这个版图上最终留下的玩家应该不会比今天的手机厂商更多。</p>
<p>随着 VR 电影和 VR 游戏的界限越来越模糊，未来电影和游戏的商业模式也将日益趋同。游戏里买装备、买道具、买体验的思路很可能会淘汰看电影买门票看贴片和植入广告的思路，真正有前途的是 “会员费 + 场景内购物 + 线下消费” 的强大组合。电影游戏化会比游戏电影化更容易走通。</p>
<p>在 VR 时代，超级 IP 同样重要，甚至更加重要。道理很简单：如果你是内容商，你已经承担了新技术新玩法新市场的风险，这时候应该尽量降低内容本身的风险。因此，手里有超级 IP 的内容公司以及与它们合作的硬件公司将比没有这些超级 IP 的玩家们更有机会品尝到 VR 的果实。</p>
<p>与 “VR 前” 时代相比，VR 时代是一个更加青睐生态型企业的时代。硬软一体、八面协同的生态型企业在 VR 时代的竞争优势将比以往更为明显。</p>
<p>虽然所有探索都值得鼓励，但万恶的资本和资本家们还是会更青睐那些创始人有正确的基因、技术或者模式具有颠覆性、潜在商业化路径清晰、最好还有一定规模的 VR 公司。这样的公司可以是独立的初创企业，也可以是大公司分拆出来的 VR 业务平台。后者甚至比前者更有机会快速发展。</p>
<p>一个被 VR 改变的世界会有多么精彩？</p>
<p>十五年前，当 AOL、China.com 如日中天的时候，没有人会想到十五年后的世界会是今天这个样子。同样，无论我们今天试图多么深入地研究 VR 产业，面对十年、十五年之后的世界我们一定也是井底观天。</p>
<p>与预测相比，我们有更多的畅想。与答案相比，我们有更多的问题。我愿意以下面这些问题做为本文的结尾。回答它们应该不需要十五年的时间。</p>
<p>三到五年后是否所有的相机和手机都可以拍摄 VR？</p>
<p>头戴式眼镜什么时候可以做到轻如蝉翼？未来观看 VR 内容是否一定需要头戴式眼镜？我们会不会带上一副隐形眼镜或者贴上一片芯片就可以彻底驱动我们的感官？</p>
<p>未来的人们是否会彻底生活在现实和虚拟两个世界里，拥有多个身份，并在它们之间来回游走切换？</p>
<p>在虚拟的世界里，是否大脑–而非身体–将支配一切？只要你愿意（当然也许你需要为此付出点费用），是否所有物理极限都可以突破，每个人都可以纵身一跃从地面跳到埃菲尔铁塔顶部或者不带氧气瓶在数百米深的海底自由徜徉？</p>
<p>未来当你和我看同一部 VR 电影的时候，我们看的是同一部电影吗？</p>
<p>未来看电影会更社交还是更孤独？VR 会把人类变得更宅吗？</p>
<p>未来除了娱乐，VR 在体育、医疗、养老、教育、建筑、军事等领域，还能诞生哪些炸裂脑洞的应用？</p>
<p>毫无疑问，VR 可以让人们感同身受。这会增加这个世界的理解和善意吗？</p>
<p>顺便说一句，全篇写的都是 VR，只有题目用了 “奥酷拉思”，没什么特别的原因，就是觉得 “奥酷拉思” 四个字特别酷。</p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>什么花样。</p>]]>
    
    </summary>
    
      <category term="商业评论" scheme="http://chocoluffy.com/tags/%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA/"/>
    
      <category term="虚拟现实" scheme="http://chocoluffy.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="转载" scheme="http://chocoluffy.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Twitter engine in React]]></title>
    <link href="http://chocoluffy.com/2016/01/06/Twitter-engine-in-React/"/>
    <id>http://chocoluffy.com/2016/01/06/Twitter-engine-in-React/</id>
    <published>2016-01-07T04:10:20.000Z</published>
    <updated>2016-01-07T04:24:33.000Z</updated>
    <content type="html"><![CDATA[<p>The hand-on project to get myself familiar with React.js, which pulls the latest post from Twitter by using a nodejs module in client-side javascript and allows users to form their own collections and share them via Codepen or other platforms. </p>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1ezqtafuny9j21kw0uhqhx.jpg" alt="screen capture"></p>
<p><strong>Some important details you want to learn on this project</strong></p>
<h2 id="Browserify">Browserify</h2><p>used for building all the dependency file together in such a way that we can use Node.js module to build up out client-side application. We install it in this way:<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install - - <span class="built_in">save</span>-<span class="built_in">dev</span> browserify</span><br></pre></td></tr></table></figure></p>
<p>Notice, here is a save-dev flag, which tells npm that it is a development dependency, it will write this dependency in package.json file. Writing a module name into package.json tells npm to install when executed command: <code>npm install</code>. Here is a distinction between running dependency and developing dependency. And since Browserify is used during build time, so it belongs to developing dependency. </p>
<h2 id="Writing_style">Writing style</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = require(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> Stream = require(<span class="string">'./Stream.react.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Collection = require(<span class="string">'./Collection.react.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Application = React.createClass(&#123;</span><br><span class="line">	getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			collectionTweets: &#123;&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	addTweetToCollection: <span class="function"><span class="keyword">function</span><span class="params">(tweet)</span></span>&#123;</span><br><span class="line">		<span class="keyword">var</span> collection = <span class="keyword">this</span>.state.collectionTweets;</span><br><span class="line">		collection[tweet.id] = tweet;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			collectionTweets: collection</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	removeTweetFromCollection: <span class="function"><span class="keyword">function</span><span class="params">(tweet)</span></span>&#123;</span><br><span class="line">		<span class="keyword">var</span> collection = <span class="keyword">this</span>.state.collectionTweets;</span><br><span class="line">		<span class="keyword">delete</span> collection[tweet.id];</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			collectionTweets: collection</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	removeAllTweetsFromCollection: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			collectionTweets: &#123;&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	render: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">				&lt;div className=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">					&lt;div className=<span class="string">"row"</span>&gt;</span><br><span class="line">						&lt;div className=<span class="string">"col-md-4 text-center"</span>&gt;</span><br><span class="line">							&lt;Stream onAddTweetToCollection=&#123;<span class="keyword">this</span>.addTweetToCollection&#125; /&gt;</span><br><span class="line">						&lt;/div&gt;</span><br><span class="line">						&lt;div className=<span class="string">"col-md-8"</span>&gt;</span><br><span class="line">							&lt;Collection tweets=&#123;<span class="keyword">this</span>.state.collectionTweets&#125; onRemoveTweetFromCollection=&#123;<span class="keyword">this</span>.removeTweetFromCollection&#125;</span><br><span class="line">							 onRemoveAllTweetsFromCollection=&#123;<span class="keyword">this</span>.removeAllTweetsFromCollection&#125; /&gt;</span><br><span class="line">						&lt;/div&gt;</span><br><span class="line">					&lt;/div&gt;</span><br><span class="line">				&lt;/div&gt;</span><br><span class="line">			)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = Application;</span><br></pre></td></tr></table></figure>
<p>It is in out Application.react.js. The reason we adopt a CommonJS writing style is that it will be convenient for other part of the file to require this react component we just build. So we use  such <code>module.exports = Application;</code> to allow other file when used to require this component. </p>
<h2 id="Children_elements_change_parent’s_elements">Children elements change parent’s elements</h2><p>Focus on this part:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">Stream </span>onAddTweetToCollection=&#123;this.<span class="keyword">addTweetToCollection&#125; </span>/&gt;</span><br></pre></td></tr></table></figure>
<p>the function defined in this react component is passed in, which indicates that this function will be called inside Stream component where since we know addTweetToCollection embodies a <code>setState</code> method, it illustrates how child element can update its parent component’s state.</p>
<p>Thus, in Stream component, we can access this method by using <code>this.props.onAddTweetToCollection</code>. <strong> Child component feed the arguments to parent’s state-changing function which will trigger <code>render()</code> function to re-render the whole children component again. </strong></p>
<h2 id="React_lifecycle_method_API_like_componentDidMount()">React lifecycle method API like componentDidMount()</h2><p>This function is part of react API, that will be called once after the initial rendering finished. At that time, we have a initialed DOM tree, and it will be a perfect time for using another js library! </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">componentDidMount</span>:<span class="value"> <span class="function">function</span>()&#123;</span><br><span class="line">	SnapkiteStreamClient.<span class="function">initializeStream</span>(this.handleNewTweet)</span></span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">compoentWillUnmount</span>:<span class="value"> <span class="function">function</span>()&#123;</span><br><span class="line">	SnapkiteStreamClient.<span class="function">destroyStream</span>()</span></span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>componentWillUnmount()</code> will be called when react unmount the components.</p>
<p>And in general, react lifecycle methods can be grouped into three phases.<br>mounting, updating and unmounting. </p>
<p>And in this coding example, we see <code>componentDidMount</code> and <code>componentWillUnmount</code>. Also, we have <code>componentWillMount</code> and other methods</p>
<blockquote>
<p>Note that <code>componentDidMount</code> will be the method when DOM is ready. Thus we usually will introduce other JS library at this method to do something on the DOM tree. For example, Jquery, setInterval, setTimeout and so on.</p>
</blockquote>
<p>say in this example, if we want to use setInterval method:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">componentDidMount</span>:<span class="value"> <span class="function">function</span>() &#123;</span><br><span class="line">  this.interval = <span class="function">setInterval</span>(this.handleTick, <span class="number">1000</span>)</span></span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="rule"><span class="attribute">componentWillUnmount</span>:<span class="value"> <span class="function">function</span>() &#123;</span><br><span class="line">  <span class="function">clearInterval</span>(this.interval)</span></span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>And we use react-don node.js module here. </p>
<p>Some of other lifecycle methods are: <code>shouldComponentUpdate</code>, this will determine whether or not to call the render function, and <code>forceUpdate</code> can skip this function checking. Note that it is a good way to enhance app’s speed when in hundreds of components app. <code>componentWillRecieveProps</code> will invoke wen receiving new props can use <code>setState</code> inside this method while the similar method <code>compontWillUpdate</code> cannot. <code>componentDidUpdate</code> will invoke after each update. </p>
<h2 id="getDefaultProps">getDefaultProps</h2><p>it will set the props if it receive no props from parent components</p>
<h2 id="Checking_for_props_exist?">Checking for props exist?</h2><p>the predicate statement at parent component may sometimes determine whether or not to render a children component. If not, then in later children component part, it should check whether it receives props from parent component. </p>
<h2 id="Validation_function_for_properties">Validation function for properties</h2><p><code>propTypes</code> is used for validating if a property is used and has value. If not, it will report an error to console.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">propTypes: &#123;</span><br><span class="line">	tweet: <span class="function"><span class="keyword">function</span>(<span class="params">properties, propertyName, componentName</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> tweet = properties[propertyName];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(!tweet)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Tweet must be set. '</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(!tweet.media)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Tweet must have an image'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	onImageClick: React.propTypes.func</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>So in <code>propTypes</code>, we are validating the existence of Tweet by obtaining the tweet property object from <code>properties[propertyName]</code>. And for validating the <code>onImageClick</code> part, we only need to ensure that it is a function. so we did:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onImageClick: React.propTypes.func</span><br><span class="line">```	</span><br><span class="line"></span><br><span class="line">Some similar validation functions provided <span class="keyword">by</span> React are: React.propTypes.<span class="built_in">number</span> <span class="operator">and</span> so <span class="command"><span class="keyword">on</span>.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## this.refs</span></span><br><span class="line"></span><br><span class="line">Keep <span class="operator">in</span> mind, however, that <span class="operator">the</span> JSX doesn<span class="string">'t return a component instance! It'</span>s just <span class="operator">a</span> ReactElement: <span class="operator">a</span> lightweight representation that tells React what <span class="operator">the</span> mounted component should look like. In other <span class="built_in">word</span>, we can insert `ref` property <span class="operator">in</span> `render()` , <span class="operator">the</span> component <span class="keyword">it</span> renders, so that we can access that component outside `render` <span class="function"><span class="keyword">function</span>.</span></span><br></pre></td></tr></table></figure>
<p>componentDidMount: function(){<br>    this.refs.collectionName.focus();<br>},</p>
<p>render: function(){<br>    return (<br>            <form classname="form-inline" onsubmit="{this.handleFormSubmit}"><br>                <header text="Collection Name: "></header></form></p>
<pre><code>        &lt;<span class="keyword">div</span> className=<span class="string">"form-group"</span> style={inputStyle} onChange={this.handleInputValueChange}
         value={this.state.inputValue} <span class="keyword">ref</span>=<span class="string">"collectionName"</span> /&gt;
         &lt;/<span class="keyword">div</span>&gt;

         &lt;<span class="type">Button</span> label=<span class="string">"Change"</span> handleClick={this.handleFormSubmit} /&gt;
         &lt;<span class="type">Button</span> label=<span class="string">"Cancel"</span> handleClick={this.handleFormCancel} /&gt;
    &lt;/form&gt;
)
</code></pre><p>}<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">we know <span class="keyword">that</span> `componentDidMount` will be called instantly <span class="keyword">after</span> DOM tree <span class="keyword">is</span> ready.  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Bootstrap usage in this project</span></span><br></pre></td></tr></table></figure></p>
<p><div classname="container-fluid"><br>                    <div classname="row"><br>                        <div classname="col-md-4 text-center"><br>                            <stream onaddtweettocollection="{this.addTweetToCollection}"><br>                        </stream></div><br>                        <div classname="col-md-8"><br>                            <collection tweets="{this.state.collectionTweets}" onremovetweetfromcollection="{this.removeTweetFromCollection}" onremovealltweetsfromcollection="{this.removeAllTweetsFromCollection}"><br>                        </collection></div><br>                    </div><br>                </div><br>```</p>
<p>It is where we use some Bootstrap property to quickly add style to the components. Note that we only add those style at the wrapper element for example we always wrap a <code>div</code> outside the target element. </p>
<p>references <a href="http://getbootstrap.com/css/" target="_blank" rel="external">this post</a> for more Bootstrap property.</p>
<ul>
<li><code>container-fluid</code> for a full width container, spanning the entire width of viewport.</li>
<li><code>text-center</code> to put the innerHTML text at the center of the element. </li>
<li><code>row</code> will create a horizontal groups of elements. </li>
<li><code>col-md-8</code> and <code>col-md-4</code> for sparing width horizontally.</li>
<li><code>form-group</code> for optimum spacing for labels and input controls.</li>
<li><code>form-control</code> for element inside the form wrapper, usually appear with the <code>form-group</code> class. </li>
</ul>
<h2 id="Try_to_add_color_palette_using_Mustache-js_and_ColorThief-js">Try to add color palette using Mustache.js and ColorThief.js</h2><blockquote>
<p>Due to my technical issue, I can only make it a local version. I will try me best to host it online.</p>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>The hand-on project to get myself familiar with React.js, which pulls the latest post from Twitter by using a nodejs module in client-side javascript and allows users to form their own collections and share them via Codepen or other platforms. </p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[D3js in 3D [Animation focus]]]></title>
    <link href="http://chocoluffy.com/2015/12/31/D3js-in-3D-Animation-focus/"/>
    <id>http://chocoluffy.com/2015/12/31/D3js-in-3D-Animation-focus/</id>
    <published>2015-12-31T17:14:50.000Z</published>
    <updated>2016-01-26T03:16:30.000Z</updated>
    <content type="html"><![CDATA[<p>Focus on how animations work in such 3D scene and how I achieve that. <a href="http://chocoluffy.com/d3js3D/">Live Demo</a> here! </p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/c5ee78b5gw1ezjckugw4nj21kw0ncn9h.jpg" alt="Animation"></p>
<h2 id="Animation">Animation</h2><p>One key thing for such 3D scene is animations and we need a lot of interaction to finish that cooperation. Thus, in usual, we need to add multiple event listener to many sibling elements and the way we did that is by creating a parent element and by utilizing the event propagation to achieve the goal.</p>
<p>Say, we have a lot of <code>&lt;a-cube&gt;</code> now, and we want to add the click event listener to the <code>&lt;a-cube&gt;</code> below to trigger the animations of the <code>&lt;a-cube&gt;</code> above the scene. [The way we add animations is to append tag <code>&lt;a-animation&gt;</code>  as the childNode of the <code>&lt;a-cube&gt;</code>]. Now, in order to do that attachment in one time, we need to group all the <code>&lt;a-cube&gt;</code> into a container, we can just use a <code>&lt;a-entity id=“meteor”&gt;&lt;/a-entity&gt;</code> to do that thing. So we can add the click event listener at the parent node, and when the childNode get clicked, the event will propagated to the parent level by level, and back then when it achieve the targeted parent. we can trigger the function and do all the <code>append</code> or other actions on <code>e.target</code>. [here <code>e.target</code> refers to the one get clicked]. </p>
<p>In the later interaction. we want the action of one object may trigger another object’s actions. Then, we need to leave such mark to indicate which object may be related to! For example, in my code, I use  a data-attribute called “flag” as a id to indicate which object to bind. So later in the eventListener, we can use <code>e.target.getAttribute(“flag”)</code> to obtain that value for further use like <code>meteorParentNode.childNodes[e.target.getAttribute(“flag”)].append()</code> some animation nodes to the “meteor”!!</p>
<h2 id="Image_on_meteor">Image on meteor</h2><p>In order to make it a fun, I decided to use image as the surface of the meteors ,  and the way to achieve that is to wrap a tag <code>&lt;a-root&gt;</code> and a tag <code>&lt;a-entity&gt;</code> further inside. So now the structure will be like:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;a-entity some-attributes-here&gt;</span></span><br><span class="line">	<span class="tag">&lt;a-root&gt;</span></span><br><span class="line">		<span class="tag">&lt;a-entity some-attribute-here&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>And set the src to be some texture image or even in this project some funny images as the surface of the meteors. And that’s it! </p>
<h2 id="Further_Reading">Further Reading</h2><ul>
<li><a href="http://aframevr.tumblr.com/" target="_blank" rel="external">Aframe in tumblr</a></li>
<li><a href="https://aframe.io/docs/core/animation.html" target="_blank" rel="external">Official Aframe animations guide</a></li>
<li><a href="http://projects.bmannconsulting.com/aframe-boilerplate/" target="_blank" rel="external">How to add texture for Aframe objects</a></li>
<li><a href="http://www.kirupa.com/html5/handling_events_for_many_elements.htm" target="_blank" rel="external">How to add event listener to multiple sibling elements</a></li>
</ul>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Focus on how animations work in such 3D scene and how I achieve that. <a href="http://chocoluffy.com/d3js3D/">Live Demo</a> here! </p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[D3js in 3D]]></title>
    <link href="http://chocoluffy.com/2015/12/30/D3js-in-3D/"/>
    <id>http://chocoluffy.com/2015/12/30/D3js-in-3D/</id>
    <published>2015-12-30T17:30:59.000Z</published>
    <updated>2016-01-26T03:16:38.000Z</updated>
    <content type="html"><![CDATA[<p>Create a virtual-reality-like scene in mobile and desktop. Using D3js to do the math! Check out <a href="http://chocoluffy.com/d3js3D/">Live Demo</a> now!</p>
<a id="more"></a>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezi7ksw2zyj21kw0sa17h.jpg" alt="virtual scene"></p>
<p>Inspired by <a href="https://www.youtube.com/watch?v=Tb2b5nFmmsM" target="_blank" rel="external">d33d</a>, 💣<strong> <a href="http://chocoluffy.com/d3js-Aframe/">Live Demo</a> </strong></p>
<h2 id="Build_up_a_local_server_to_avoid_cross-origin_error">Build up a local server to avoid cross-origin error</h2><p>we know that using <a-image> can do insert the image. Due to the cross-origin problem, in local testing, we need to use a local server to host the static file and its assets, such as images so that when used in html file, it will not cause a cross-origin error. The way we build up a temporary server is to use python. First cd to the corresponding directory, then do:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8000</span></span><br></pre></td></tr></table></figure></a-image></p>
<p>Then go to the localhost:8000 can see the files. For more detailed info, check <a href="http://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin" target="_blank" rel="external">this post</a> in stack overflow.</p>
<h2 id="How_to_append_tag_in_multiple_nodes">How to append tag in multiple nodes</h2><p>references <a href="http://stackoverflow.com/questions/24318154/d3-js-append-on-existing-div-and-hierarchy" target="_blank" rel="external">this post</a> from stack overflow</p>
<h2 id="Color_palette">Color palette</h2><p>references <a href="http://paletton.com/#uid=10M0u0kiRKW0VGw8oOOrBQoTc+M" target="_blank" rel="external">this website</a></p>
<h2 id="How_to_host_your_static_page_in_github">How to host your static page in github</h2><p>references <a href="https://help.github.com/articles/creating-project-pages-manually/" target="_blank" rel="external">this post</a></p>
<p>The final result will be, you can access the project site from your github.io website with a branch. The procedure goes well, but it seems that gh-pages cannot host a d3 or aframe pages? Answer: YES, SURE WE CAN!!! for more info, you can just visit <a href="https://chocoluffy.github.io/d3js-Aframe/" target="_blank" rel="external">my website</a>, github can host static website for free, so what kind of websites can be called as static? we called those sites as “static” as it only involves client-side scripting if it contains js file. Those who need server-side scripting are called dynamic websites.</p>
<blockquote>
<p>note that in order to use gh-pages to host my project website, you need to name the html file to be <code>index.html</code>. Other file name will not be recognized!!</p>
</blockquote>
<p>To summarize, the basic procedure is:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone … <span class="comment">// from github, copy the repo’s https</span></span><br><span class="line"><span class="keyword">cd</span> …</span><br><span class="line">git checkout - -orphan gh-pages</span><br><span class="line">git <span class="keyword">rm</span> -rf .</span><br></pre></td></tr></table></figure>
<p>Then now, the gh-pages should be empty. Move the prepared <code>index.html</code> to here then<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> “<span class="keyword">First</span> <span class="keyword">commit</span>”</span><br><span class="line">git push origin gh-pages</span></span><br></pre></td></tr></table></figure></p>
<p>Then, go to www.chocoluffy.com/<your-project-name>, you can see the project site!!</your-project-name></p>
<h2 id="How_A-frame_works">How A-frame works</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a-assets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a-mixin</span> <span class="attribute">id</span>=<span class="value">"red"</span> <span class="attribute">material</span>=<span class="value">"color: red"</span>&gt;</span><span class="tag">&lt;/<span class="title">a-mixin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a-assets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a-scene</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a-entity</span> <span class="attribute">camera</span> <span class="attribute">look-controls</span> <span class="attribute">wasd-controls</span>&gt;</span><span class="tag">&lt;/<span class="title">a-entity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a-entity</span> <span class="attribute">light</span>=<span class="value">"type: point; color: #EEE; intensity: 0.5"</span> <span class="attribute">position</span>=<span class="value">"0 3 0"</span>&gt;</span><span class="tag">&lt;/<span class="title">a-entity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a-light</span> <span class="attribute">color</span>=<span class="value">"#da47da"</span> <span class="attribute">position</span>=<span class="value">"0 0 0"</span> <span class="attribute">type</span>=<span class="value">"ambient"</span>&gt;</span><span class="tag">&lt;/<span class="title">a-light</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;a-sky color="#c8f8e0"&gt;&lt;/a-sky&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a-sky</span> <span class="attribute">src</span>=<span class="value">"road.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="title">a-sky</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a-scene</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>References <a href="https://aframe.io/docs/primitives/a-sky.html" target="_blank" rel="external">this website</a> for more A-frame primitives.</p>
<p>Then by using d3js, we can add corresponding number of <a-entity> to the scene from data array.</a-entity></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">      <span class="keyword">var</span> data=[<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line">      <span class="keyword">var</span> tip = -<span class="number">0.5</span>;</span><br><span class="line">      <span class="keyword">var</span> radius = <span class="number">6</span>;</span><br><span class="line">      <span class="keyword">var</span> scene = d3.select(<span class="string">"a-scene"</span>)</span><br><span class="line">      scene.append(<span class="string">"a-camera"</span>)</span><br><span class="line">           .attr(&#123;</span><br><span class="line">            position: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">var</span> y = tip;</span><br><span class="line">              <span class="keyword">var</span> z = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">return</span> x + <span class="string">" "</span> + y + <span class="string">" "</span> + z</span><br><span class="line">            &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">      <span class="keyword">var</span> cubes = scene.selectAll(<span class="string">"a-entity.bar"</span>).data(data)</span><br><span class="line">                  .enter()</span><br><span class="line">                  .append(<span class="string">"a-entity"</span>)</span><br><span class="line">                  .classed(<span class="string">"bar"</span>, <span class="literal">true</span>)</span><br><span class="line">                  .attr(&#123;</span><br><span class="line">                    <span class="comment">// mixin: "link",</span></span><br><span class="line">                    material: <span class="string">"color: #7BC8A4"</span>,</span><br><span class="line">                    geometry: <span class="string">"primitive: box; width: 2; height: 2; depth: 2"</span>,</span><br><span class="line">                    position: <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123;</span><br><span class="line">                      <span class="keyword">var</span> theta = (i / data.length) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">                      <span class="keyword">var</span> x = radius * <span class="built_in">Math</span>.cos(theta); </span><br><span class="line">                      <span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">                      <span class="keyword">var</span> z = radius * <span class="built_in">Math</span>.sin(theta);</span><br><span class="line">                      <span class="keyword">return</span> x + <span class="string">" "</span> + y + <span class="string">" "</span> + z</span><br><span class="line">                    &#125;,</span><br><span class="line">                    rotation: <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123;</span><br><span class="line">                      <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">                      <span class="keyword">var</span> y = -<span class="number">360</span> * i/data.length;</span><br><span class="line">                      <span class="keyword">var</span> z = -<span class="number">80</span>*<span class="built_in">Math</span>.atan(tip/radius);</span><br><span class="line">                      <span class="keyword">return</span> x + <span class="string">" "</span> + y + <span class="string">" "</span> + z</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">    cubes.append(<span class="string">"a-mouseenter"</span>)</span><br><span class="line">         .attr(&#123;</span><br><span class="line">            <span class="comment">// scale: "1 2 1",</span></span><br><span class="line">            position: <span class="string">"0 2 0"</span>,</span><br><span class="line">            visible: <span class="literal">false</span></span><br><span class="line">         &#125;)</span><br><span class="line">    cubes.append(<span class="string">"a-mouseleave"</span>)</span><br><span class="line">         .attr(&#123;</span><br><span class="line">            scale: <span class="string">"1 1 1"</span></span><br><span class="line">            <span class="comment">// position: "0 2 0"</span></span><br><span class="line">            <span class="comment">// visible: true</span></span><br><span class="line">         &#125;)</span></span><br></pre></td></tr></table></figure>
<p>Find the structure of this scene, it will like having several <code>&lt;a-entity&gt;</code> inside <code>&lt;a-scene&gt;</code>, and each of <code>&lt;a-entity&gt;</code> has multiple attributes that defines its position, rotation, material and geometry. And inside the <code>&lt;a-entity&gt;</code>, also has  <code>&lt;a-mouseenter&gt;</code> and <code>&lt;a-mouseleave&gt;</code> tags which helps define the actions when hovered. </p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Create a virtual-reality-like scene in mobile and desktop. Using D3js to do the math! Check out <a href="http://chocoluffy.com/d3js3D/">Live Demo</a> now!</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为什么大公司不会偷取你的想法]]></title>
    <link href="http://chocoluffy.com/2015/12/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E5%85%AC%E5%8F%B8%E4%B8%8D%E4%BC%9A%E5%81%B7%E5%8F%96%E4%BD%A0%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>http://chocoluffy.com/2015/12/28/为什么大公司不会偷取你的想法/</id>
    <published>2015-12-29T03:53:07.000Z</published>
    <updated>2016-01-28T17:35:57.000Z</updated>
    <content type="html"><![CDATA[<p>那些难以复制的。</p>
<a id="more"></a>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezge2ma3zoj21kw0zkth0.jpg" alt="君临"></p>
<blockquote>
<p>前言： 好久没有更新公众号了， 之前因为一个机器学习的比赛和期末考， 21号结束期末考之后又接了一项数据可视化的比赛， 同时手上还有一些rails app项目想好好干一番， 所以平时只能断断续续地写一些思考。 也托大家的福， 最后那门人脸表情识别的比赛在所有本科生和研究生里面排第6，准确率达到82%， 冠军是84%。 最近也会把这个比赛的一些技巧心得写到博客里，对机器学习感兴趣的同学可以直接发消息到后台和我交流。我的博客收集了平时项目中遇到的technical技巧和思考还有一些不错的公众号的文章， 欢迎参观：<br>www.chocoluffy.com<br>有一些关于社会人文的文字之后会陆陆续续和大家见面， 最近一段时间先更新一些关于商业圈的想法和读书笔记， 比如这一篇。</p>
</blockquote>
<p>在面对投资人的时候， 很多VC都会问你这样的一个问题：如果大公司偷了你的想法的话， 你怎么办? </p>
<p>我想， 先不要把自己代入后果， 在各种利弊分析中致自己于死地， 而是尝试从根本去想， 为什么大公司想偷(采用)我们小startup的想法， 从这个角度做到自圆其说， 对投资人而言也是一剂强心针。 不过说服归说服的技巧， 下文所列为你可以尝试切入的分析原因， 希望你可以在自己的产品上真正做到不可复制。</p>
<p>[1] 大公司不会像VC那样的portfolio investing， 好比如说作为一个VC， 你可以在一个项目投入几十万， 在另一个项目投入几十万， 你有一个不把鸡蛋放在同一个篮子的原则， 但是大公司做不到， 大公司在每进入一个新市场， 承担的是所有stock holder的期望， 他们的试错成本太高， 往往会是在经过了深思熟虑之后的大举侵入。 你说不是谷歌和facebook不是投入了很多资金在许多不同的研究上吗， 但是如果仔细想想， 投资或者收购， 以及其他的很多战略都可以从其意图中推敲出来， 有些投资和入股是防御性质的， 是希望创造一个暂时垄断市场的， 比如中国你最近听到的大部分合并。 而谷歌\facebook的那一种投资是用于开拓市场的， 是希望在未来当舆论熟悉了新的科技场景的时候， 他们能够在研发上占得先机。 所以当你一个做O2O食品分发的， 送外卖的， 被问到， 如果你的想法被大公司知道了话， 你怎么办的话， 你完全不用傻傻地觉得你会被有钱的大公司直接干掉， 大公司， 基于他的身份和社会预期， 大部分时候只会选择成熟的市场和场景。 对国内的市场尤其是如此， 就好比， 当国内的大公司发掘到这是一个有利可图的战略市场的市场的时候， 他们的第一选择绝对不是自己do from scratch， 他们要么会选择收购， 要么就是战略入股。 而那时候， 如果你真的够格的话， 也会走到市场的前几名了。<br>[2] 普通大公司的固有惰性， 其实这一点和上一点有重叠。下面参考文章中所述简洁明了， 不再赘述。<br>[3] 与其花时间想象一堆可能不存在的假想敌， 还不如想想更致命的问题， 比如， 到底这个你准备进入的市场需要你提供的服务嘛？ 你能提供的是一个容易被模仿的feature， 还是一个难以复制的product? 想起在08-11年硅谷超级火的独角兽之一dropbox， 当时其实在乔布斯还在的时候， 曾在得知dropbox的产品后马上透露收购的意愿， 当时他的解释是“it’s more like a feature than a product”。最终dropbox拒绝了来自apple的收购， 现在面对来自google drive，icloud， 各种云服务， 国内的比如七牛等等的威胁， dropbox的魅力已早不复之前。</p>
<p>参考的原文阅读如下， 和大家分享。</p>
<p>余舜哲</p>
<p>2015.12.28</p>
<h2 id="Startups:_Why_Google/_Facebook/_Apple/_SalesForce_(probably)_won’t_steal_your_lunch_money">Startups: Why Google/ Facebook/ Apple/ SalesForce (probably) won’t steal your lunch money</h2><p>It’s the one question which always gets asked of a startup - why won’t (insert market leader here) simply implement your great idea themselves, wiping you out in the process?</p>
<p>A reasonable enough question given the billions of dollars and thousands of engineers available to them, as compared to the typical startup’s resources. </p>
<p>It’s worth outlining the reasons why in fact Goliath has fewer advantages than you might think as compared to David.</p>
<p>[1] Innovation is a Crap Shoot </p>
<p>No one really knows that your great idea is great. That’s only found out when the revenue comes in, and by that stage, you’re well on the way to becoming the next generation incumbent. VC’s don’t invest in companies. VC’s invest in markets, and people (specifically CEO’s). They understand that in a hot market, they have a shot at the unicorn which will become the market leader, and a very good chance of a 2nd to 5th place player that will deliver the returns needed to keep the limited partners in order. If the market is hot enough, you won’t loose your shirt even on the also-rans. Failures are buried, and history rewritten to emphasize the foresight of picking the 1-2 mega hits which pay the returns and the 20-30 “failures” (and remember some may still be pretty successful by most people’s reckoning) simply forgotten. </p>
<p>It’s a portfolio business (the technical term for “crap shoot”), and one which most VC’s only play with a fund size of $100-$500M. You can’t “just” invest $10M in Facebook circa 2004 and be done - it’s not that easy - you need to invest in a wide portfolio, and that takes serious amounts of money that even market leaders baulk at when trying to run their own innovation program.</p>
<p>This model also requires darwinian culling - something VC’s can do easily since all they have to do is simply stop returning calls when the cash runs out. It’s much harder for a large company psychologically or practically to fire an under-performing R&amp;D team. Google is often quoted as a counter example, and certainly they end-of-life projects with impressive regularity, but even Google have shown far more patience with Google+ than any VC would. Large companies are like mammals with their young. VC’s parent like fish, and whilst it’s cold-blooded (no pun intended), it’s more effective. </p>
<p>Large companies are not competing with one 5 million startup, they are competing against a $B ecosystem, which is why so often it’s the startup that comes out on top. Large companies cannot run projects as portfolios like VC’s can.</p>
<p>[2] Everbody is Loss-averse</p>
<p>Nobody wants to cannibalize revenue. Start-ups don’t have any revenue, ergo, they don’t worry about cannibalization. It’s not easy to walk away from stable, predictable (even if declining) revenues. By comparison, this latest new fangled widget may or may not deliver in the market. Better to invest in an upgraded line of mainframes…</p>
<p>[3] Large Companies are Process-bound</p>
<p>Everyone can say no, and no one can say yes. Or more charitably, there is a need to get “buy-in” across the corporation, where “across” can be departments scattered over the globe. There is an inherent inertia, built around middle management more focused on managing their own pension trajectory. Upper management is often too distant from the market realities to identify up-and-comers. And people at the bottom just do as they are told. Or go and form their own startup…</p>
<p>[4] Large Companies need Large Projects</p>
<p>All large companies fundamentally become conglomerates. When you are the market leader, the only place to grow is another market. If you are delivering several billion per quarter, then only large projects can move the needle. Sure, a startup growing at 100% pa looks impressive, but the additional $1M revenue would be just a rounding error. </p>
<p>Where large companies do focus in innovating is in the area of large capital intensive bets - think Google StreetView, something which would be hard for a startup to compete with.</p>
<p>This also impacts growth strategy. From the early 90’s Oracle stopped being a database company, transitioning to a full-suite enterprise IT provider today - hardware, software, and services. People often confuse the fact that SalesForce is the incumbent market leader in CRM with the belief that SalesForce is still a CRM company. Salesforce today is a Platform-as- a-Service company looking to expand out their footprint with big data and everything else. They want to be Oracle for Cloud. With 85% of IT spending coming from enterprise customers, Marc Benioff could not care less about smaller customers nor the CRM startups earning their stripes with them, any more than Oracle gives a monkey about MongoDB.</p>
<p>[5] Not Invented Here</p>
<p>Google offered themselves to Excite in 1999 for the princely sum of $1M - but Excite pooh-poohed the idea, since it was so simple to implement themselves. The funny thing is, they were right, but they just never got around to doing it. The rest, as they say, is history. Excite Turns Down Google Acquisition - In Photos: 6 Business Deal Disasters</p>
<p>It’s hard as a big company product manager with access to hundreds of developers to accept they could have missed something a couple a geeks with barely a pot noodle between them have managed. So usually they don’t.</p>
<p>[6] Large Companies aren’t Large</p>
<p>Large companies have lots of departments. Each of which may or may not be that big. “But they still have lots of resources”. Yes, but there are all doing things, and in terms of the actual skill sets needed, no, they don’t. </p>
<p>I joined Sybase (1500 employees at the time) from IBM (300,000 employees) in the 90’s and was surprised that up-and-coming Sybase (which only did databases) had twice the number of database focused staff than IBM (which did everything including project manage the delivery of military helicopters). I wasn’t surprised then when joining the startup Illustra (&lt; 80 staff) that we still had more web database expertise than Informix, Oracle and Sybase put together. Informix eventually coughed up $400M for Illustra.</p>
<p>[7] Time is Money</p>
<p>Why, on earth, did Facebook not simply reproduce the 24 man-month effort that Instagram represented, rather than pay an eye-popping $1B???</p>
<p>It wasn’t an acqui-hire for 13 staff. Nor was it really about market share, since almost every one of Instagram’s 30M customers would already be using Facebook (845M at that time). And it certainly wasn’t about acquiring revenue - Instagram had none, nada, zero, zilch, $0.00.</p>
<p>The reason was that Facebook was convinced that this was the future of photo-sharing and would put their own business at risk (since Facebook, reduced, is really about photos). For all the reasons outlined above, they knew that it would take at least 12 months to replicate that, and in that time there could have been a significant reversal of fortunes between the incumbent and the startup. Buying rather than building means additional revenue, but at levels commensurate with the acquiring company’s existing sales and marketing channels - not the startup’s. This can easily justify apparently silly revenue multiples, since the comparison point is not what Instagram is currently doing, but rather what Facebook would be missing out on, were it not. With Facebook doing almost $3B in 3Q14, then paying just one month’s revenue for Instagram now looks like a bargain given its importance to the Facebook value proposition.</p>
<p>Focus on the Customers, not the Competition</p>
<p>You can’t reliably grow an oak tree by relying on just one acorn. You need a full tray of seedlings, thinning some out and nurturing the rest, and hopefully at least one will turn out well. It’s actually the entire premise of the VC model, and it’s also the reason big companies don’t typically stamp on startups, since they don’t know which seedling will be the one to finally overtake them, and there are too many to snuff them all out. </p>
<p>Like all generalizations in business there are exceptions. Developing a feature for a market leader typically does not end well, but these should be clear to identify. The general rule though, is clear. Few startups are actually at risk from the incumbents they seek to displace. The greater risk is does any part of the market actually want what you offer?</p>
<blockquote>
<p>后记： 欢迎加入我的私人公众号， 和你分享我思考的观点和文章：<br><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1ezbljkk2apj20by0byq3q.jpg" alt="公众号二维码"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>那些难以复制的。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="商业评论" scheme="http://chocoluffy.com/tags/%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
