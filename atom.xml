<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[余舜哲的 One Piece]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://chocoluffy.com/"/>
  <updated>2016-12-08T01:51:30.000Z</updated>
  <id>http://chocoluffy.com/</id>
  
  <author>
    <name><![CDATA[Shunzhe Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[浅析经典面试算法题-two pointer的运用]]></title>
    <link href="http://chocoluffy.com/2016/12/04/%E6%B5%85%E6%9E%90%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98-two-pointer%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://chocoluffy.com/2016/12/04/浅析经典面试算法题-two-pointer的运用/</id>
    <published>2016-12-04T04:59:47.000Z</published>
    <updated>2016-12-08T01:51:30.000Z</updated>
    <content type="html"><![CDATA[<p>前几天和朋友讨论 Google 电面的一道题， 由此启发， 总结了下 two pointer 的使用场景， 在大部分情况下， 恰当地使用 two pointer 可以使时间复杂度保持在 O(n)， 像 online judge 里部分 medium 题经常提及的子数列类型问题， two pointer 也可以提供不错的切入角度。</p>
<a id="more"></a>
<h2 id="前记">前记</h2><p>前几天和朋友讨论 Google 电面的一道题， 由此启发， 总结了下 two pointer 的使用场景， 在大部分情况下， 恰当地使用 two pointer 可以使时间复杂度保持在 O(n)， 像 online judge 里部分 medium 题经常提及的子数列类型问题， two pointer 也可以提供不错的切入角度。</p>
<h2 id="Two_Sum">Two Sum</h2><h3 id="Original">Original</h3><p><strong>Question</strong> [EASY] 找到两个数， 其和为指定数量。 Given an array of integers, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>很典型的two sum问题。除去brute force的n方时间复杂度的算法，还有n的方法。简单来说， 用hashmap找另一个值是否存在， 典型的用空间换时间， 这里空间复杂度也是n。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Hashmap implementation. O(n) runtime, O(n) space.</span><br><span class="line">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i + <span class="number">1</span>, map.get(target - numbers[i]) + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!map.containsKey(numbers[i]))&#123; <span class="comment">// edge case: duplicate items.</span></span><br><span class="line">        map.put(numbers[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hashmap特别要注意的地方就是对于duplicates的考虑， 题目究竟是返回true or false就可以了， 还是需要返回所有符合的index， 还是只是最小（或最大）的index， 都会有不同的实现方案。</p>
<h3 id="Sorted">Sorted</h3><p>如果integer array已经排序过了的话，可以用两个pointer来实现n时间1空间复杂度的方案； 不难理解， 两个pointer从两头往中间移动， 其sum只有三种可能， 和比要求的target小， 那么起始点的pointer右移， 和比要求大， 末尾pointer左移， 直到得到和或者return没有结果为止。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Two pointer implementation. Given that array is sorted. O(n) runtime, O(1) space.</span><br><span class="line">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> p2 = size - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (p1 &lt; p2)&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers[p1] + numbers[p2] &lt; target) &#123;</span><br><span class="line">      p1 += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (numbers[p1] + numbers[p2] &gt; target) &#123;</span><br><span class="line">      p2 -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;p1, p2&#125;;    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>留意一下two pointer适合哪些情景? 基础的变式是通过两个移动不同步长的pointer来完成一些事情， 也在暗指， 本身iterate through的这个array必须存在一些特性使得pointer可以有不同的移动。</p>
<h3 id="Tricks">Tricks</h3><p>借此稍微总结一下， 运用到two pointer的场景和技巧。</p>
<p><strong>Question</strong> [EASY]合并两个sorted array变成一个sorted array。 Given two sorted arrays A and B, each having length N and M respectively. Form a new sorted merged array having values of both the arrays in sorted format.</p>
<p>利用设置在两个sorted array开头的指针， 来达到m+n时间复杂度的效果。 比较简单。</p>
<p><strong>Question</strong> [EASY]一次循环找到链表的中间元素。How to find middle element of linked list in one pass?</p>
<p><strong>Question</strong> [EASY]判断一个链表是否存在环。 How to find if linked list has a loop ?</p>
<p><strong>Question</strong> [EASY]找到链表中倒数第三个元素。How to find 3rd element from end in a linked list in one pass?</p>
<p>以上都是关于单向链类似的问题， 利用two pointer都可以得到快速的解答。</p>
<h3 id="Example1_-_continuous_maximum_subarray">Example1 - continuous maximum subarray</h3><p><strong>Question</strong> [MEDIUM]找到不大于M的连续最大和子数列。 Given an array having N positive integers, find the contiguous subarray having sum as great as possible,, but not greater than M. </p>
<p>其实第二题还涉及到了另一个技巧， 就是在对于部分求和问题里， 使用cumulative sum array是一个可能的切入口。 在将原数列生成对应的cumulative sum array之后， 这个题目也就相应转换为找到两个index， 使得对于这个递增的和数列， 满足：<code>cum[endIndex] - cum[startIndex-1] &lt;= M and cum[endIndex+1] - cum[startIndex-1] &gt; M</code>的条件， 而<code>endIndex</code>和<code>startIndex</code>在原数列里对应的子数列， 就是满足要求的最大和子数列。</p>
<p>转换了题意之后， 对于这个递增数列， 可以接着用two pointer的思想来处理， 设置start和end两个pointer从头开始， 右移end指针只到不能满足需求为止，然后右移start指针来减少sum使得end指针可以继续右移。 记录下每次start指针右移是的sum， 最大的那个sum所对应的指针位置， 对应回原数列， 就是我们想要找到的连续最大和子数列。<strong>可以说， 这道题的突破口是利用cumulative sum来创造一个递增的数列， 从而使two pointer的实现方式更为简洁。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] main(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> ceiling) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] cumSum = <span class="keyword">new</span> <span class="keyword">int</span>[numbers.length() + <span class="number">1</span>]; <span class="comment">// obtain cumulative sum.</span></span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  cumSum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length(); i++) &#123;</span><br><span class="line">    sum += numbers[i+<span class="number">1</span>];</span><br><span class="line">    cumSum[i+<span class="number">1</span>] = sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; <span class="comment">// two pointers start at tip of the array.</span></span><br><span class="line">  <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] ids = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">while</span> (l &lt; cumSum.length()) &#123;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; cumSum.length() &amp;&amp; cumSum[r] - cumSum[l] &lt;= M) &#123;</span><br><span class="line">      r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cumSum[r-<span class="number">1</span>] - cumSum[l] &gt; max) &#123; <span class="comment">// since cumSum[0] = 0, thus r always &gt; 0.</span></span><br><span class="line">      max = cumSum[r-<span class="number">1</span>] - cumSum[l];</span><br><span class="line">      ids[<span class="number">0</span>] = l; ids[<span class="number">1</span>] = r;</span><br><span class="line">    &#125;</span><br><span class="line">    l++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Example2_-_continuous_minimum_distinct_subarray">Example2 - continuous minimum distinct subarray</h3><p><strong>Question</strong> [MEDIUM]找到至少含有K个不同数字的连续最小和子数列。 Given an array containing N integers, you need to find the length of the smallest contiguous subarray that contains atleast K distinct elements in it. Output “−1−1” if no such subarray exists.</p>
<p>从题意上和上一问求连续最大和子数列很像， 其实处理方式也有共同之处， 利用cumulative sum来负责和的部分， 利用set的实现来负责distince element的部分， 和之前相比end指针移动的条件， 更换为使得set中元素至少有K个， 记录此时sum和对应得<code>end - start</code>得长度， 然后移动start指针， 更新set元素， 由此往复。n的时间复杂度。</p>
<h3 id="Example3_-_minimum_hustle_subsequence">Example3 - minimum hustle subsequence</h3><p><strong>Question</strong> [MEDIUM] 找到K个给出最小hustle值的子数列， 不要求连续。 Given an array having N integers, you need to find out a subsequence of K integers such that these K integers have the minimum hustle. Hustle of a sequence is defined as sum of pair-wise absolute differences divided by the number of pairs. </p>
<p>明确了hustle值， 也就是pair的差绝对值之和之后， 对于不要求连续的子数列找最小值， 可以利用sorting来排序， 转换为类似寻找连续最小和子数列的类型。可以稍微改变上题的方法来处理这道题。nlogn + n的时间复杂度。</p>
<h3 id="Example4_-_Google_phone_interview">Example4 - Google phone interview</h3><p>前几天看到朋友发的Google的其中一道电面的题， 和上面讨论的题型很像， 不过稍加改动之后还更简单了。</p>
<p><strong>Question</strong> [EASY] 找到number X满足最大cover。Given a set S of 10^6 doubles. Find a number X so that the [X, X+1) half-open real interval contains as many elements of S as possible.For example, given this subset:[2.7, 0.23, 8.32, 9.65, -6.55, 1.55, 1.98, 7.11, 0.49, 2.75, 2.95, -96.023, 0.14, 8.60], the value X desired is 1.98 because there are 4 values in the range 1.98 to 2.97999 (1.98, 2.7, 2.75, 2.95)</p>
<p>首先还是将数字sort一遍， 之后可以将题目转换为two pointer的类型。<code>array[end] - array[start] &lt; 1</code>， 同时使得collection的size最大。 每次end指针右移， 添加element到collection里面， 在start指针右移的时候记录下对应的<code>array[start]</code>的值和collection的size， 最后拿到当collection的size最大的时候的那个元素值就可以满足在<code>[X, X+1)</code>的区间中数列的元素最多了。 由于不需要考虑distinct element， 所以采用collection而不是set。 达到O(n)的时间复杂度， 较优的解法。</p>
<h3 id="Example5_-_three_pointers">Example5 - three pointers</h3><p><strong>Question</strong> [MEDIUM] 找到最长只含有两个不同字母的子数列长度。 Given a string S, find the length of the longest substring T that contains at most two distinct characters. For example, Given S = “eceba”, T is “ece” which its length is 3.</p>
<p>仍然是two pointer的变式， 在维持two pointer的移动规则， 以及保持map的元素一直为两个的同时， 利用第三个pointer来从map中移除元素。在这种情况下不是简单的每次直接移除一个， 而是利用第三个pointer来移除移除元素到map里只剩两个元素。之所以用map而不用set的原因是， 移除一个字符并不代表后面就没有该元素重复， 而是采用<code>map&lt;char, int&gt;</code>来计数， 当int为0时才从map的key中移除该字符。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * find longest substring with at most two distinct elements.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestSubstringTwoDistinctElement</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, m = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">   Map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; map = <span class="keyword">new</span> HashMap&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">   <span class="keyword">while</span> (r &lt; s.length()) &#123;</span><br><span class="line">      <span class="keyword">while</span> (map.size() &lt; <span class="number">3</span>) &#123; <span class="comment">// keep the set fixed.</span></span><br><span class="line">         maxLen = max(maxLen, r - l);</span><br><span class="line">         r++;</span><br><span class="line">         <span class="keyword">if</span> (map.containsKey(s[r])) &#123;</span><br><span class="line">            map.put(s[r], map.get(s[r]) + <span class="number">1</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(s[r], <span class="number">1</span>);</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      m = l; <span class="comment">// pointer m moves the from left till map becomes two.</span></span><br><span class="line">      <span class="keyword">while</span> (map.size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (map.get(s[m]) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            map.put(s[m], map.get(s[m]) - <span class="number">1</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">// remove that char from map.</span></span><br><span class="line">            map.remove(s[m]);</span><br><span class="line">         &#125;</span><br><span class="line">         m++;</span><br><span class="line">      &#125;</span><br><span class="line">      l = m;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">   Method2: Compare with using map, if we know string only contains ASCII characters, then we can use int[256] to replace with a map&lt;char, int&gt;, since ASCII contains 127 characters, while use 8 bits leave one space for signed or unsigned.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstringTwoDistinct</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>, numDistinct = <span class="number">0</span>, maxLen = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (count[s.charAt(j)] == <span class="number">0</span>) numDistinct++;</span><br><span class="line">      count[s.charAt(j)]++;</span><br><span class="line">      <span class="keyword">while</span> (numDistinct &gt; <span class="number">2</span>) &#123;</span><br><span class="line">         count[s.charAt(i)]--;</span><br><span class="line">         <span class="keyword">if</span> (count[s.charAt(i)] == <span class="number">0</span>) numDistinct--;</span><br><span class="line">         i++;</span><br><span class="line">      &#125;</span><br><span class="line">      maxLen = Math.max(j - i + <span class="number">1</span>, maxLen);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Substring">Substring</h2><p><strong>Question</strong> [EASY] 查找是否存在子字符串。Implement strstr(). Returns the index of the first occurrence of word1 in word2, or -1 if word1 is not part of word2.</p>
<p>其实典型做法就是科班的KMP算法， mn的时间复杂度， 注意的点还是在于对部分edge cases的考虑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strstr</span><span class="params">(String raw, String template)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; raw.length(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; template.length(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i &gt; raw.length() - template.length()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (template.charAt(j) != raw.charAt(i + j)) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (j == template.length()) <span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reverse_Words_in_String">Reverse Words in String</h2><p><strong>Question</strong> [EASY] 将字符串中的单词们首位调换位置。Reverse words in string. Given an input string s, reverse the string word by word. For example, given s = “the sky is blue”, return “blue is sky the”.</p>
<p>注意的点在于使用StringBuilder而不是String concatenation， 因为StringBuilder不需要每次在赋值的时候再创建一个新的对象。 同时和这类题型特别相似的还有将某个integer array向某个方向rotate的， 存在类似的技巧。</p>
<h3 id="Original-1">Original</h3><p>基础的做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse token, reverse them. n time, n space.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	String[] tokens = s.split(<span class="string">"\\s+"</span>);</span><br><span class="line">	String result = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length(); i++) &#123;</span><br><span class="line">		result += tokens[tokens.length() - <span class="number">1</span> - i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不允许使用<code>split()</code>来parse token的话， 可以尝试two pointer的方式， 一个负责track单词的起始位置， 一个负责track结束位置， 然后跳过空格继续执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// do better with only one pass, without using split util function. By using two pointers, one tracks the word's beginning, one tracks the end. n time n space.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> start = s.length() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> end = s.length() - <span class="number">1</span>;</span><br><span class="line">	StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	<span class="keyword">while</span> (start &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (!s.charAt(end)) &#123; <span class="comment">// start with a non-space word.</span></span><br><span class="line">			start--;</span><br><span class="line">			end--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(s.charAt(start)) start--;</span><br><span class="line">		<span class="keyword">if</span> (result.length() != <span class="number">0</span>) &#123;</span><br><span class="line">			result.append(<span class="string">' '</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		result.append(s.substring(start + <span class="number">1</span>, end));</span><br><span class="line">		end = start;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Tricks-1">Tricks</h3><p>以上提到的两种方法都是n时间n空间， 也就是我们都创建了一个新的array返回， 也有直接在原数列做交换的方式， 正是上文提到的关于rotate类型的技巧。由于我们观察到：如果给每一个单词都reverse一遍， 最后再整个字符串reverse一遍， 可以得到相同的结果， 比如：</p>
<ul>
<li>raw： “ab bc cd”</li>
<li>target： “cd bc ab”<ul>
<li>reverse each word from raw： “ba cb dc”</li>
<li>reverse whole string：“cd bc ab”， same as target string.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">	Reverse words in string, but do it with n time, 1 space.</span><br><span class="line">	- one brilliant idea is, by reversing words first, then reverse the whole string. It has the same effect as reverse words in string.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">	rotate(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s[j] == <span class="string">' '</span> || j == s.length())&#123;</span><br><span class="line">			rotate(s, i, j);</span><br><span class="line">			i = j + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (end - start) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">char</span> temp = s[start + i];</span><br><span class="line">		s[start + i] = s[end - i - <span class="number">1</span>];</span><br><span class="line">		s[end - i - <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="More">More</h3><p>类似的还有刚刚提及的将某数列向某方向rotate的题型， Rotate an array to the right by k steps in-place without allocating extra space. For instance, with k = 3, the array [0, 1, 2, 3, 4, 5, 6] is rotated to [4, 5, 6, 0, 1, 2, 3]. </p>
<p>同样可以用到reverse的技巧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">	rotate(numbers, <span class="number">0</span>, numbers.length() - step);</span><br><span class="line">	rotate(numbers, numbers.length() - step + <span class="number">1</span>, numbers.length());</span><br><span class="line">	rotate(numbers, <span class="number">0</span>, numbers.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (end - start) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = numbers[start + i];</span><br><span class="line">		numbers[start + i] = numbers[end - i - <span class="number">1</span>];</span><br><span class="line">		numbers[end - i - <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reading">Reading</h2><ul>
<li><a href="https://tp-iiita.quora.com/The-Two-Pointer-Algorithm" target="_blank" rel="external">quora-two pointer algorithm</a></li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">leetcode</a></li>
</ul>
<h2 id="后记">后记</h2><p>刚开始用Java， 其实主要还是平时写Spring Boot的时候用的比较多， 如果上述的算法有错误或者忽略了edge cases的考虑， 欢迎在评论区指出。 同时大部分问题都存在其他或许更优的解法， 欢迎一起讨论~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天和朋友讨论 Google 电面的一道题， 由此启发， 总结了下 two pointer 的使用场景， 在大部分情况下， 恰当地使用 two pointer 可以使时间复杂度保持在 O(n)， 像 online judge 里部分 medium 题经常提及的子数列类型问题， two pointer 也可以提供不错的切入角度。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://chocoluffy.com/tags/java/"/>
    
      <category term="算法" scheme="http://chocoluffy.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面试总结" scheme="http://chocoluffy.com/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[16.11月随笔-告别|散文|冬天|总统选举]]></title>
    <link href="http://chocoluffy.com/2016/11/20/16.11%E6%9C%88%E9%9A%8F%E7%AC%94-%E5%91%8A%E5%88%AB%7C%E6%95%A3%E6%96%87%7C%E5%86%AC%E5%A4%A9%7C%E6%80%BB%E7%BB%9F%E9%80%89%E4%B8%BE/"/>
    <id>http://chocoluffy.com/2016/11/20/16.11月随笔-告别|散文|冬天|总统选举/</id>
    <published>2016-11-20T07:29:29.000Z</published>
    <updated>2016-12-21T02:36:20.000Z</updated>
    <content type="html"><![CDATA[<p>自由主义的故事，曾经是因为其经济上的优势而繁荣和扩张的。然而绝大多数的时候，这只是一小部分精英们的故事，自由和权利或许都只会是上层阶级的财产和特权。可悲的是，人们没有其他选择。选择trump，是不想听见一个一直听腻的故事，是对遥远的精英们仅剩的嘲讽罢了。</p>
<a id="more"></a>
<h2 id="11-11">11.11</h2><h3 id="告别">告别</h3><p>今天和最亲最尊敬的小老板告别， 还好是冬天， 可以把难受和不舍归咎给天气。 这是一个流行离开的世界， 但是我们都不擅长告别。 祝愿你一切都好。</p>
<p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f9z8nk1m0fj31kw23ue81.jpg" style="display: block; margin: 0 auto;"><br>(这是小老板家里面的一幅挂饰， 写得好好啊， 好喜欢~)</p>
<h2 id="11-10">11.10</h2><h3 id="unfamiliarity">unfamiliarity</h3><p>真的， 技术进步这种东西， 真的很少有aha moment， 或者突然一下子的飞跃， 感觉就是不断了解和深入之后的熟悉和融会贯通罢了。 突然想起来之前看一次react europe conferrence的视频， 里面的主讲人之一pitt hunt好像是， 提到过这么一句话， “don’t equal unfamiliarity to difficulty”， 很多时候， 你觉得它intimidating， 仅仅是因为你站得比较远罢了。 突然适用的， 还有崇拜和美感， 世界上哪有什么男神女神的， 哪只是因为你还不了解他或者她， 甚至不愿意去了解， 真正走近之后， 真正让人牵挂的， 也不再是她的光环。</p>
<p>自己每天的零碎时间都拿来看文章和博客， 真的很有用！真的真的， 要坚持下去哦！</p>
<p>愿每一次的打磨者， 都只会是自己。</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1f9z8o07uuij30go0gngml.jpg" style="display: block; margin: 0 auto;"></p>
<h2 id="11-09">11.09</h2><h3 id="看书">看书</h3><p>亚马逊的购物车里放了好几本特别想看的书， 圣诞回去一定要买回来! 朱天文! 朱天文! 好喜欢看散文， 没有长篇小说的负担， 轻轻松松地， 就像旁听一段对话或者独白。 温柔的力量， 曾经看到新世相里描绘的， 是轻轻拂过不用力的打扰。</p>
<p>也不知道为什么那么钟爱散文， 就是那种如果几周不看些令自己满意的文字就会不舒服的毛病吧， 也生怕自己再也写不出平静而诚挚的感觉了。 总是觉得， 文学的这类朦胧和理学的逻辑思辨是有冲突的， 就好像是距离带来的美感， 是不审视带来的真实感一样， 太多的想象力， 轻轻一戳， 就是荒谬。可尽管如此， 我还是习惯性地想要体会言语间的柔软， 像是一场逃离， 想要能够轻轻对生活卖个萌的浪漫。</p>
<p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f9z8q8rskdj30dx0go40n.jpg" style="display: block; margin: 0 auto;"></p>
<h3 id="关于冬天">关于冬天</h3><p>地铁里突然想起来， 写下的一段话：</p>
<p>喜欢冬天的理由之一， 是拥有一对仿佛可以塞下全世界的衣兜， 喜欢那种随手一掏， 就可以拿起笔记本的日子~</p>
<p>不喜欢冬天的理由之一， 也源自一场轻描淡写的忧伤， 看到一段字， “喜欢冬天， 因为可以把寒冷归咎于天气。”</p>
<p>今天终于下定决心要开始写日记了! 最后有个周报或者月报什么的~ 给自己定下了一个死死的目标， “写博客， 写项目和健身， 每天三样能完成两样就已经很不错了呢”。也是受byvoid大神和小土刀师兄的启发。</p>
<h3 id="总统选举">总统选举</h3><p>今天也是美国总统选举结果公布的第一天。 各个媒体渠道都在铺天盖地的报道， 我所选择的我认为阐释得比较周全得文章有以下两篇， 摘抄在这里学习学习：</p>
<h3 id="关键词－民粹主义和民主主义，">关键词－民粹主义和民主主义，</h3><p>来自<a href="http://mp.weixin.qq.com/s?__biz=MzA4MjcxMDEwNQ==&amp;mid=2686252468&amp;idx=1&amp;sn=6fb3b2e145e4d8ec000df00a6401796a&amp;chksm=ba69ce828d1e47940f52ddce33eb85b570f0e2594d434b3b607ba9c5afaddb7676faaeda213e&amp;mpshare=1&amp;scene=2&amp;srcid=1107R9tLwL2xTllBCcyAXdAc&amp;from=timeline&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="external">刘瑜：如何看待美国大选中的川普现象——论美国政治中的民粹主义</a>。</p>
<p>一个趋势是：没有政治家自称是“民粹主义”者，但是几乎人人都在给异己者贴上民粹主义标签。难道“我同意的民意”就是民主政治，“我不同意的民意”就是民粹政治？</p>
<p>本质上，自由式民主依赖精英主义和平民主义之间的平衡，而民粹政治信奉平民主义对精英主义的压倒性胜利。</p>
<p>民粹主义往往需要一种“人格化的力量”去唤起和表达。由于对“精英建制”（elite establishment）的敌视，民粹主义往往需要一个“孤胆英雄”式的人物去树立一个“反叛”的旗帜。无论是查韦斯、普京、埃尔多安、穆加贝，或美国的川普或桑德斯，都试图树立自己“孤胆英雄”的形象。因此，民粹主义的一个特点是其政治的“个人色彩”很强，这与民主政治的“机构色彩”形成鲜明对比。</p>
<p>因此，民粹政治的现实展开形式，常常是政治强人利用底层民众联手夹击社会中间层，而自由式民主固然具有精英主义色彩，但由于精英本身的多元性与分散性，却更能抵御威权主义的侵蚀。</p>
<p>但与此同时，对于民主主义来说，正因为美国政治的多元主义和精英主义成分，它也招致了许多人对美国“虚伪民主”的批评。《民主的反讽》一书认为，精英主义是美国民主得以良好运行和延续的“秘密”，而这正是美国民主的反讽之处。作者指出，由于精英往往比大众在政治上更加宽容，如果美国的政治体制镜像式地反映最主流的民意，而不是“掺入”了很多精英的理念，那么自由式民主或许早就不复存在了。</p>
<p>经济学家Caplan也指出，如果美国的底层民众投票率和中上层一样高（事实是前者低得多），那么美国的经济政策会“不理性得多”。换言之，尽管自由式民主的实践放大了精英的影响力，但是它增加了美国政治的理性程度，而这种理性是美国政治得以健康运行的“秘密”。</p>
<h3 id="关键词－自由主义的故事">关键词－自由主义的故事</h3><p>强烈推荐这一篇， 来自<a href="http://mp.weixin.qq.com/s?__biz=MzA4MTM5NTYzMA==&amp;mid=2659494084&amp;idx=1&amp;sn=051f4dad152486be3799e8b69c50b1a2&amp;chksm=84e5a205b3922b13c9b1e725a155c1e9ad4df4384709ccfb7b016bfae89a191cdce8a0995282&amp;scene=0#wechat_redirect" target="_blank" rel="external">《人类简史》作者分析特朗普崛起：自由主义终结了么？</a>。</p>
<p>故事是人类思考问题的中心，而非事实、数字或者表格，故事越简单越好。<strong>对这个过去几十年在我们的世界处于统领位置的故事，我们可以称之为“自由主义的故事”。</strong></p>
<p>但是，自2008年全球金融危机始，人们开始不再相信这个故事的主线。在20世纪90年代和21世纪的第一个10年里，人们相信遵守游戏规则可以让他们的地位上升以及变得富裕；2008年以后，他们突然开始害怕自己被欺骗，害怕这个系统并非对他们有利。<strong>阿拉伯之春变成了“伊斯兰之冬”；莫斯科、安卡拉、耶路撒冷的威权政府一点点放弃了自由民主的价值观，转而拥护民族沙文主义和宗教极端主义；甚至生活在自由主义占据主流位置的西欧国家的人们都开始有了悔意</strong>。如今，这股幻灭的浪潮正在涌向美国，而正是美国将这个“自由主义的故事”推行到了美国之外的许多地方，有时还是拿着枪推行。几十年来，那么多的承诺和保证令美国公民感到失望，幻想破灭后的他们可能会把特朗普选为总统，美国的精英们对此感到又惊又怕。</p>
<p>有关人们对“自由主义的故事”失去信心的另一种解释是，比较起过去的成就，人们更关心他们对未来的期望。</p>
<p>普通选民可能不理解人工智能，但他们能感觉到民主机制已经不再能够赋予他们权力。<strong>事实上，关乎普通选民和他们的孩子未来的最重要选择可能不是由欧盟的某些官僚或者华盛顿的某些游说团体做出的，而是由工程师、企业家和科学家做出的，而这些工程师、企业家和科学家并不会意识到自己所做的决定会带来怎样的影响，他们自然也不代表任何人。</strong>选民们看不到他们，也无法对他们喊话，所以他们只能猛烈抨击他们所能抨击的。英国的选民们想象自己的权力可能转移到了欧盟手上，所以他们投票支持英国脱欧。美国的选民们想象“权势集团”垄断了所有权力，所以他们决心给这个系统予以狠狠一击，以此来证明他们仍然有发言权。特朗普因而成了他们眼中下一届美国总统的最佳人选。<strong>正是因为选特朗普做美国总统令主流精英感到匪夷所思，这件事情才能成为普通选民证明自己仍然保留了一些权力的理想方式。</strong></p>
<p>事实证明，“自由主义的故事”在灵活性和发展变化上远远超过了它的任何一个对手。它战胜了传统的帝国，战胜了法西斯主义和共产主义，原因是因为它采用了自己对手的一些最好的想法和做法（比如政府出钱发展服务于民众的教育、医疗和福利事业）。</p>
<p>在社会主义者看来，为个人做自己喜欢做的事情的权利辩护便是在维护中产阶级和上层阶级的财产和特权。你是拥有居住自由，可你支付不起房租；是有学习自己感兴趣的学科的自由，可是你交不起学费；你有去你想去的地方旅行的自由，可是你买不起车；在这些时候，自由对你又有什么价值？更糟的是，自由主义鼓励人们将自己视为一个个个体，因而造成了人与人之间的分离，如此一来，人们便无法联合起来反对压迫他们的制度，不平等现象因此得以延续下去。</p>
<p>一旦人工智能在大多数认知作业上的表现优于人类，那个时候的就业市场会成为什么样子？一个由数量非常巨大、在经济上“没有用”的人所组成的新阶层会在政治上产生怎样的影响？等到纳米技术和再生医学可以延长人们的寿命——让八十岁的年纪相当于之前的五十岁，人们的关系、家庭还有养老基金到时候会受到什么影响？当生物技术发展到我们能够“设计”婴儿的水平——贫富之间的差距也会因此变得更大，人类社会会变成什么样子？对于上面这些问题，你不太可能在《圣经》或《古兰经》里找到答案。<strong>在这个被技术和经济风暴席卷的世界，激进的伊斯兰教，正统的犹太教或者基要派基督教可能会向信众许诺，他们会获得能够给他们带来确定性的船锚；然而，在这场即将到来的21世纪大海啸中，要保证不迷失方向，你还需要一张好地图，还要有结实的船舵。</strong></p>
<p>如“让美国再次强大”或者“把我们的国家还给我们”这一类口号的情况也一样：你可以建起一座墙来防止墨西哥非法移民进入美国，但是你没法建起一座墙把全球变暖挡在国门之外；你可以让英国脱离欧盟，但是你无法让伦敦脱离全球金融体系。<strong>如果人们不顾一切地抓住已经过时的民族和宗教身份不放，那么在气候变化、经济危机和技术带来的颠覆性影响面前，全球体系只会土崩瓦解；而19世纪的民族主义神话和中世纪的虔诚既不能理解这些问题，也没有能力解决它们。</strong></p>
<p>因此，<strong>当英国脱欧、特朗普崛起这样的事情发生时，主流精英们只能一脸惊恐地看着，然后希望大众会幡然悔悟，及时回到自由主义阵营里来，从而避免灾难的降临。</strong>但是，“自由主义的故事”要想从当前这场信任危机中存活下来可能会很困难，因为长期以来支撑着这个故事的根基可能已经在崩塌之中，这个根基便是：自由主义伦理和资本主义经济之间传统上的联合。在20世纪里，“自由主义的故事”非常具有吸引力，因为它告诉人们，也告诉政府，他们不用在“做正确的事”和“做精明的事情”之间做选择；保护人类的自由既是一种道义责任，也对经济的增长至关重要。英国、法国和美国之所以会蓬勃发展，据称是因为它们放宽了对经济和社会的限制，如果土耳其、巴西或者中国也想变得和英、法、美一样繁盛，它们也必须效仿这三个国家的做法。<strong>在大多数情况下，让暴君们和军政府决定实施自由化政策的不是道德上的理由，而是经济上的。</strong></p>
<p>然而，<strong>到了21世纪，对于我们所面临的两个最大挑战：全球变暖和技术发展带来的颠覆作用，“自由主义的故事”并不能提供很好的解决方案。</strong>随着人们的经济上的重要地位逐步被算法和机器人所取代，也许保护人类自由在道义上仍然具有正当性，可是光有道义上的理由就足够了吗？当重视每个人的自由和愿望不再能带来经济收益时，各国的精英们和政府还会对之继续重视吗？人们对自己的未来感到忧惧并没有错。即使特朗普输掉了即将到来的大选，数以百万计的美国人仍会有一种直觉：这个制度不再对他们有利，而且他们可能是正确的。</p>
<p><strong>自由主义曾经很繁荣的原因是一是主要因为经济上的因素， 但我们所面临的挑战却不一样了。</strong></p>
<p>到那个时候，算法将拥有权威，人类则将失去权威。</p>
<hr>
<p>像这类新闻观点类带有时效性的好文章， 以及文学类的文章还是很适合以这种评论的方式记录下来的~</p>
<p>自由主义的故事，曾经是因为其经济上的优势而繁荣和扩张的。然而绝大多数的时候，这只是一小部分精英们的故事，自由和权利或许都只会是上层阶级的财产和特权。可悲的是，人们没有其他选择。选择trump，是不想听见一个一直听腻的故事，是对遥远的精英们仅剩的嘲讽罢了。</p>
<h2 id="10-12">10.12</h2><h3 id="开源产品">开源产品</h3><p>V2上分享的开源代替sticker的软件， 用来桌面端记录todo， 用react + electron写的。 piece。</p>
<p>“只愿每一次的打磨者都只会是自己。”</p>
<p>在v2ex上遇见了很棒的人， 有piece的作者， 设计带给人的力量是绝对绝对不能忽略的， 降低了你尝试的门槛， 很多时候， 你的生活里会多出另外的一些可能， 有daza.io的作者， 完成了类似即刻稀土的全栈开发后独自旅行，</p>
<p>“有时候，不懂如何书写自己的人生，是因为没有主动观察过这个世界。”</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自由主义的故事，曾经是因为其经济上的优势而繁荣和扩张的。然而绝大多数的时候，这只是一小部分精英们的故事，自由和权利或许都只会是上层阶级的财产和特权。可悲的是，人们没有其他选择。选择trump，是不想听见一个一直听腻的故事，是对遥远的精英们仅剩的嘲讽罢了。</p>]]>
    
    </summary>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="月总结" scheme="http://chocoluffy.com/tags/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="社会人物" scheme="http://chocoluffy.com/tags/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E7%89%A9/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Computer Vision - 基于图片特征匹配合成全景图]]></title>
    <link href="http://chocoluffy.com/2016/11/07/Computer-Vision-%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D%E5%90%88%E6%88%90%E5%85%A8%E6%99%AF%E5%9B%BE/"/>
    <id>http://chocoluffy.com/2016/11/07/Computer-Vision-基于图片特征匹配合成全景图/</id>
    <published>2016-11-07T12:56:36.000Z</published>
    <updated>2016-11-20T21:24:14.000Z</updated>
    <content type="html"><![CDATA[<p>这一次尝试解决的问题是: 假如你希望有一幅风景的全景图(panaroma)，但是你手头上只有一堆关于该风景不同角度的图片， 怎么利用computer vision学习到的方法来合成一张全景图。</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>这学期虽然在公司实习， 但同时我也在学校part time了一门computer vision的课程。Computer Vision，说白了就是结合image recognition和machine learning的方法来训练机器能够识别和”理解”图片等媒体资源， 也算是一个特别新兴的研究领域。 正巧大项目开始前期， 我也准备在博客里总结一下前几次作业里面涉及的概念， 感觉特别有趣和实用呢~</p>
<p>这一次尝试解决的问题是: 假如你希望有一幅风景的全景图(panaroma)，但是你手头上只有一堆关于该风景不同角度的图片， 怎么利用computer vision学习到的方法来合成一张全景图。</p>
<p>比如一个简单的例子， 家里的游泳池的照片你刚好有两张不同角度的图片(如下图), 通过计算两张图片中的feature points(特征点)并且进行匹配，得到相应空间转换的矩阵(homography)， 借此可以将不同的图片映射到同一个景观上进行叠加(stitching)， 来获取更全面的视角。</p>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f9k6ilaabuj30hg0eo76b.jpg" style="display: block; margin: 0 auto;"></p>
<p>在全景图中的应用如下图:</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f9k6mj1jw6j30qa0h0jv5.jpg" style="display: block; margin: 0 auto;"></p>
<p>这也是这篇博文希望最后完成的目标。</p>
<h2 id="Computer_Vision">Computer Vision</h2><h3 id="特征点提取">特征点提取</h3><p>Image features是描述一张图像的重要特征之一。 很多情况下我们分辨不同的图片的直觉之一是利用边缘的分布和形状， 也是一开始利用edge detection来处理图像的缘由， 通过把image当作一个$m*n$的矩阵， 其中每个元素为灰度图片的pixel intensity， 利用filter(box, haar)等等来简化对相邻元素的求导过程， 来得出pixel intensity上的变化速度， 大多数情况下假设边界往往意味着pixel intensity的剧烈变化， 那么将处理后数值高的来进行local maximum suppression之后可能大致得到边界点。由此而来的应用是corner detection， 比如最典型的harris corner detection。通过边角(corner)来帮助识别图片。</p>
<p>利用corner来作为图片特征是一个初步的可实现的想法， 然后有一些固有的缺点， 比如尽管corner detection是rotation invariant的， 但是不scale invariant， 这意味着， 一张被放大过的图片， 之前曾经被识别为corner的点， 在新图片中就不被识别出来了。 原理如图：</p>
<p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f9kfaxk3qqj311q0q4abj.jpg" style="display: block; margin: 0 auto;"></p>
<p>我们希望找到一些图片的特征， 这些特征不受旋转的干扰(rotation invariant)， 而且也不受放大缩小处理的干扰(scale invariant)。而这个也是SIFT(scale-invariant feature transform)算法所要解决的问题， 这也是这次全景组合的应用中我所用到的选取特征点的方式。 </p>
<p>大致的介绍下<a href="https://en.wikipedia.org/wiki/Scale-invariant_feature_transform" target="_blank" rel="external">SIFT</a>， 原理是利用Laplacian of Gaussian函数能够detect blob区域的特点， 根据不同的Gaussian sigma $\sigma$ 我们可以匹配到不同scale程度上的区域极值，而作者Lowe等人利用Difference of Guassian来替代具有相似函数属性的Laplacian of Gaussian， 从而提高计算速率(因为DoG是seperable的)， 通过这些处理， 可以得到在不同的locational and spatial都存在的local maximum， 也是我们所希望的到的特征点。</p>
<p>同时Lowe提出了将特征点描绘为一个向量的方式， 通过在其pixel区域附近的$16<em>16$的格间中， 收集每个$4</em>4$区域内关于image gradient的major magnitutude and orientation的信息形成一个histogram表， 大致分为8个bin, 从而得到的$4<em>4</em>8 = 128$维的向量作为该特征点的特征向量。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 利用开源的matlab library vl_sift 来完成特征向量的获取</span></span><br><span class="line">I = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line"><span class="matrix">[f,d]</span> = vl_sift(single(I)) ;</span><br></pre></td></tr></table></figure>
<h3 id="特征点的匹配">特征点的匹配</h3><p>在对应每一张图片分别经过SIFT等算法进行处理， 得到特征点和特征向量之后， 我们需要将这些特征点对应起来。 换句话说， 如果两张图片有特别多的相似的特征点， 我们可以以很大的机率说它们在描述同一个东西。 </p>
<p>而匹配特征向量的方法也很原始， 就是计算向量之间的距离， 如果在Eludiean distance上离得比较近的点， 我们认为可能比较相似。 同时为了降低误判的纪律， 我们还希望最接近的那个距离， 相比第二个接近的距离要小很多。 通过两个数值的比小于某个threshold可以来达到这个效果。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 同样利用vl_sift自带的matching函数， 来比较两张图片中特征向量的匹配</span></span><br><span class="line">I = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">II = imread(<span class="string">'hotel/hotel-01.png'</span>);</span><br><span class="line"><span class="matrix">[f,d]</span> = vl_sift(single(I)) ; </span><br><span class="line"><span class="matrix">[ff,dd]</span> = vl_sift(single(II)) ;</span><br><span class="line"><span class="matrix">[matches, scores]</span> = vl_ubcmatch(d, dd, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>大致的结果如图：</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f9kg47w4mxj31em0jejyn.jpg" style="display: block; margin: 0 auto;"></p>
<h3 id="空间转换矩阵">空间转换矩阵</h3><p>具体的分析将会在另一篇博文中仔细讨论， 大致的原理是， 利用得到的feature match， 我们可以近似得到图片经过的转换， 然后用矩阵来表示。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 通过计算homography矩阵， 将00中的特征点map到新的01图中</span></span><br><span class="line">clear;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line">I = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">II = imread(<span class="string">'hotel/hotel-01.png'</span>);</span><br><span class="line"><span class="matrix">[f,d]</span> = vl_sift(single(I)) ; </span><br><span class="line"><span class="matrix">[ff,dd]</span> = vl_sift(single(II)) ;</span><br><span class="line"><span class="matrix">[matches, scores]</span> = vl_ubcmatch(d, dd, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="matrix">[~, matchid]</span> = sort(scores);</span><br><span class="line"></span><br><span class="line">matchid = matchid(<span class="number">1</span>, <span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">matches = matches(:, matchid);</span><br><span class="line">bestMatches = matches;</span><br><span class="line"></span><br><span class="line"><span class="comment">% these are matches.</span></span><br><span class="line">pSrc = f(<span class="number">1</span>:<span class="number">2</span>, bestMatches(<span class="number">1</span>, :));</span><br><span class="line">pTgt = ff(<span class="number">1</span>:<span class="number">2</span>, bestMatches(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">combs = <span class="matrix">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span>; <span class="comment">% Use top 4 matches.</span></span><br><span class="line">bestMatchesID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">A = <span class="built_in">zeros</span>(<span class="number">8</span>, <span class="number">9</span>); <span class="comment">% since for four matches, we have 8 rows.</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">xi = pSrc(<span class="number">1</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line">yi = pSrc(<span class="number">2</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line">xiprime = pTgt(<span class="number">1</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line">yiprime = pTgt(<span class="number">2</span>, combs(bestMatchesID, <span class="built_in">i</span>));</span><br><span class="line"></span><br><span class="line">row1 = <span class="matrix">[xi yi <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> -(xiprime*xi) -(xiprime*yi) -xiprime]</span>;</span><br><span class="line">row2 = <span class="matrix">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> xi yi <span class="number">1</span> -(yiprime*xi) -(yiprime*yi) -yiprime]</span>;</span><br><span class="line">A((<span class="number">2</span>*<span class="built_in">i</span>-<span class="number">1</span>):(<span class="number">2</span>*<span class="built_in">i</span>), :) = <span class="matrix">[row1; row2]</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="matrix">[V,D]</span> = eig(A<span class="operator">'</span>*A);</span><br><span class="line">h = <span class="built_in">reshape</span>(V(:, <span class="number">1</span>), <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X_hom=h<span class="operator">'</span>*<span class="matrix">[pSrc;ones(<span class="number">1</span>,size(pSrc, <span class="number">2</span>))]</span>;  <span class="comment">% be careful, Matlab has the matrix transposed</span></span><br><span class="line">X_hom=X_hom./<span class="built_in">repmat</span>(X_hom(<span class="number">3</span>,:),<span class="matrix">[<span class="number">3</span>,<span class="number">1</span>]</span>);</span><br><span class="line">match_plot(I, II, pSrc<span class="operator">'</span>, X_hom<span class="operator">'</span>);</span><br></pre></td></tr></table></figure>
<p>上面这段代码可以得到如下的结果， 其中我用到了<code>match_plot</code>这个函数<a href="https://www.mathworks.com/matlabcentral/fileexchange/31144-match-plot" target="_blank" rel="external">here</a>来实现更好的可视化效果， 也就是把这些点给连线起来。可以看到的是， 这些点经过mapping之后仍然可以指向相同的位置， 尽管两张是完全不同的图片。 这个也是我们实现全景图的一个基础。</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f9kg7usla1j30vs0c70y2.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww3.sinaimg.cn/large/006y8lVagw1f9fvb3funyj30vs0c7wk6.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f9fvbfrdxjj30vs0c7n2k.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww3.sinaimg.cn/large/006y8lVagw1f9fvbmsvkqj30vs0c77aj.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww4.sinaimg.cn/large/006y8lVagw1f9fvbs1gxuj30vs0c7dmk.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f9fvbzq4w6j30vs0c7wkq.jpg" style="display: block; margin: 0 auto;"><br><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f9fvc7r1moj30vs0c7wk4.jpg" style="display: block; margin: 0 auto;"></p>
<p>如果假设每个图片都是一个矩形，我们希望将这些举行在空间中叠加起来： </p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 其中compute_homography是上述得到homography矩阵的算法</span></span><br><span class="line">clear;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line">I = imread(<span class="string">'hotel/hotel-06.png'</span>);</span><br><span class="line">II = imread(<span class="string">'hotel/hotel-07.png'</span>);</span><br><span class="line"><span class="matrix">[f,d]</span> = vl_sift(single(I)) ; </span><br><span class="line"><span class="matrix">[ff,dd]</span> = vl_sift(single(II)) ;</span><br><span class="line"><span class="matrix">[matches, scores]</span> = vl_ubcmatch(d, dd, <span class="number">40</span>);</span><br><span class="line"><span class="matrix">[~, id]</span> = sort(scores);</span><br><span class="line">bestMatches = matches(:, id);</span><br><span class="line"></span><br><span class="line">h0001 = compute_homography(<span class="number">0</span>, <span class="number">1</span>, <span class="number">140</span>);</span><br><span class="line">h0102 = compute_homography(<span class="number">1</span>, <span class="number">2</span>, <span class="number">99</span>);</span><br><span class="line">h0203 = compute_homography(<span class="number">2</span>, <span class="number">3</span>, <span class="number">30</span>);</span><br><span class="line">h0403 = compute_homography(<span class="number">4</span>, <span class="number">3</span>, <span class="number">140</span>);</span><br><span class="line">h0504 = compute_homography(<span class="number">5</span>, <span class="number">4</span>, <span class="number">204.7</span>);</span><br><span class="line">h0605 = compute_homography(<span class="number">6</span>, <span class="number">5</span>, <span class="number">140</span>);</span><br><span class="line">h0706 = compute_homography(<span class="number">7</span>, <span class="number">6</span>, <span class="number">160</span>);</span><br><span class="line"></span><br><span class="line">I00 = imread(<span class="string">'hotel/hotel-00.png'</span>);</span><br><span class="line">I01 = imread(<span class="string">'hotel/hotel-01.png'</span>);</span><br><span class="line"><span class="matrix">[imgh, imgw, ~]</span> = <span class="built_in">size</span>(I00);</span><br><span class="line"></span><br><span class="line">x = <span class="matrix">[<span class="number">0</span> <span class="number">0</span> imgw imgw]</span>;</span><br><span class="line">y = <span class="matrix">[<span class="number">0</span> imgh imgh <span class="number">0</span>]</span>;</span><br><span class="line"></span><br><span class="line">I03 = <span class="matrix">[x;y]</span>;</span><br><span class="line">I02Proj = projective_transform(h0203, x, y);</span><br><span class="line"></span><br><span class="line">I01Proj = projective_transform(h0102, x, y);</span><br><span class="line">I01Proj = projective_transform(h0203, I01Proj(<span class="number">1</span>, :), I01Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I00Proj = projective_transform(h0001, x, y);</span><br><span class="line">I00Proj = projective_transform(h0102, I00Proj(<span class="number">1</span>, :), I00Proj(<span class="number">2</span>, :));</span><br><span class="line">I00Proj = projective_transform(h0203, I00Proj(<span class="number">1</span>, :), I00Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I04Proj = projective_transform(h0403, x, y);</span><br><span class="line"></span><br><span class="line">I05Proj = projective_transform(h0504, x, y);</span><br><span class="line">I05Proj = projective_transform(h0403, I05Proj(<span class="number">1</span>, :), I05Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I06Proj = projective_transform(h0605, x, y);</span><br><span class="line">I06Proj = projective_transform(h0504, I06Proj(<span class="number">1</span>, :), I06Proj(<span class="number">2</span>, :));</span><br><span class="line">I06Proj = projective_transform(h0403, I06Proj(<span class="number">1</span>, :), I06Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">I07Proj = projective_transform(h0706, x, y);</span><br><span class="line">I07Proj = projective_transform(h0605, I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :));</span><br><span class="line">I07Proj = projective_transform(h0504, I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :));</span><br><span class="line">I07Proj = projective_transform(h0403, I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :));</span><br><span class="line"></span><br><span class="line">figure;fill(x, y, <span class="string">'r'</span>);hold on;</span><br><span class="line">fill(I02Proj(<span class="number">1</span>, :), I02Proj(<span class="number">2</span>, :), <span class="string">'g'</span>);</span><br><span class="line">fill(I01Proj(<span class="number">1</span>, :), I01Proj(<span class="number">2</span>, :), <span class="string">'b'</span>);</span><br><span class="line">fill(I00Proj(<span class="number">1</span>, :), I00Proj(<span class="number">2</span>, :), <span class="string">'y'</span>);</span><br><span class="line">fill(I04Proj(<span class="number">1</span>, :), I04Proj(<span class="number">2</span>, :), <span class="string">'k'</span>);</span><br><span class="line">fill(I05Proj(<span class="number">1</span>, :), I05Proj(<span class="number">2</span>, :), <span class="string">'w'</span>);</span><br><span class="line">fill(I06Proj(<span class="number">1</span>, :), I06Proj(<span class="number">2</span>, :), <span class="string">'c'</span>);</span><br><span class="line">fill(I07Proj(<span class="number">1</span>, :), I07Proj(<span class="number">2</span>, :), <span class="string">'m'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% projective_transform.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proj</span> = <span class="title">projective_transform</span><span class="params">(h, x, y)</span></span></span><br><span class="line">proj = h<span class="operator">'</span>*<span class="matrix">[[x;y]</span>;<span class="built_in">ones</span>(<span class="number">1</span>,<span class="built_in">size</span>(<span class="matrix">[x;y]</span>, <span class="number">2</span>))];  <span class="comment">% be careful, Matlab has the matrix transposed</span></span><br><span class="line">proj=proj./<span class="built_in">repmat</span>(proj(<span class="number">3</span>,:),<span class="matrix">[<span class="number">3</span>,<span class="number">1</span>]</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>可以得到如下图所示的空间合集：</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f9fvop5ss7j30fk0bot9k.jpg" style="display: block; margin: 0 auto;"></p>
<p>最后将所有图片的pixel都map过去， 再稍微blend一下就可以得到完整的全景图了：</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f9fvst75ufj30zr0dq0ut.jpg" style="display: block; margin: 0 auto;"></p>
<h2 id="Reference">Reference</h2><p>博文中部分图片示例来自课程slides <a href="http://www.teach.cs.toronto.edu/~csc420h/fall/slides/lecture9.pdf" target="_blank" rel="external">homography lecture slides</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一次尝试解决的问题是: 假如你希望有一幅风景的全景图(panaroma)，但是你手头上只有一堆关于该风景不同角度的图片， 怎么利用computer vision学习到的方法来合成一张全景图。</p>]]>
    
    </summary>
    
      <category term="computer vision" scheme="http://chocoluffy.com/tags/computer-vision/"/>
    
      <category term="machine learning" scheme="http://chocoluffy.com/tags/machine-learning/"/>
    
      <category term="matlab" scheme="http://chocoluffy.com/tags/matlab/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[社团日记2 新生致辞]]></title>
    <link href="http://chocoluffy.com/2016/10/06/%E7%A4%BE%E5%9B%A2%E6%97%A5%E8%AE%B02-%E6%96%B0%E7%94%9F%E8%87%B4%E8%BE%9E/"/>
    <id>http://chocoluffy.com/2016/10/06/社团日记2-新生致辞/</id>
    <published>2016-10-06T13:09:06.000Z</published>
    <updated>2016-12-04T18:16:54.000Z</updated>
    <content type="html"><![CDATA[<p>为什么我选择计算机。 因为它给了我自由。 和文字一样， 甚至更流行的自由。</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f8jfpjll14j20j60ao3z8.jpg" style="display: block; margin: 0 auto;"></p>
<p>两周前的那个周末面试了好多小伙伴。 有来自工程系正在实习着的， 有研究生搞计算机系统的， 有一个穿着印有Amazon logo衣服的， 还有一个中文说得很溜的外国朋友。人来来往往。</p>
<p>作为技术部门的负责人， 在新生大会上也将有一段致辞。 说来也好玩， 给新生们准备的一段话， 自己准备的时候却也常常反问自己新生时的那段过往， 想起自己第一次接触计算机， 第一次参加hacker meeting的等等等等…</p>
<p>以下是当时准备时的摘要：</p>
<h3 id="新生致辞">新生致辞</h3><p>这一段时间主要在忙招新、面试。 一直就会在想， 这到底是一个怎么样的社团， 我们想招进来什么样的人， 一个特别庞大的感觉其他社团都不太注重的tech部门， 究竟是干什么的， 为什么我要加入？</p>
<p>把我们精雕细琢的作品， 无论是程序还是海报， 分享出去。 哪怕是他们对我们的作品有异议， 但我们至少给生活的细节提供了观点。</p>
<p>特别印象深刻的是， “为什么加入ada“， 很多人的回答是， ”因为我曾经被UT助手的某些文章， 某些功能帮助过。”</p>
<p>我们特别珍惜这种感觉。</p>
<p>能够将自己的想法实现出来的自由。</p>
<p>这感觉是一个特别难回答的问题， 就好像你去问一个人， 什么是喜欢跑东跑西去摄影， 抑或什么才是旅行的意义。</p>
<p>但可能更多时候这个问题也特别简单， 因为我喜欢啊。我用照片想纪录下生活里最美最美的瞬间去留住记忆， 我想设计出别人看两眼都要抖两下的海报~</p>
<p>也因为喜欢， 你也想去找那同样饱含热情、热烈的一群人。</p>
<p>说白了，这是一群怎么样的人， 也会吸引那样子的一群人过来。</p>
<p>那我们tech部门呢， 特别特别珍重的一种感觉， 其实也恨简单， 就是好玩。</p>
<p>分享一个我们前段时间为了帮助新生更好的认识多伦多大学设计的一个简单的网页游戏-你究竟是不是一个多大学生。点进去会看到很多很美的风景， 你需要根据图片猜到这个地点的名称。蛮多新生可能猜不到几个， 所以我们在后续的小助手文章里也详细介绍了很多各个著名地点以及贴心的建议（比如：ba哪里有热水等等）。 感谢我们的lydia\jessie\gloria给我们整理的图片。最后还有一个很萌很萌的教授。</p>
<p>现在如何才能玩到这个游戏呢？很简单，在UT助手输入关键词都可以匹配到这篇文章找到这个游戏链接。</p>
<p>那这个也是一个很好玩的功能啦， 也就是上个月吧， 我给小助手的后台添加了语义理解的功能。</p>
<p>说回来， 这是一个很典型的， 也是一个我蛮喜欢的游击战合作方式啦， 短短一两天内， 从社长提出这个上一次brainstorm里joyce的想法， 到技术部水水完成基本框架， 再转移给marketing部jessie添加内容素材， 再转移给技术部我和justin来设计动效和优化加载时间。 然后就有了这份几千人在微信上玩的一个游戏。很好玩吧。</p>
<p>第二个我一直想分享的东西， 就是我们的UT助手了， 正如大家所看到的一样， 我们给UT助手添加了很多的功能。</p>
<p>那ADA和UT助手， 究竟是什么一个关系？UT助手是一个独立的媒体平台， 由ADA的市场部的伙伴运营， 想让大家听见不同的声音， 看见有态度有温度的文字。 我也非常期待今年的UT助手， 因为作者费诺、冯小姐都是我特别欣赏的人。而Tech部门的主要目标之一， 也是为这个媒体平台添加工具性的功能。</p>
<p>自动化。</p>
<p>这是今年Tech部门最最主要的使命之一。</p>
<p>从数据来源爬虫的自动采集， 到项目与slackbot、hubot的自动储存和部署。我希望今年大部分的ADA项目都可以在某个方面接受自动化的想法。 从开发环境的设置开始， 可能每次开发网页你都是在编辑器里面保存然后跑去浏览器那边刷新等新的结果， 而同样， 或者可以尝试webpack的热加载， 页面可以随时同步到最新的状态而不必你有任何操作。很多的东西都会在后续的workshop里面分享。</p>
<p>这是一个试错成本很高的时代，ADA想提供给你， 在你步入残酷的商业逻辑之前， 一次尝试的机会。</p>
<p>这里有一群我认为非常理想主义的人。</p>
<p>如果要我说， 为什么我选择计算机。 因为他给了我自由。 和文字， 设计一样。它给予了你实现你想法的自由。而自由的人， 是最快乐的。</p>
<div class="full-image" markdown="1"><br>  <iframe src="http://chocoluffy.com/ADA2016/" width="100%" height="600px"><br>    <p>Your browser does not support iframes.</p><br>  </iframe><br></div>]]></content>
    <summary type="html">
    <![CDATA[<p>为什么我选择计算机。 因为它给了我自由。 和文字一样， 甚至更流行的自由。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[社团日记1 重新出发]]></title>
    <link href="http://chocoluffy.com/2016/09/11/%E7%A4%BE%E5%9B%A2%E6%97%A5%E8%AE%B01-%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/"/>
    <id>http://chocoluffy.com/2016/09/11/社团日记1-重新出发/</id>
    <published>2016-09-11T09:07:25.000Z</published>
    <updated>2016-09-11T21:32:07.000Z</updated>
    <content type="html"><![CDATA[<p>故事的开始。</p>
<a id="more"></a>
<p>有时候觉得自己还蛮幸运的， 一年前误打误撞来了多伦多， 误打误撞地加入了一个社团， 就认识了现在的室友和绝大多数最好的朋友。 原来觉得不过是一个简单的CS开发社团， 却不知觉受到了牵绊， 一路的小伙伴慢慢多了起来， 曾经一直以为自己会单打独斗下去， 现在则深感起伙伴的意义和陪伴。 这一年， 发生了太多的事情， 宛若被卷进了一篇篇故事情节般跌宕起伏， 迎来了自己进入计算机领域的第二年， 赢来了些许成就和关注； 开启了一份为期一年的全职工作； 第一次在白板上画出技术架构； 也第一次以vice president的身份见证一个年轻社团的懵懂和交接。 想写点什么， 对得起时光， 也对得起运气。</p>
<p>还记得今年年初曾经读过一本国内的创业传记《途客圈》， 硅谷工程师作者陈天在这本书里记录了途客圈这家曾经星光熠熠的创业公司的发展， 成熟， 瓶颈和没落。 记得当时零零散散的技术和期权笔记， 还在其中一个段落的结尾天真地自嘲到和现在的自己还完全没有什么关系嘛， 而半年之后， 却仿佛日日夜夜和小伙伴讨论起书里似曾相识的商业情节： 创始人及其同僚退任， 一个技术社团的高层大换血， 孤立无助的公关和市场部门， 流行和高雅的定位矛盾， 接受赞助和保持独立的选择与站队……不过这一次， 是切肤的感情和泪水， 是我们自己的选择。</p>
<p>这是一段真实的故事。 或许无关汹涌澎湃的情节，但这却是我最真实的生活。</p>
<p>故事的开头， 定格到一次关于赞助广告的紧急会议。 愿意接受来自商业机构的赞助吗？</p>
<p>一直以来， 赞助广告都好像会触动大众敏感的神经， 作为观众，其实争议和选择并不大， 无非是偶尔可能夸张了点的标题和或者画风突变的段子， 有时候效果好的， 人们反而乐在其中自愿做起了二次传播。 但作为被赞助的一方， 这却是一个很容易被上升到自由与独立的话题。 一方面， 有人觉得失去了创作的自由与方向， 而另一面， 有人觉得有了经济来源可以支撑起更大的自由……看似相互矛盾的两个论点， 实际上都是切中了同一个问题， “到底是谁在控制着开发抑或创作的自由？”， 如果赞助方以几近收购的经济优惠来和你提出合作邀请， 对不起， 他们需要的不是你， 而是你现在拥有的市场的关注和资源， 他们有他们准备好的一全套规划和商业蓝图， 而蓝图里并没有你可以自由发挥的地方， 你可以接受合作， 但却暗含接受给他们打工的前景。 虽然现实中Facebook巨额收购的Instagram和Whatsapp都将继续保持独立经营， 但这不过是FB在对手尚未反抗时的保护性市场垄断计划罢了， 而当初没有接受FB收购提议的Snapchat倒是在其曾经的年轻人圈子里打得一片火热。 试想想， 为什么Instagram和Whatsapp的发展宛若停止， 社交功能上几近亘古不变， 毕竟这是FB母体攫取广告费的主要流量来源， 任何有阻其扩大和维持市场的举动都不会被鼓励的。</p>
<p>而说回到我们自己社团对待赞助的情况， 更多的是我们自己依旧控制着我们创作开发以及市场运营的自由， 我们需要赞助， 也得以计划在科技领域下举办更多更有影响力的活动， 而我们几近全部的成果， 从组织的workshop， 到开发的产品功能， 原创的公众号文章， 都是我们学生利用业余时间独立做出来的……放在这个具体的环境下， 也很难说， 接受赞助合作会在哪些方面方面改变我们原本自己的轨迹。 而当天晚上， 我们也最终一致地通过了合作的计划， 值得一提地的是， 我们的社长大人硬生生将赞助费用拉高了十几个百分点， 哈哈……</p>
<p>我们还是一个特别年轻的社团， 在这个阶段， 我们需要侵略性不大的经济支持。 而至于长远的计划呢， 未来的愿景里对赞助的依赖有思考过吗？</p>
<p>其实作为技术部门的负责人， 我一直一直都很想将来源于”湾区日报”的启发在自己的社团产品里实现。 什么是湾区日报？ 它是由一个湾区的工程师独立一个人维系的业余项目， 每天通过各大社交平台发出自己阅读收集转载的商业、技术文章， 非营利项目， 据说作者还拒绝了很多商业赞助和合作， 目前的收入主要来自于APP的功能内购和自主捐赠。 阅读并收集优秀的资源是一个很好的习惯， 而让我印象深刻的并不是作者这一坚持的习惯本身， 而是， 作为一名工程师， 将整个习惯流程自动化的地步。 利用hubot和slack将阅读文章的保存以及之后的发布自动化， 极大地降低了分享的成本， 而分享本身的快乐， 也更容易被感受和坚持下去。 也是惊人的相似， 社团旗下也运营着一个辐射到整个多伦多大学华人学生的微信公众号， 而我这一个月带领的主要项目， 也是基于公众号所积累的内容做机器学习的处理， 同时努力把内容获取， 归档， 预处理和语义分析这一部分给自动化。 </p>
<p>任重而道远， 不过， 自动化， 也将会是这一年， 我给社团开发定下的首要目标。 或许慢慢地， 当我们的消息获取和处理成本极大的降低之后， 我们可以在微博， Facebook上自动发布我们收集转载的有用资讯， 市场部的小伙伴们可以集中精力在原创的文章和设计上……说着说着有种BuzzFeed的即视感， 不过我们只是一群追求效率的学生罢了， 我们只想静静地做好多伦多大学助手， 然后多伦多助手？ 然后？</p>
<p>镜头慢慢转回来， 距离我们签下赞助合同已经过去将近一个月了， 第二场关于招新的战役也近了， 而我们也太年轻， 也才反应过来犯下了好些错误， 从大受欢迎的游戏忘记的数据统计， 到社团官网的不太明了的内容介绍， 到社团在学校的百团大战几近煮熟的电脑。 可也正是这些事过以后的些许遗憾， 反衬出那些我们一起圆满了的美好。 短时间内设计的精美游戏， 惊艳的官网和硕果累累的招新， 突然想起社长大人的一段话， “最坏的情况不过就是维持现状， 而维持现状， 也挺好的不是嘛”……</p>
<p>很幸运能在奔波的路上遇见最真挚的伙伴， 沿途太多风景， 想抵达太多地方， 也是你们让我看见太多的可能。 很想写下这些莫名的情绪， 哪怕是尘封在角落， 也给我未来留下去找寻的线索， 这些天， 我曾经和这样的一帮人， 一起疯过。</p>
<p>分享很喜欢的一句话， 摘自《小王子》的作者， 安东尼圣修伯里， “如果你想打造一艘船， 别忙着号召人马， 收集木材， 分配工作， 发号施令。 你该做的是， 激起人们对浩瀚海洋的渴望。” </p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f7qbwyqnsog20dc0m1u0x.gif" style="margin: 0 auto;"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>故事的开始。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用ffmpeg从视频中获取图片及GIF]]></title>
    <link href="http://chocoluffy.com/2016/08/27/%E7%94%A8ffmpeg%E4%BB%8E%E8%A7%86%E9%A2%91%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%8F%8AGIF/"/>
    <id>http://chocoluffy.com/2016/08/27/用ffmpeg从视频中获取图片及GIF/</id>
    <published>2016-08-27T08:37:22.000Z</published>
    <updated>2016-10-24T03:07:43.000Z</updated>
    <content type="html"><![CDATA[<p>最近的项目涉及比较多的视频和图片的处理， 发现了一个特别好用的linux library “ffmpeg”， 在其官网的介绍中可以发现的是convert\record\stream video和audio的功能， 但其实我只是利用这个工具来从视频中获取一张张单独的图片(frame)， 然后来做后续的机器学习(相似度匹配PCE， 人像识别等等)等处理。 </p>
<a id="more"></a>
<p>在项目的展示中， 我提出了来自youtube的启发， 我感觉也是最近这几周， youtube上的视频列表多了一个新功能是， 当你鼠标hover当前视频时， 静态图片会变成视频中其中的一段GIF， 然后过一段时间再变回来， 具体效果看这个动图：</p>
<p><img src="http://ww4.sinaimg.cn/large/7853084cgw1f78xtzb0xyg20dc08u1ky.gif" style="margin: 0 auto;"></p>
<p>当时上youtube就觉得用户体验好棒， 很快想到的一些问题是， youtube是随机攫取GIF的嘛， 是否这个GIF就是这个视频的重要scene， 是利用收集的社交数据和评论来预测重要性的， 还是仅仅通过比较frame出现的时长来比较……</p>
<p>这些都是很有趣的问题， 每一个方向展开来说都可以逐渐细分到实现的算法和数据格式。 我现在正在做的也正是我上面提到的其中一个方向哈哈， 而今天这篇博文想要探讨的， 是实现上面所有后续构想的building block， 怎样获取数据源和呈现。 ffmpeg和imagemagick这两个处理照片和视频特别方便的库也再这里介绍一下。</p>
<h2 id="Preparation">Preparation</h2><p>安装ffmpeg的方式很简单， 在OSX里面<code>brew install ffmpeg</code>就可以了。同理也有<code>brew install imagemagick</code>。</p>
<h2 id="Example">Example</h2><p>下面是各种working choice，ffmpeg强大的另外一个地方是它并不需要将整个视频都下载下来然后再进行处理， 而是可以直接read from stream。 而在整个流程最花时间的步骤其实并不是获取那个frame， 而是将frame根据一定编码保存到本地这个过程。 而后续如果有充分时间， 我也满希望可以仔细去看看ffmpeg编码的格式~</p>
<p>[1]<code>ffmpeg -y -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 -ss 3 -frames:v 1 frame_3.jpg</code><br>can help extract the third frame from that url.</p>
<p>[2]<code>ffmpeg -y -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</code><br>will output images to convert them into gif.</p>
<p>[3]<code>ffmpeg -t 3 -ss 00:00:02 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 middle.gif</code><br>The snippet directs ffmpeg to create a GIF 3 seconds long starting at 2 seconds into the video.</p>
<p>[4]Thus, simply combine the [2] and [3] can convert some specific time frames into optimized gif like this <code>ffmpeg -t 3 -ss 00:00:02 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4  -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</code></p>
<p>[5]ffmpeg has its own version of converting to gif. <code>ffmpeg -t 3 -ss 1 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 output.gif</code>. However, the file size is extremely large, hard to load.</p>
<p>For now, version [4] is the best choice.</p>
<p><code>-ss</code>: follows a single number means extracting that single frame from video source; follows a specific time-format means extracting from that time. </p>
<p><code>-t</code>: follows a number means the duration of that extraction.</p>
<p>我在这里只记录了几个较为常用的parameter options。更多的option可以参看<a href="https://www.ffmpeg.org/ffmpeg.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="Dev_Environment">Dev Environment</h2><p>接下来是一段我写的示例代码， 主要还是就怎么使用ffmpeg的问题稍微说一下， 毕竟大部分Machine Learning的工作还是在python里面写， 而当我们需要在python里面获取这些frames的时候， 我们应该怎么调用ffmpeg和imagemagick呢？</p>
<p>这里稍微补充一点， 启示ffmpeg本身也可以convert seperate images into gif， 但是相比与imagemagick还提供了图片压缩和优化的选项， 我更倾向于使用两者的结合。</p>
<h3 id="virtualenv">virtualenv</h3><p>就使用ffmpeg这个方面本身并不需要提及virtualenv， 但是很多和ffmpeg相关的后续工作都会和很多python的scientific computing package一起合用， 而安装这些packages的过程是非常繁琐而容易出错的， 大家都习惯一上来就把这些library安装在全局， 而无论是安装过程还是未来的版本管理都是mess。</p>
<p>因此这里稍微提一下anaconda， 专为管理python packages而生的CLI， 为每一个项目创建一个virtualenv然后给那个项目安装不同的独立的python libraries， 用完即删。</p>
<p><code>conda create --name &lt;project-name&gt; python=2.7 opencv matplotlib</code>, use conda to install library dependencies. Also specify the python version and library needed to pre-install, say inside this project, we want  <code>import cv2</code>, thus we put those libraries right after the python version. Then <code>source activate &lt;project-name&gt;</code> can jump into that virtualenv.</p>
<h3 id="subprocess">subprocess</h3><p>Since I will utilize “imagemagick” library to process images into gifs, by piping the results from “opencv”, most likely I will need to create a subprocess to do that. The command-line way to achieve that is <code>ffmpeg -t 3 -ss 00:00:02 -i &lt;video source&gt; -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</code>, which for example, will extract starting at 00:00:02 a 3-seconds short video from origin video and convert\optimize them into a smaller gif. In order to support multiple pipes as in command line, we use subprocess’s <code>PIPE</code> functions to concatenate those different parts.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_gif</span><span class="params">(video, t, duration, output_name)</span>:</span></span><br><span class="line">    <span class="comment"># In subprocess, save gif to local.</span></span><br><span class="line">    <span class="comment"># ffmpeg -t 3 -ss 00:00:02 -i https://video.twimg.com/ext_tw_video/712057418646052864/pu/vid/1280x720/JiR-RnnRyfQVF5ue.mp4 -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif</span></span><br><span class="line">    p1 = sp.Popen([<span class="string">'ffmpeg'</span>, <span class="string">'-t'</span>, str(duration), <span class="string">'-ss'</span>, str(t), <span class="string">'-i'</span>, video, <span class="string">'-vf'</span>, <span class="string">'scale=320:-1'</span>, <span class="string">'-r'</span>, <span class="string">'10'</span>, <span class="string">'-f'</span>, <span class="string">'image2pipe'</span>, <span class="string">'-vcodec'</span>, <span class="string">'ppm'</span>, <span class="string">'-'</span>, ], stdout=sp.PIPE)</span><br><span class="line">    p2 = sp.Popen([<span class="string">'convert'</span>, <span class="string">'-delay'</span>, <span class="string">'5'</span>, <span class="string">'-loop'</span>, <span class="string">'0'</span>, <span class="string">'-'</span>, <span class="string">'gif:-'</span>], stdin=p1.stdout, stdout=sp.PIPE)</span><br><span class="line">    p1.stdout.close()</span><br><span class="line">    p3 = sp.Popen([<span class="string">'convert'</span>, <span class="string">'-layers'</span>, <span class="string">'Optimize'</span>, <span class="string">'-'</span>, output_name], stdin=p2.stdout, stdout=sp.PIPE)</span><br><span class="line">    p2.stdout.close()</span><br><span class="line"></span><br><span class="line">    output = p3.communicate()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Documentation">Documentation</h2><ul>
<li><a href="http://superuser.com/questions/556029/how-do-i-convert-a-video-to-gif-using-ffmpeg-with-reasonable-quality" target="_blank" rel="external">How to convert a video to gif using ffmpeg</a></li>
<li><a href="https://davidwalsh.name/convert-video-gif" target="_blank" rel="external">How to convert to and from between gif and video</a></li>
<li><a href="https://www.reddit.com/r/learnprogramming/comments/44nhzp/how_to_use_youtubedl_and_ffmpeg_to_download/" target="_blank" rel="external">use youtube-dl and ffmpeg to download</a></li>
<li><a href="http://superuser.com/questions/680323/processing-youtube-video-in-ffmpeg" target="_blank" rel="external">how to process youtube video without downloading it</a> main idea is to config ffmpeg with <code>libquvi</code>!!</li>
<li><a href="https://trac.ffmpeg.org/wiki/CompilationGuide/MacOSX" target="_blank" rel="external">install ffmpeg through homebrew</a> with recommending configuration options like <code>brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265</code></li>
<li><a href="https://www.binpress.com/tutorial/how-to-generate-video-previews-with-ffmpeg/138" target="_blank" rel="external">[recommend]how to generate video preview with ffmpeg</a></li>
<li><a href="http://www.bogotobogo.com/FFMpeg/ffmpeg_thumbnails_select_scene_iframe.php" target="_blank" rel="external">ffmpeg generate thumbnail from video</a> after generate the thumbnail and stitch together, here is a front end demo to over it <a href="http://jsfiddle.net/r6wz0nz6/2/" target="_blank" rel="external">demo</a> to see a preview.</li>
<li><a href="https://wideopenbokeh.com/AthenasFall/?p=5" target="_blank" rel="external">some tricks of using youtube-dl</a></li>
</ul>
<p>Inside <code>~/.bashrc</code>, set <code>alias youtubemp3=&#39;youtube-dl --extract-audio --audio-format mp3&#39;</code> to be able to create a alias and save a youtube video to mp3.</p>
<p>So basically, <code>youtube-dl -F &lt;url&gt;</code> to list all available video format, then  <code>youtube-dl -f 134 -o video.mp4 https://www.youtube.com/watch?v=v1uyQZNg2vE</code></p>
<h2 id="Summary">Summary</h2><p>处理视频和图片对我来说是一个蛮有趣的方向。 我们每天都会查询和搜索到无数多媒体信息， 而人们对信息的处理能力和标准也越来越严苛， 从简单文本到图片分享再到视频， 现在还很火的视频直播技术不是吗。 人们越来越多地被记录下来， 从曾经一生可能只去几次的影楼， 到情绪高涨时举起的自拍杆， 再到可能无时无刻都存在的直播和拍摄。</p>
<p>而记录本身， 就孕育着还原的渴望。</p>
<p>利用文字， 图片和视频， 科学家们能会如何重构一个曾经发生的世界， 而又能怎样地拿那个世界的统计和观察来预测下一个每分每秒。 深度学习和人工智能火了， 或许也是人们在尝试还原重构这个世界的一个必经之路， 很期待未来几年的科技发展啊。</p>
<p>很幸运以一个学生和实习生的身份慢慢进入这个殿堂。 话说回来， 每次见到那些用户体验特别好的细节总是特别喜欢然后絮絮叨叨呢哈哈~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近的项目涉及比较多的视频和图片的处理， 发现了一个特别好用的linux library “ffmpeg”， 在其官网的介绍中可以发现的是convert\record\stream video和audio的功能， 但其实我只是利用这个工具来从视频中获取一张张单独的图片(frame)， 然后来做后续的机器学习(相似度匹配PCE， 人像识别等等)等处理。 </p>]]>
    
    </summary>
    
      <category term="machine learning" scheme="http://chocoluffy.com/tags/machine-learning/"/>
    
      <category term="用户体验" scheme="http://chocoluffy.com/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React/ES6 style guideline]]></title>
    <link href="http://chocoluffy.com/2016/08/01/React-ES6-style-guideline/"/>
    <id>http://chocoluffy.com/2016/08/01/React-ES6-style-guideline/</id>
    <published>2016-08-01T08:41:46.000Z</published>
    <updated>2016-08-01T20:54:03.000Z</updated>
    <content type="html"><![CDATA[<p>用React完成了好几个小项目， 同时还在学习React Native开发， 记录一些ES6特别便捷的用法和guideline。持续更新…</p>
<a id="more"></a>
<h2 id="React_conventions">React conventions</h2><h3 id="propType_and_defaultProps">propType and defaultProps</h3><p>使用propType不仅仅是检查props数据的格式， 也是提醒自己这个组件可以利用的来自母组件的数据， 方便以后开发。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Title.jsx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&#123; this.props.text &#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Title.propTypes = &#123;</span><br><span class="line">  text: React.PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line">Title.defaultProps = &#123;</span><br><span class="line">  text: <span class="string">'Hello world'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">Title</span> <span class="attribute">text</span>=<span class="value">'Hello React'</span> /&gt;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="this-props-children">this.props.children</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span></span><br><span class="line">        &#123; this.props.text &#125;</span><br><span class="line">        &#123; this.props.children &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">Title</span> <span class="attribute">text</span>=<span class="value">'Hello React'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span>&gt;</span>community<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">Title</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Dependency_injection">Dependency injection</h3><p>One disadvantage of using react, is that when we need to pass down data to a deeply-nested component, which requires passing props all along the way.</p>
<h3 id="A_simple_switcher_example">A simple switcher example</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Switcher</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; flag: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>._onButtonClick = e =&gt; <span class="keyword">this</span>.setState(&#123; flag: !<span class="keyword">this</span>.state.flag &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;</span> <span class="attribute">this._onButtonClick</span> &#125;&gt;</span></span><br><span class="line">        &#123; this.state.flag ? 'lights on' : 'lights off' &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... and we render it</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">Switcher</span> /&gt;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Data_flow">Data flow</h3><p>Basically two way of passing data down with server call. One is parent component make a server request, usually in the <code>componentDidMount</code> and <code>componentWillMount</code>, and pass down the data using props to the children components. The disadvantage of that is the verbose passing process.</p>
<p>Another way is allow children components to make request themselves, which is the way of GraphQL.</p>
<h2 id="ES6">ES6</h2><h3 id="Arrow_functions">Arrow functions</h3><p>what the heck is the arrow function? <strong> Unlike functions, arrows share the same lexical this as their surrounding code.</strong></p>
<h3 id="Modules">Modules</h3><p>Language-level support for modules for component definition. Codifies patterns from popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour defined by a host-defined default loader. Implicitly async model – no code executes until requested modules are available and processed.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + math.sum(math.pi, math.pi));</span><br><span class="line"><span class="comment">// otherApp.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum, pi&#125; <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + sum(pi, pi));</span><br></pre></td></tr></table></figure>
<p>Some additional features include <code>export default</code> and <code>export *</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/mathplusplus.js</span></span><br><span class="line"><span class="keyword">export</span> * from <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> exp, &#123;pi, e&#125; <span class="keyword">from</span> <span class="string">"lib/mathplusplus"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"e^π = "</span> + exp(pi));</span><br></pre></td></tr></table></figure>
<h3 id="Deconstructing">Deconstructing</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// a === 1</span></span><br><span class="line"><span class="comment">// b === 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; ui, name &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="comment">// ui === this.props.ui;</span></span><br><span class="line"><span class="comment">// name === this.props.name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; blogpost: &#123; title, slug &#125; &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="comment">// title === this.props.blogpost.title;</span></span><br><span class="line"><span class="comment">// slug === this.props.blogpost.slug;</span></span><br></pre></td></tr></table></figure>
<h3 id="Functional_binding">Functional binding</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  click() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Clicked with scope'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">'#'</span> <span class="attribute">onClick</span>=<span class="value">&#123;</span> <span class="attribute">::this.click</span> &#125;&gt;</span>Click me!<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Adding the function bind syntax to ::this.click converts down to this.click.bind(this), ensuring that your callbacks in a component are called with this scoped to the component.</p>
<h3 id="Spread_operator">Spread operator</h3><p>尤其在React Native的redux框架里， 我们不能在reducer里修改state， 只能每次返回一个新的object， 这时候spread syntax特别方便。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> postActions <span class="keyword">from</span> <span class="string">'actions/posts'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> userActions <span class="keyword">from</span> <span class="string">'actions/users'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = (dispatch) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> bindActionCreators(&#123; ...postActions, ...userActions&#125;, dispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example we create a new object containing all values from postActions and userActions in one line.</p>
<h2 id="React_interview_question">React interview question</h2><p>Check more information from <a href="https://www.codementor.io/reactjs/tutorial/5-essential-reactjs-interview-questions" target="_blank" rel="external">this post</a>.</p>
<ul>
<li>Under what circumstances would you choose React over (AngularJS, etc)?</li>
<li>If React only focuses on a small part of building UI components, can you explain some pitfalls one might encounter when developing a large application?</li>
<li>If you were rewriting an AngularJS application in React, how much code could you expect to re-use?</li>
</ul>
<h3 id="High-Level_Component_Lifecycle">High-Level Component Lifecycle</h3><p>At the highest level, React components have lifecycle events that fall into three general categories:</p>
<ul>
<li>Initialization</li>
<li>State/Property Updates</li>
<li>Destruction</li>
</ul>
<p>Every React component defines these events as a mechanism for managing its properties, state, and rendered output. Some of these events only happen once, others happen more frequently; understanding these three general categories should help you clearly visualize when certain logic needs to be applied.</p>
<p>For example, components will automatically re-render themselves any time their properties or state change. However in some cases a component might not need to update — so preventing the component from re-rendering might improve the performance of our application.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// only re-render if the ID has changed!</span></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="keyword">return</span> nextProps.id === <span class="keyword">this</span>.props.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Example_interview_coding_challenge">Example interview coding challenge</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        <span class="comment">// set the default internal state</span></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            clicks: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.myComponentDiv.addEventListener(</span><br><span class="line">            ‘click’, </span><br><span class="line">            <span class="keyword">this</span>.clickHandler</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.myComponentDiv.removeEventListener(</span><br><span class="line">            ‘click’, </span><br><span class="line">            <span class="keyword">this</span>.clickHandler</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clickHandler() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            clicks: <span class="keyword">this</span>.clicks + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> children = <span class="keyword">this</span>.props.children;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">”my-component”</span> <span class="attribute">ref</span>=<span class="value">”myComponentDiv”</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">h2</span>&gt;</span>My Component (&#123;this.state.clicks&#125; clicks&#125;)<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">h3</span>&gt;</span>&#123;this.props.headerText&#125;<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">                &#123;children&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, there are two problems with the code above.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The constructor does not pass its props to the super class. It should include the following line:</span></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// The event listener (when assigned via addEventListener()) is not properly scoped because ES2015 doesn’t provide autobinding. Therefore we might re-assign clickHandler in the constructor to include the correct binding to this:</span></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">              <span class="keyword">this</span>.clickHandler = <span class="keyword">this</span>.clickHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>And in order to use this component, we can do this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent headerText=”A list <span class="keyword">of</span> paragraph tags”&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">p</span>&gt;</span>First child.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Any other <span class="tag">&lt;<span class="title">span</span>&gt;</span>number<span class="tag">&lt;/<span class="title">span</span>&gt;</span> of children...<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">MyComponent</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>用React完成了好几个小项目， 同时还在学习React Native开发， 记录一些ES6特别便捷的用法和guideline。持续更新…</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="react" scheme="http://chocoluffy.com/tags/react/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack与react\redux前端开发工具库]]></title>
    <link href="http://chocoluffy.com/2016/07/18/webpack%E4%B8%8Ereact-hot-reload%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <id>http://chocoluffy.com/2016/07/18/webpack与react-hot-reload开发工具库/</id>
    <published>2016-07-18T15:28:05.000Z</published>
    <updated>2016-07-31T01:33:46.000Z</updated>
    <content type="html"><![CDATA[<p>对Dan Abramov开源的react hot loader boilplate的浅探， 同时复习一下webpack与react搭配开发时的常用配置。<a href="https://github.com/chocoluffy/react-hot-boilerplate" target="_blank" rel="external">Github Source</a></p>
<a id="more"></a>
<h2 id="Babel">Babel</h2><p>通常用到的plugin, 在package.json里面保存的module有： “babel-loader”\”babel-preset-es2015”\”babel-preset-react”， 使用babel-loader, 一是可以在<code>.babelrc</code>这个文件里面写出使用另外两个module的配置， 或者， 在webpack里面的loaders部分添加相应的code来实现同样的功能。其中”babel-preset-es2015”是将es6的js语法compile成es5的， 现在IE9以上及大部分的主流浏览器目前都支持ES5语法了。</p>
<blockquote>
<p>至于ES6和ES5有什么区别， 以及即将到来的ES7有什么意义， 集成了大部分的functional programming的特性， 本来可能需要引用underscore.js的函数现在可能直接就可以用了。包括spread operator, function binding(::), arrow functions, modules export， 这些都是非常便捷和广泛采用的语法呢~</p>
</blockquote>
<p>而“babel-preset-react”则是将JSX译成JS的插件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [<span class="string">'./client/client.js'</span>], <span class="comment">// 将entry下的client.js最终打包成dist/bundle.js。</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// 利用正则表达式来匹配所有以.js结尾的文件， 同时排除node_modules里面的js文件。</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意在express里面， 我们通常会调整前端index.html引用资源的路径为“./dist”:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'./dist'</span>));</span><br></pre></td></tr></table></figure>
<p>这样的在index.html里面引用bundle.js就可以直接：<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code>就好了。</p>
<p>然后在webpack.config.js写好之后， <code>webpack --config webpack.config.js</code>可以run webpack。然后<code>nodemon server.js</code>就可以开始运行了。当然webpack也有hot reloading的功能。不用每一次都rebuild一次webpack， 而是可以在react里面看到更新component的变化。</p>
<h2 id="React_Hot_Reloading">React Hot Reloading</h2><p>具体的做法是将webpack当成一个middleman来hook服务器。相比nodemon， webpack的好处就是， 它并没有restart server, nodemon是会watching整个”*”， 而webpack只是更新改变的部分。所以我们希望的是让webpack来管理关于react component的部分， 而nodemon只是来监听剩下的部分， 例：<code>nodemon server.js --ignore components</code>， 这样nodemon会忽略所有components文件夹下面的改动。</p>
<p>要使用hot module reload，下载一个babel的插件， 其实babel主要的功能还是在compile上， webpack的主要作用还是在project building这个过程， 然后中间有很多相关的插件是相互联系的， 比如我们现在准备使用的这个“babel-preset-react-hmre”。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// updated webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">    <span class="string">'./client/client.js'</span></span><br><span class="line">    ], <span class="comment">// source file</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="built_in">require</span>(<span class="string">"path"</span>).resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// search all files with ".js" as last.</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>, <span class="string">'react-hmre'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前写的基本都是babel的插件， 现在引入了<code>npm install --save webpack</code>的插件， 同时为了避免多次执行<code>webpack --config webpack.config.js</code>，我们把webpack.config.js引入express server. </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../webpack.config.js'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;noInfo: <span class="literal">true</span>, publicPath: config.output.publicPath&#125;));</span><br><span class="line">app.use(webpackHotMiddleware(compiler));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.resolve(<span class="string">'client/index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Express server listening on port"</span>, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="React_Hot_Boilerplate">React Hot Boilerplate</h2><p>最后的成果见这里， <a href="https://github.com/chocoluffy/react-hot-boilerplate/blob/master/webpack.config.js" target="_blank" rel="external">minimum react hot boilerplate</a>， fork自redux的作者dan abramov。他写的react hot loader boilerplate是我看过的最好的使用starter kit!</p>
<p>最后还想提出的一点， 主要关于ES6里面关于函数的this binding的问题， 通常来说，ES6的arrow可以解决这个问题，或者说在每次render里面调用函数的时候加上<code>.bind(this)</code>。 但是最好的办法还是写在constructor里面， 这样的函数只会bind一次之后都可以一直用。下面附上官方的使用范例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;count: props.initialCount&#125;;</span><br><span class="line">    <span class="keyword">this</span>.tick = <span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;count: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.tick&#125;</span>&gt;</span> // don't need to use arrow type or bind function here anymore since bind in contructor.</span><br><span class="line">        Clicks: &#123;this.state.count&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Counter.propTypes = &#123; initialCount: React.PropTypes.number &#125;;</span><br><span class="line">Counter.defaultProps = &#123; initialCount: <span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>不得不说， 这个starter kit和chrome的react dev tool搭配用起来， 写react的项目真的是一种享受。</p>
<h2 id="Trouble_Shooting">Trouble Shooting</h2><p>在写react\redux的时候， 由于现在需要使用babel来compile一遍写的code， 很多bugs都是在于对babel的不熟悉而来而导致的编译不成功， 而这些时候， 由于没有办法像以前一样在chrome inspect来debug， 必须对一些基础的使用有一定了解才可以绕过去。特别是在引入webpack之后， 配置在前期挺麻烦的， 但是一旦把开发环境搭建好了， 后期的开发就特别轻松和享受了~也在这个部分， 把我遇到的， 和觉得有价值的细节都提出来， 和大家分享~</p>
<h3 id="Why_my_jsx_element_not_showing_correctly?">Why my jsx element not showing correctly?</h3><p><a href="http://gunnariauvinen.com/getting-es6-syntax-highlighting-in-sublime-text/" target="_blank" rel="external">config sublime text to highlight jsx</a></p>
<h3 id="Anything_about_ES6_syntax_error_by_browser-">Anything about ES6 syntax error by browser.</h3><p>For example, <code>store.js:1 Uncaught SyntaxError: Unexpected token import</code>, check<a href="http://stackoverflow.com/questions/33460420/babel-loader-jsx-syntaxerror-unexpected-token" target="_blank" rel="external">this post</a> for more information about babel plugins, however, we also need to pay attention to the path that plugins take effect. For example, in the “webpack.config.js” file, the module part looks like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">	loaders: [&#123;</span><br><span class="line">	  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">	  loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel'</span>],</span><br><span class="line">	  include: path.join(__dirname, <span class="string">'src'</span>)</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>It means that “react-hot” &amp;&amp; “babel” will collect files from “/src” folder and apply two loaders on it. Thus, any folder outside the path the “/src” will be ignored by loaders. In our original example, store.js is located outside “/src”, thus the <code>import</code> syntax will not be converted into es2015 that browser can recognize, thus gives such error. </p>
<h3 id="Pressing_“enter”_don’t_automatically_submit_the_input">Pressing “enter” don’t automatically submit the input</h3><p>It’s more like a UX experience than a problem. In the traditional input and button structure:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input </span><br><span class="line">	placeholder=<span class="string">"typing something here..."</span></span><br><span class="line">	value=&#123;<span class="keyword">this</span>.state.inputText&#125;</span><br><span class="line">	onChange=&#123;<span class="keyword">this</span>._onChange&#125;</span><br><span class="line">/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this._onClick&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>However, after user types in something in the input box, pressing “enter” key won’t directly submit the input. Thus, we want to improve it by converting it into a form style to automate whole process:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>._onClick&#125;&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="title">input</span> </span><br><span class="line">		<span class="attribute">placeholder</span>=<span class="value">"typing something here..."</span></span><br><span class="line">		<span class="attribute">value</span>=<span class="value">&#123;this.state.inputText&#125;</span></span><br><span class="line">		<span class="attribute">onChange</span>=<span class="value">&#123;this._onChange&#125;</span></span><br><span class="line">	/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">text</span>=<span class="value">"Submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>Then, pressing “enter” key right after you finish typing should work!</p>
<h2 id="Tricks_and_Notes">Tricks and Notes</h2><h3 id="Render_JSX_with_if-else_logic_control">Render JSX with if-else logic control</h3><p>Sometimes, we just want to render JSX depending on some state values like in Angular. We can simple assign JSX to variable inside <code>render()</code>, and note that we need a parathesis around JSX for assignment. This code snippet is used in <a href="https://github.com/chocoluffy/redux-todolist" target="_blank" rel="external">redux-todolist</a>. Do note that to avoid confusion, I still use <code>.bind(this)</code> syntax below, but I recommend to put binding logic inside <code>constructor()</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">	<span class="keyword">var</span> todoText;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.props.todo.isCompleted)&#123;</span><br><span class="line">		todoText = (</span><br><span class="line">			<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">s</span>&gt;</span>&#123;this.props.todo.text&#125;<span class="tag">&lt;/<span class="title">s</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		)</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		todoText = (</span><br><span class="line">			<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span>&#123;this.props.todo.text&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		)</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="xml"><span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">			&#123;todoText&#125;</span><br><span class="line">			<span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this._onComplete.bind(this)&#125;</span> &gt;</span>Complete<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">	)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Some other times, in order to keep render function clean, we will move the render logic into another function to return JSX syntax and call that function inside <code>render()</code>, note that we don’t need the <code>.bind(this)</code> syntax in this case! Because, the whole reason of using <code>.bind(this)</code> is that inside the _onClick handler function, the <code>this</code> will points to nothing(null), instead of the React component, which may causes the “this.props” not found error and the like. However, in this case, we simply return JSX syntax based on if-else logic, and we won’t need the binding.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">renderTodoText()&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.props.todo.isCompleted)&#123;</span><br><span class="line">		 <span class="keyword">return</span> (</span><br><span class="line">			<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">s</span>&gt;</span>&#123;this.props.todo.text&#125;<span class="tag">&lt;/<span class="title">s</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		)</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span>&#123;this.props.todo.text&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="xml"><span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">			&#123;this.renderTodoText()&#125;</span><br><span class="line">			<span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this._onComplete&#125;</span> &gt;</span>Complete<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this._onDelete&#125;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">	)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Check more information in <a href="http://devnacho.com/2016/02/15/different-ways-to-add-if-else-statements-in-JSX/" target="_blank" rel="external">this post</a>.</p>
<h3 id="Webpack_in_production">Webpack in production</h3><p>Pretty similar with using webpack in dev mode, but much simpler in that you only need to specify a correct output path, and webpack will handle the else stuff. And it contains Uglify plugins and others that can help produce the production bundle.js file.</p>
<p>check <a href="http://www.pro-react.com/materials/appendixA/" target="_blank" rel="external">this post</a> for more information.</p>
<h3 id="How_redux’s_state_update_react’s_components">How redux’s state update react’s components</h3><p>When you use Redux in React application, follow one simple rule - all your components are stateless (means, <strong>no component initializes its state or calls .setState() anywhere</strong>).</p>
<p>The redux way of design based on state container, one big object that holds all application state. As React component, being connected to Redux store, Redux will pass the state (or portion of it) into that component, as this.props.state property.</p>
<p>That high-order component (or smart component), renders its children components (or dumb components) and handles events from them.</p>
<p>If child component requires change, it triggers corresponding handler (which typically passed as props). The only way to change the state is to dispatch an action. That action contains a type and a payload and based on that type, corresponding reducer is selected. The reducer then produces a new state, based on previous state and action payload.</p>
<p><strong>If in the result of reducer call, state got changed, Redux will re-render high-order component, passing new state in properties. So, all child components will be updated correspondingly.</strong></p>
<p>Check <a href="http://stackoverflow.com/questions/33668827/refresh-logic-in-react-component-or-flux-redux" target="_blank" rel="external">this post</a> for more information.</p>
<h3 id="How_to_use_seperate_reducers_to_handle_different_parts_of_state">How to use seperate reducers to handle different parts of state</h3><p>One thing to note that in seperate single reducers functions like this one, we no longer pass in the whole state tree, but instead the correct portion of that state tree, in this case, only todos array. And this part of code handles that:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">'./todoReducer'</span>;</span><br><span class="line"><span class="keyword">import</span> userReducer <span class="keyword">from</span> <span class="string">'./userReducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">    todos: todoReducer,</span><br><span class="line">    user: userReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure>
<p>Note that after we split the reducer function, we will also update all related files.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对Dan Abramov开源的react hot loader boilplate的浅探， 同时复习一下webpack与react搭配开发时的常用配置。<a href="https://github.com/chocoluffy/react-hot-boilerplate">Github Source</a></p>]]>
    
    </summary>
    
      <category term="react" scheme="http://chocoluffy.com/tags/react/"/>
    
      <category term="redux" scheme="http://chocoluffy.com/tags/redux/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactNative-简易个人博客客户端]]></title>
    <link href="http://chocoluffy.com/2016/07/03/ReactNative-%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://chocoluffy.com/2016/07/03/ReactNative-简易个人博客客户端/</id>
    <published>2016-07-03T03:25:11.000Z</published>
    <updated>2016-08-01T00:04:43.000Z</updated>
    <content type="html"><![CDATA[<p>记录了学习React Native过程中一开始的上手项目， 对初学者提供对比参考。<a href="https://github.com/chocoluffy/ReactNativeEveryday/tree/master/Day3SimpleNavigator" target="_blank" rel="external">Github Source</a></p>
<a id="more"></a>
<h2 id="Demo">Demo</h2><p><img src="http://ww4.sinaimg.cn/large/c5ee78b5gw1f5h54wb0ung20dc0ob4qu.gif" style="height: 486px; margin: 0 auto;"></p>
<h2 id="Dependency">Dependency</h2><p>react native components:</p>
<ul>
<li>TabBarIOS</li>
<li>Navigator</li>
<li>WebView</li>
</ul>
<p>third library:</p>
<ul>
<li>react-native-vector-icons</li>
</ul>
<h2 id="Trouble_Shooting">Trouble Shooting</h2><h3 id="Use_rnpm_to_link_with_third-party_libraries">Use <code>rnpm</code> to link with third-party libraries</h3><p>Sometimes the third-party libraries not fully integrated into the project even doing <code>rnpm link</code>. In such case, delete the node_modules folder and install again, <code>rm -rf node_modules &amp;&amp; npm install</code>, then do <code>rnpm link</code> to help link with IOS libraries instead of doing it mannually.</p>
<h3 id="How_to_center_an_image_of_fixed_size">How to center an image of fixed size</h3><p>Apply <code>flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39;</code> styling on image’s parent element, then for that image’s styling, only specify its fixed height and width will work!</p>
<h3 id="TouchableHighlight">TouchableHighlight</h3><p>TouchableHighlight component can only has one child element, thus if we want to have multiple children elements, wrap them into a single view container. </p>
<blockquote>
<p>Notice one error I met, we need to directly use a <code>View</code> component after <code>TouchableHighlight</code>.</p>
</blockquote>
<h3 id="Navigator">Navigator</h3><p>Finally using Navigator instead of NavigatorIOS, there are several important things to remember:</p>
<ul>
<li>we have an <code>renderScene</code> method in index.ios.js that defines what component to render when there is an scene being pushed.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In parent component, we define renderScene method:</span></span><br><span class="line">renderScene(route, navigator) &#123;</span><br><span class="line">   <span class="keyword">if</span>(route.name == <span class="string">'Main'</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">Main</span> <span class="attribute">navigator</span>=<span class="value">&#123;navigator&#125;</span> &#123;<span class="attribute">...route.passProps</span>&#125; /&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">   if(route.name == 'Home') &#123;</span><br><span class="line">     return <span class="tag">&lt;<span class="title">Home</span> <span class="attribute">navigator</span>=<span class="value">&#123;navigator&#125;</span> &#123;<span class="attribute">...route.passProps</span>&#125; /&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// And in child component, we put all data we want to pass to next scene in route object.</span><br><span class="line">_navigate(property)&#123;</span><br><span class="line">  this.props.navigator.push(&#123;</span><br><span class="line">    name: 'Home',</span><br><span class="line">    passProps: &#123;</span><br><span class="line">      name: property</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">TouchableHighlight</span> <span class="attribute">onPress</span>=<span class="value">&#123;</span> () =&gt;</span> this._navigate('Hello World') &#125;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="title">Text</span>&gt;</span>GO To View<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">TouchableHighlight</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>And utilizing the spread syntax of passing properties, we can easily allow next scene to use the data passed from the previous scene, the one being trigger(ususally by pressing).</p>
<ul>
<li>The problem of “this”. In the above example, we use the ES6 arrow syntax, which automatically bind “this” for us, which means that the “this” inside the function we called points to the current component. However, if we use common function assignment like <code>onPress={this.onPress.bind(this)}</code>, we have to manually bind this to it!!!</li>
</ul>
<p>check <a href="https://medium.com/@dabit3/react-native-navigator-navigating-like-a-pro-in-react-native-3cb1b6dc1e30#.1kuxzxyps" target="_blank" rel="external">this post</a> for more information. And refer to the source code of example <a href="https://rnplay.org/apps/9_1QSA" target="_blank" rel="external">navigator example</a>.</p>
<h3 id="TabBarIOS">TabBarIOS</h3><p>Check <a href="https://devdactic.com/react-native-tab-bar/" target="_blank" rel="external">this post</a> for more helpful information.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">TabBarIOS</span> <span class="attribute">selectedTab</span>=<span class="value">&#123;this.state.selectedTab&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TabBarIOS.Item</span></span><br><span class="line">          <span class="attribute">selected</span>=<span class="value">&#123;this.state.selectedTab</span> =<span class="value">==</span> '<span class="attribute">welcome</span>'&#125;</span><br><span class="line">          <span class="attribute">systemIcon</span>=<span class="value">"featured"</span></span><br><span class="line">          <span class="attribute">onPress</span>=<span class="value">&#123;()</span> =&gt;</span> &#123;</span><br><span class="line">              this.setState(&#123;</span><br><span class="line">                  selectedTab: 'welcome',</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="title">Welcome</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">TabBarIOS.Item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TabBarIOS.Item</span></span><br><span class="line">          <span class="attribute">selected</span>=<span class="value">&#123;this.state.selectedTab</span> =<span class="value">==</span> '<span class="attribute">more</span>'&#125;</span><br><span class="line">          <span class="attribute">systemIcon</span>=<span class="value">"featured"</span></span><br><span class="line">          <span class="attribute">onPress</span>=<span class="value">&#123;()</span> =&gt;</span> &#123;</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    selectedTab: 'more',</span><br><span class="line">                &#125;);</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="title">More</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">TabBarIOS.Item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">TabBarIOS</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Test_on_real_device">Test on real device</h3><ul>
<li>Change from localhost to my computer’s IP.</li>
<li><a href="https://gist.github.com/andrewsardone/91797ff9923b9ac6ea64" target="_blank" rel="external">Add one more key to info.plist</a></li>
</ul>
<h3 id="Image_not_rendering_from_ListView">Image not rendering from ListView</h3><ul>
<li>One weird thing happened is that using the same uri from Day2 project, I want to render luffy on each row of ListView, but it doesn’t show up. Then, I change to a <em>small and https-sourced</em> image from facebook’s github repo, then it works. Not sure how to deal with it yet.</li>
<li>Some one from issue panel says that image may not be updated in ListView and you have to add an “ID” attribute to forcely update it, it can be saved for later’s use.</li>
</ul>
<h3 id="Icon">Icon</h3><p>Most used library for Icon is “react-native-vector-icons”, and simply import corresponding libraries will do the tricks, <code>import Icon from &#39;react-native-vector-icons/Ionicons&#39;;</code> Then, use <a href="http://ionicframework.com/docs/v2/ionicons/" target="_blank" rel="external">this website</a> for searching new icons. If animation required, use <a href="https://github.com/oblador/react-native-animatable" target="_blank" rel="external">react-native-animatable</a> to animate. icons.</p>
<h3 id="Nativebase">Nativebase</h3><p>It’s a surprise for me! Just like the bootstrap for html, nativebase gives so much template to build react native front-end. Check <a href="http://nativebase.io/docs/v0.3.0/components" target="_blank" rel="external">this tutorial</a> for more examples.</p>
<h3 id="Webview_render_HTML">Webview render HTML</h3><p>Use <a href="https://github.com/jsdf/react-native-htmlview" target="_blank" rel="external">react-native-htmlview</a> to render HTML-like text, which usually contains HTML tags like <code>&lt;p&gt;</code> and <code>&lt;/br&gt;</code> and so on. In order to directly jump to the original web page, we simple use react-native-webview library.</p>
<h2 id="Data">Data</h2><h3 id="Grab_data_from_RSS">Grab data from RSS</h3><p>Here is a handy website that transforms rss feed into json, and provides a API for that: <a href="http://rss2json.com/" target="_blank" rel="external">http://rss2json.com/</a>. For example, my blog’s rss feed being transformed to json is: <a href="http://rss2json.com/api.json?rss_url=http%3A%2F%2Fchocoluffy.com%2Fatom.xml" target="_blank" rel="external">http://rss2json.com/api.json?rss_url=http%3A%2F%2Fchocoluffy.com%2Fatom.xml</a>. Then using this json file, we can have a much more consistent and clear structure to formatize into RN app.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录了学习React Native过程中一开始的上手项目， 对初学者提供对比参考。<a href="https://github.com/chocoluffy/ReactNativeEveryday/tree/master/Day3SimpleNavigator">Github Source</a></p>]]>
    
    </summary>
    
      <category term="react native" scheme="http://chocoluffy.com/tags/react-native/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VRTO展会游记]]></title>
    <link href="http://chocoluffy.com/2016/06/27/VRTO%E5%B1%95%E4%BC%9A%E6%B8%B8%E8%AE%B0/"/>
    <id>http://chocoluffy.com/2016/06/27/VRTO展会游记/</id>
    <published>2016-06-27T00:49:07.000Z</published>
    <updated>2016-06-28T01:48:11.000Z</updated>
    <content type="html"><![CDATA[<p>记录在VR Toronto展会第一次尝试Oculus和Vive的使用体验。</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f59mz8yt2sj20ww0jhwiy" alt="down hall"></p>
<p>先是有多大Steve Mann教授的开幕panel演讲， 其实内容和上学期ECE516的课程slides重合度非常高， 主要关于教授这四十年左右对VR的研究和总结， 以及他draft的三条关于VR的laws， 更多具体内容和demo可以在课程网页上找到。 </p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f59n0318qmj20vj0ki783" alt="lecture"></p>
<p>我还记得在课上Steve展示的频率可视化手环和水波乐器， 都在昨天和今天的会场展示了， 错过的同学们可以在教授的个人主页上看到更详细的介绍。</p>
<div class="video-container"><br>    <iframe width="560" height="315" src="https://www.youtube.com/v/Z9qiWqRPrcw" frameborder="0" allowfullscreen></iframe><br></div>

<p>接下来是一系列VR相关的演讲和demo展示， 尝试了目前市场比较流行的Oculus和Vive， 有很多游戏和服务行业开发公司都将各自的应用带到了展台， 大致的感受是：Oculus画质暂时比较差， 场景移动快的demo会导致轻微眩晕感， Vive的画质和human interaction相比之下都更加得细腻出色。</p>
<p>但同时不可否认的是， Facebook旗下的Oculus受到更多开发者的青睐， 拥有更多的游戏选择和强大的技术支持, 但最近曝出来的Oculus强制要求某些游戏开发商的优先发行权还是有损企业形象。Sony的VR头盔暂时没有出现在今天的展示中， 但基于PS4成熟市场规模和玩家预期来说， 仍是最值得期待和大规模流行的VR设备。Vive，在我今天的体验之后， 也给我留下了很深刻的印象， 一个三维画画的游戏应用， 见配图， 将手指slide\click\hold的操作融合得很棒， slide换画板， click选择不同的画笔画布装备， hold来画画， 也的确是本场最immersive的应用之一。</p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f5a31m8ag3j20pu0klmzn" alt="demo"></p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f5a30nl323j20qg0mo75v" alt="ada"></p>
<p>苹果也一直既往地选择观望态度， 短期内没有推出的VR设备的计划。微软Hololens作为AR设备， 相比VR， 拥有更大的生活场景应用空间， 今天体验到的Internet of Things， 包括家具电器灯泡的控制， 餐馆点餐是菜单的选择… 这个demo应该是今天最惊艳的展示了， 也感觉这一两年着力布局家居科技环境的苹果也将加入AR的市场。</p>
<div class="video-container"><br>    <iframe width="854" height="480" src="https://www.youtube.com/v/xG3hslceFqo" frameborder="0" allowfullscreen></iframe><br></div>

<p>同时讲座上提及的myo手环， 曾计划是写个应用给朋友庆祝生日的， 结果用户体验实在太差（动作捕捉不准确）， 不得不放弃myo， 目前市场上较实用的motion detection的设备更多时候还是参考大公司的产品风险比较小。</p>
<p>综上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录在VR Toronto展会第一次尝试Oculus和Vive的使用体验。</p>]]>
    
    </summary>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="虚拟现实" scheme="http://chocoluffy.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写给高考三年后自己的一封信]]></title>
    <link href="http://chocoluffy.com/2016/06/11/%E5%86%99%E7%BB%99%E9%AB%98%E8%80%83%E4%B8%89%E5%B9%B4%E5%90%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <id>http://chocoluffy.com/2016/06/11/写给高考三年后自己的一封信/</id>
    <published>2016-06-11T08:49:24.000Z</published>
    <updated>2016-06-25T22:27:42.000Z</updated>
    <content type="html"><![CDATA[<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p>
<a id="more"></a>
<blockquote class="blockquote-center">“One Piece到底存不存在，我不想知道。”</blockquote>

<p><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f4ryvevg44j21fn0cl79q" alt="one piece"></p>
<p>3年前， 我刚结束高考， 坐在爸妈的车上一起从学校回家， 路上没多少车， 很像我当时空空的心。</p>
<p>我是一个很容易有抽离感的人， 和周围的人与声音闹腾久了， 仿佛像一根针戳破了泡泡，我会安静下来。 还记得那天高考最后一门结束之后， 一群家长拥挤了课室， 突然一下子把我推进了陌生的热气腾腾。 然而我已经不记得当时的我送上了多少笑脸， 但我清楚的记得那种从未有过的空旷， 是高考的戛然而止意犹未尽也好， 还是一种抵达终点的疲态彷徨， 我站在那里， 听着最熟悉而陌生的寒暄， 无所适从。直到在人群里瞅见了爸爸妈妈， 我才回过了神， 当时就想一直抱着他们。</p>
<p>太多人的掌声和欢呼让你觉得高考就是终点， 可没有多少人理解你的彷徨和张望。</p>
<p>“好像一下子什么都结束了……”</p>
<p>3年后，或是命运的偶然和眷顾， 我碾转在中山大学， 加州伯克利大学， 并于去年落脚在多伦多大学。 回望高中毕业这几年我走过的脚印， 太多太多的人与事牵扯着我， 震撼着我， 改变着我。 相比现在能够掌握着自己努力的痕迹和方向， “高考”两字对现在的我而言， 更像是翻看儿时日记那般哭笑不得旳嫌弃和惋惜。 嫌弃当时自己那种不能够再真实的空阔无助， 惋惜， 或许能够更早些为热爱的东西付出更多的机会。也正是这份切切实实的想法， 有时候让我发梦：如果让我回去三年前， 看着课桌前傻乎乎的自己， 我会和自己说写什么。</p>
<p>一、</p>
<p>我相信偶然， 不是否定去勤奋、去努力的意义， 不是去反驳人定胜天、铁杵成针的精神， 而是我希望更多的宽容。初中高中大量大量不需要天赋而强调记忆的训练， 中考高考前弥漫的三个月苦学逆袭的故事与激励， 太容易让我们去接受一个线性因果论的世界， 因为我这般这般的“付出”与训练， 我一定能得到即时可见的成果， 而往往成绩也很服气的提高更让我相信， “这条路我没有选错， 只是我还不够努力而已”， “他们的成绩还没有提高， 一定是还不够努力”的幻想。 很难讲这种思路对那个人的高考帮助到底大不大， 但这却是一种很残酷的逻辑。</p>
<p>试想想， 在一个付出就有回报的世界里， 你所有的成功与荣光， 都只与你自己相关， 别人的失手挫折， 都只因为他们付出的不够多； 富人的富， 是天经地义的， 而穷人的穷， 也都无非是他们活该； 善良与同情变得胆怯了， 伸出的援手好像也因为“到底他值不值得我的帮助”的打量而颤抖， 我们生活在这样的世界里， 太容易变得坚硬而自负， 人定胜天不再是面对过程的鼓励而成了面对结果的嚣张。一个失去了尊重和惊喜的世界， 我不喜欢。</p>
<p>我们想要尊重与惊喜， 我们会因此想要理解对方的不同和允许那变幻莫测的运气， 会想起宽容。 不是“如何如何原谅别人的错误”，而是相信自己的任何成就都离不开周遭人的相助与教诲， 都离不开前人的经验和教训， 相信没有那么理所当然。 感觉又像说起了大道理， 可对于一个高中生， 乃至现在许多的成年人过分的自我价值追求， 这最最简单的一条， 却一直不肯承认。</p>
<p>我记得很清楚， 我初高中时候的“努力轨迹”。到初三前一直是吊车尾， 只到发现自己玩的最好的一群小伙伴和自己喜欢的女生都可以毫不费力地进省级重点班， 这成了自己当时努力的理由； 一直喜欢听宣布自己理科成绩的那一刻的掌声和赞叹， 这成了我选择奥数、奥化的理由； 因为老师在作业本上给我写了个“有灵气”， 成了我那三年那门课必须考满分的理由； 因为想要证明我比另一个同学更厉害， 成了我必须保持年纪前列不断去争第一的理由。林林总总的理由， 有笑有泪其中不乏充满了记忆与感动的理由， 只可惜， 没有一个理由是因为我喜欢……</p>
<p>我所谓的成就， 不过是在某学科某考试上考的相对好一点罢了， 可我所付出的， 却是一段“太专注”的冲刺， 以致于根本没来得及想自己的热情和兴趣所在， 而自顾自地认为“我值得一切结果与荣誉”。 就像跑在跑道里的我们， 从来好像都没有质疑过跑道的方向， 而越跑越忘记了自己所属的那个方向， 乃至奔跑的意义。</p>
<p>每个人都有走近舞台中央的时刻， 学会宽容打在自己身上的光，学会理解运气和偶然， 想的清楚别人的扶持与帮助， 更看得清自己究竟属不属于这个舞台， 毕竟这个世界上最简单而粗暴的忽悠， 就是叫你去看着别人跑到哪儿， 你也去那儿。 </p>
<p>二、</p>
<p>没有一个能解决所有问题的答案， 但是可以有一个更倾向改变的角度。</p>
<p>下面这个故事是我在知乎上看到的一个印象很深刻的故事。 2016年普利兹克建筑奖得主Alejandro Aravena在2014年Ted论坛上的讲述他的设计哲学，开篇说道：如果设计有任何力量的话，那就是整合的力量。</p>
<p>事情的起因源于12年前Alejandro曾接到的一个项目，他要为智利北部伊基克市中心非法占据了半公顷土地的100个家庭设计一套社会保障性住房。而得到的预算是1万美元。1万美元的用途，包括买地，建房子，以及建相关基础设施。绝对的资金匮乏让他提出了一个绝妙的方案：“一个普通中产家庭拥有80平方米的住房是可接受的，但如果资金不够，这个家庭可能只好去买40平方米的小房子。如果我们把这个40平方米的小房子，看做是一个80平方米的“好房子的一半”（half of a good house），来建造并提供给这些家庭，给予这些家庭另外40平方米的可拓展空间，那么这无疑鼓励了这些家庭在未来财力足够的时候“扩建”自己的房子，成功拥有一个完整的好房子。”（摘自知乎原文）很惊喜的是， 这些家庭大部分都同意了兴建， 不仅同意， 在主动助力修建工作， 因为未来的另一半也是要他们自己建的， 这是他们自己的房子。每户家庭想到的不再是如何和政府拉锯谈判， 而是对未来自己的房子的憧憬和期待。一个很简单却也更有人情味的角度， “撬动了人们的自发性，我认为，这就是一种“整合”，就是“设计的力量””。</p>
<p>经济学的小伙伴可能很快就看出来了， 这貌似就是所谓的“外部利益内部化”的一个更经典的例子嘛。 小到多人合租房间的打扫卫生， 工作在大公司成为其中一颗齿轮， 大到保护地球生态环境， “搭便车行为”无所不在， “公地悲剧”也不断上演。 非要深究原因的话， 书上说是因为“公共物品产权难以界定”， 我说， 也不过就是当规模大了， 涉及的人多了， 就慢慢失去了归属感罢了。归属感， 一个带着温度的词语。 我不想去深入探讨“拥有”（所谓的“产权”）和“归属”到底区别在哪里， 简单来讲， 你“拥有的”并不一定能带给你“归属”感， 而归属， 自愿付出， 本身就沾着承诺与责任的味道。</p>
<p>“拥有好房子的一半（half of a good house）”这简单的口号没有解决任何资源稀缺的问题， 而只是， 给了伊基克市中心的居民们重新清晰的归属感， 房子是自己未来好房子的一半， 我会认真粉刷， 仔细打扮， 悉心准备装饰那另一半的到来……没有一个能解决所有问题的答案， 但是可以找到一个更加打动的角度， 一个更有人情味儿的角度， 毕竟所有问题最终归根结底都回到人， 而人， 因为曾被温柔相待的归属， 更倾向改变。</p>
<p>类似地， 精致有心旳设计， 真实客观的摄影， 复杂而饱满的戏剧， 这些艺术解决不了大部分现实问题， 却苦勤于人心。 他们努力提出一个角度， 无谓对与错， 更没办法用高中习惯的判分标准参考答案来审判， 往往出其不意， 往往饱受误解， 可也因那更多数的理解和感动而孵育着改变。很难讲艺术的意义究竟是什么， 但如果一定要用一句话来概括， 我想是：</p>
<p>我也会想成为温柔的人， 因为曾被温柔的人那样对待， 深深了解那种被温柔相待的感觉。</p>
<p>或许这就是改变的初衷吧。</p>
<p>三、</p>
<p>“One Piece到底存不存在，我不想知道。”</p>
<p>《海贼王》里面描述过很多不同身世背景的伙伴和路飞一起战斗的精彩剧情， 但对我来说同样难忘的， 还有另一幕， 当乌索普问冥王雷利， “那个独一无二的大秘宝One Piece， 究竟……”， 还没等乌索普说完， 路飞大吼一声， 谁也没有见过路飞这样严肃的表情， “宝藏在哪里我不想知道，连宝藏又没有我也不想知道， 虽然什么都不知道， 但是大家都是这样赌上性命出海的， 要是在这里就被大叔透露了……我就不当海贼了”。</p>
<p>对于终点和意义的讨论从来没有停止过， 而高考， 在其重大的社会责任下背负了太多塑造一生、决定一生的名声， 可就像生命里其他重要的选择一样， 听过掌声， 走过低谷， 我们依旧要继续上路。意义是很私人的东西， 你做不到让别人帮你生活， 也做不到按图索骥去参悟旅行的意义， 希冀的快乐也远远不同于世界上其他任何人。 过早地接受了终点的模样而擦身而过无数或美妙或苦涩却都精彩无比的可能性， 或许正是所谓的“终点”最大的诅咒了吧。</p>
<p>冥王雷利幽幽地问道， “伟大航路的艰险远远超出了你们的想象， 敌人都很强悍， 你办得到吗？统治这片大海。”， 路飞看着雷利， 咧开一个笑容， “我才不要统治呢， 这片大海上最自由的人， 就是海贼王！”</p>
<p>时间仿佛停止在这一刻， 思绪宛若卷入一幕幕电影场景般跳跃， 肃立在舞台的正中央看着灯光慢慢聚拢， 光脚游走在柔和的森林， 再跳入环游世界的海贼船把手臂高高举起……想起了好多好多， 感慨了好多好多， 终于回过神， 才恍然自己有多么幸运。 高中的学习课余生活让我成长了太多， 在省实也让我认识了可以一起撒娇打诨很久很久的朋友。 但同时我也慢慢意识到， 面向高考的教育仿佛无可避免地让我们更容易接受线性因果的世界观， 存在面面俱到的标准答案和一种风光却道听途说的生活。</p>
<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p>
<p>说实话， 在我刚上高中那年级， 脑子里除了跑跑卡丁车， 就是怪物猎人了吧。 日子过得特别慢， 谁会花功夫想这些折腾呢！</p>
<p>虽然一直不擅于文字， 却很庆幸自己还存留着对文字的眷恋。也是想看看和文字里的自己一起成长吧。 </p>
<p>新世相最近一篇关于高考的文章很有意思， 还记得里面开头的一个提问， 过去很多年，我真的从高考中夺回自己的控制权吗？</p>
<p>Yes, finally.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇随笔，记为我对我高中思维的审判。 写给高考结束三年后的自己， 也写给所有刚刚结束高考乃至即将开始高中生活的小伙伴们。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[socket.io开发多人聊天室教程]]></title>
    <link href="http://chocoluffy.com/2016/05/23/socket-io%E5%BC%80%E5%8F%91%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%99%E7%A8%8B/"/>
    <id>http://chocoluffy.com/2016/05/23/socket-io开发多人聊天室教程/</id>
    <published>2016-05-23T14:43:41.000Z</published>
    <updated>2016-06-15T00:41:31.000Z</updated>
    <content type="html"><![CDATA[<p>用socket.io搭配express写的一个多人聊天室应用， 同时借这个机会复习了一下socket及TCP/IP的一些细节知识， 在UI上用jquery， 简洁而快速地完成一些基础前端样式的开发， 开发时用nodemon和browser-sync来辅助开发流程。<a href="http://52.20.64.23/chatroom" target="_blank" rel="external">在线Demo-网页版</a>, <a href="https://github.com/chocoluffy/chatroom" target="_blank" rel="external">github源代码</a>, 欢迎提交bug issue或者pull request~</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/1a5c1f59080e5cc1.png" alt="socket.io"></p>
<h2 id="什么是socket?">什么是socket?</h2><p>socket是对TCP/IP协议的封装， 本身是一个调用接口， 也就是我们常说的API， 用socket可以让程序员更方便的使用TCP/IP协议而已。 </p>
<p>在学习C语言(csc209)的时候大家接触到的socket的接口函数比如<code>create/listen/connect/accept/send/read/write</code>， 实际上正是针对TCP编程的接口， 在课程里我们用C语言来实现TCP最基础的一个socket链接， 监听， 包括server-client之间的通信，同样的， socket这个调用接口也可以用java, python和nodejs任何后端语言来实现， 也会出现在各种各样需要服务器端和客户端通信的应用中。</p>
<p>而什么是TCP呢？</p>
<p>Transmission Control Protocol (TCP) 就是其中发送文本信息的<strong>规则规范</strong>而已。 TCP依赖更底层的函数实现来在网络上传输binary data。 这里和大家介绍telnet\putty这些利用TCP在command line上帮助你发送和接受纯文本消息的应用， 你可以利用telnet来， 比如， 发送消息到google.com：<code>telnet google.com 80</code> 在端口80连接到google.com(80默认给网络请求)。我们当然不会随便发文本消息给google.com， 因为我们知道google.com不会接受随意的， 没有结构的文本请求。 是的， 我们需要一个<strong>标准(protocol)</strong>来规范交流的方式。我们在浏览器输出<a href="http://google.com，" target="_blank" rel="external">http://google.com，</a> 这意味着：</p>
<ul>
<li>在port 80用TCP协议连接google.com的服务器。</li>
<li>请求返回资源“／”（默认资源）。</li>
<li>将请求用http（hypertext transfer protocol）的形式来规范。</li>
</ul>
<h2 id="什么是socket-io?">什么是socket.io?</h2><p>“Socket.IO goes a step beyond just providing an easy-to-use and more robust API on top<br>of web sockets. It also provides the ability to seamlessly use other real-time protocols if WebSockets are not available. For example, it will fall back on JSON long polling in the absence of WebSocket support.” from Rohit Rai</p>
<p>简单来说，socket.io来socket本身的接口函数上再抽象了一层， 让程序员可以专注应用逻辑的开发， 而由socket.io来操作底层的函数调用和优化， 比如有些时候， 由于浏览器的原因不能使用web socket时， 可以默认用long polling来达到同样的效果。</p>
<p>在socket.io出现之前，我们会采用很多的hack来解决一个问题：<strong>怎样在server和client端更有效率地双向传递信息？</strong>比如上文提到的long polling,  client端发送XHR请求， 然后在server端挂住， 直到server收到数据， 就回传数据， 还是比较常见的hack。</p>
<p>直到HTML5的大规模使用， 出现了两种从服务器端推送数据到客户端的新方法， 一个是Server-Sent Events (SSE)， 另一个是今天的主角， 支持双向通信的WebSockets.</p>
<h2 id="怎么用socket-io?">怎么用socket.io?</h2><h3 id="http模块实现">http模块实现</h3><p>下面用一个简单的例子来说明socket的使用， 很明确， 在服务器段当有新的连接的时候， 向客户端发送一个”greeting-from-server”的消息， 同时还监听客户端发来的”greeting-from-client”的事件，将消息打印在console里面。 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plain http's version of server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">	socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line">	fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if using express framework, we can define router easier!</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	fs.readFile(__dirname + <span class="string">'/index.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">		res.writeHead(<span class="number">200</span>);</span><br><span class="line">		res.end(data);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The above code is used for create a server to serve the static index.html file under the current directory. The following part is the main idea of how to use socket.io to construct and listen to events.</span></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on http://localhost:3000'</span>);</span><br><span class="line"></span><br><span class="line">io = socketIO(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">	socket.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">		greeting: <span class="string">'Hello client!'</span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	socket.on(<span class="string">'greeting-from-client'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(msg);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- client side index.html  --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">            <span class="keyword">var</span> socket = io(<span class="string">'http://localhost:3000'</span>);</span><br><span class="line">            socket.on(<span class="string">'greeting-from-server'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.body.appendChild(</span><br><span class="line">                    <span class="built_in">document</span>.createTextNode(message.greeting)</span><br><span class="line">                );</span><br><span class="line">                socket.emit(<span class="string">'greeting-from-client'</span>, &#123;</span><br><span class="line">                    greeting: <span class="string">'Hello Server'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码很简洁。以上是用node原生的http模块来搭建的本地服务器， 还可以尝试使用express这个最负盛名的node框架之一来重新实现一下相同的逻辑。</p>
<h3 id="Express模块实现">Express模块实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express's version of server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express(),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>),</span><br><span class="line">    server, io;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server = http.Server(app);</span><br><span class="line">server.listen(<span class="number">5000</span>);</span><br><span class="line">io = socketIO(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">      greeting: <span class="string">'Hello Client'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  socket.on(<span class="string">'greeting-from-client'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Express is a collection of HTTP utilities and middleware that make it easier to use Node as a web server.</p>
</blockquote>
<p>用<code>var app = express()</code>来创建一个Express应用，将这个Express app当作第一个参数传入HTTP模块得到本地的简易服务器，we told Node that we wanted to use Express as our handler for HTTP requests. 而这个服务器的作用是在接收到对“／”默认资源的请求时， 将index.html文件传回给客户端，也就是我们的浏览器上显示出内容。</p>
<p>Next, we passed the HTTP server directly to the SocketIO method exactly as we would have if we were using a nonExpress HTTP server. Socket.IO took the server instance to listen for new socket connections on it. </p>
<p>其中一个小细节：用 <code>emit</code> 来传输named message, 用 <code>send</code> 来传输a message without name.</p>
<h2 id="多人在线聊天室">多人在线聊天室</h2><p>下面是对以上应用的一个简单拓展。使用一个轮播(broadcasting)的方式， 将客户端传来的消息显示给每一个在线的用户。</p>
<p><a href="https://github.com/chocoluffy/chatroom" target="_blank" rel="external">github源代码    </a></p>
<p><a href="http://52.20.64.23/chatroom" target="_blank" rel="external">在线Demo-网页版</a></p>
<p>在手机上也是可以用的， 不过UI没有专门针对移动端优化， 会有点糗的感觉😭。有bug汇报到Issue呀， 谢谢~</p>
<h3 id="效果图Demo:">效果图Demo:</h3><p>[1] pick a nickname:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/8d0dd106f5f226f4.png" alt="demo-nickname"></p>
<p>[2] chatroom initialization:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/8b9309129959f85e.png" alt="demo-init"></p>
<p>[3] multi users chatting(one in chrome, another in safari):<br><img src="http://ac-TC2Vc5Tu.clouddn.com/4aa537ca52ea8080.png" alt="demo-multusers"></p>
<h3 id="server端源代码">server端源代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A fragment of server.js</span></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on '</span> + port);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = socketIO(server);</span><br><span class="line"><span class="keyword">var</span> sockets = [];</span><br><span class="line"><span class="keyword">var</span> ID2user = &#123;&#125;; <span class="comment">// username </span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">	sockets.push(socket);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> updateUserNum = <span class="function"><span class="keyword">function</span>(<span class="params">skt</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> people = sockets.length === <span class="number">1</span> ? <span class="string">'person'</span> : <span class="string">'people'</span>;</span><br><span class="line">		skt.emit(<span class="string">'greeting-from-server'</span>, &#123;</span><br><span class="line">			greeting: <span class="string">'Welcome! '</span> + sockets.length + <span class="string">' '</span> + people + <span class="string">' online now!'</span></span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	updateUserNum(socket);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// boardcast?!</span></span><br><span class="line">	socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> userlistChanged = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(!ID2user[socket.id])&#123; <span class="comment">// if new user comes in.</span></span><br><span class="line">			<span class="keyword">var</span> profile = &#123;</span><br><span class="line">				username: message.username,</span><br><span class="line">				avatar: message.avatar</span><br><span class="line">			&#125;;</span><br><span class="line">			ID2user[socket.id] = profile;</span><br><span class="line">			userlistChanged = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; sockets.length; i++)&#123;</span><br><span class="line">			sockets[i].emit(<span class="string">'message'</span>, message);</span><br><span class="line">			<span class="keyword">if</span>(userlistChanged)&#123; <span class="comment">// update userlist when new user comes in.</span></span><br><span class="line">				<span class="built_in">console</span>.log(ID2user[socket.id].username + <span class="string">'(id: '</span> + socket.id + <span class="string">' )'</span> + <span class="string">'joins!'</span>);</span><br><span class="line">				sockets[i].emit(<span class="string">'userlist'</span>, ID2user);</span><br><span class="line">				updateUserNum(sockets[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;sockets.length; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sockets[i].id === socket.id)&#123;</span><br><span class="line">				sockets.splice(i, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> usernameOut = ID2user[socket.id].username;</span><br><span class="line">		<span class="keyword">delete</span> ID2user[socket.id]; <span class="comment">// remove user from online users.</span></span><br><span class="line">		<span class="comment">// send to client an updated userlist.</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; sockets.length; i++)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(usernameOut + <span class="string">'(id: '</span> + socket.id + <span class="string">' )'</span> + <span class="string">'leaves...'</span>);</span><br><span class="line">			sockets[i].emit(<span class="string">'userlist'</span>, ID2user);</span><br><span class="line">			updateUserNum(sockets[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"There are "</span> + sockets.length + <span class="string">" active sockets remaining."</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由于我们需要将这个应用放在服务器上看效果， 所以port number就不能一直是本地的localhost了， 需要改成<code>var port = process.env.PORT || 3000;</code>。</p>
<h3 id="达到的效果">达到的效果</h3><ul>
<li>显示同时在线的人数和user list。根据你自己选的nickname在user list上显示。</li>
<li>每当有人加入或者disconnect的时候，更新所有客户端的user list。同时console都会有记录。</li>
<li>每当有客户端发送消息的时候， broadcasting给所有在线用户。</li>
</ul>
<h3 id="TODOs">TODOs</h3><ul>
<li>local cache most frequent online users, to make the message transfer much much more efficient and effective. </li>
<li>support image transfer, which should be quite similar to text message, but rather using binary image data. </li>
<li>introduce animation!! this part should be quite familiar to me but I’s just being lazy……</li>
<li>social media ;)</li>
</ul>
<h3 id="client端源代码">client端源代码</h3><p>下面是部分client端的代码：由于监听了一些事件（毕竟我还是调整了前端的😂）, 所以代码有点长， 下面只显示核心部分：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// part of index.html's script</span><br><span class="line">var socket = io();</span><br><span class="line">socket.on('connect', function()&#123;</span><br><span class="line"></span><br><span class="line">    // ... some codes here ...</span><br><span class="line"></span><br><span class="line">	socket.on('greeting-from-server', function(msg)&#123;</span><br><span class="line">		$('#greeting').empty();</span><br><span class="line">		$('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('headline').text(msg.greeting).appendTo($('#greeting'));</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">    // MAIN IDEA: if message comes, append to right place, and self adjust the view!</span><br><span class="line">	socket.on('message', function(msg)&#123;</span><br><span class="line"></span><br><span class="line">		var container = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').attr('id', 'container');</span><br><span class="line">		var bubble = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('talk-bubble tri-right left-in border');</span><br><span class="line">		var textWrapper = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('talktext').appendTo(bubble);</span><br><span class="line">		$('<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>').html(msg.messageText).appendTo(textWrapper);</span><br><span class="line"></span><br><span class="line">		// append the jquery clone to target destination.</span><br><span class="line">		var nameClone = username2jqy(msg.username);</span><br><span class="line">		var avaClone = avatar2jqy(msg.avatar);</span><br><span class="line"></span><br><span class="line">		avaClone.appendTo(container);</span><br><span class="line">		nameClone.appendTo(container);</span><br><span class="line">		bubble.clone().appendTo(container);</span><br><span class="line">		container.clone().appendTo($('#messages'));</span><br><span class="line"></span><br><span class="line">		$('<span class="tag">&lt;<span class="title">br</span>&gt;</span>').appendTo($('#messages'));</span><br><span class="line"></span><br><span class="line">		// self-adjust scrolling height.</span><br><span class="line">		var msgWrapper = document.getElementById('messages');</span><br><span class="line">		msgWrapper.scrollTop = msgWrapper.scrollHeight;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">    // MAIN IDEA: when user list need to update, do it!</span><br><span class="line">	socket.on('userlist', function(userlist)&#123;</span><br><span class="line">		$('#userlist').empty();</span><br><span class="line">		$('<span class="tag">&lt;<span class="title">h2</span>&gt;</span><span class="tag">&lt;/<span class="title">h2</span>&gt;</span>').text('Online users:').appendTo($('#userlist'));</span><br><span class="line">		Object.keys(userlist).map(function(d)&#123;</span><br><span class="line">			var usrImg = $('<span class="tag">&lt;<span class="title">img</span>&gt;</span><span class="tag">&lt;/<span class="title">img</span>&gt;</span>').attr('src', userlist[d].avatar);</span><br><span class="line">			var usrName = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').text(userlist[d].username).addClass('listname');</span><br><span class="line">			var profileWrapper = $('<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>').addClass('userlistProfile');</span><br><span class="line">			usrImg.appendTo(profileWrapper);</span><br><span class="line">			usrName.appendTo(profileWrapper);</span><br><span class="line">			profileWrapper.appendTo($('#userlist'));</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="背景知识补充">背景知识补充</h2><p>完成一个小demo的开发同样会需要很多边角料信息的补充， 没有人会记得所有javascript各种处理对象的函数， 也没有人需要记得。留个note给自己， 也再以后查纠的之后方便回忆。</p>
<ul>
<li><a href="http://ios.jobbole.com/85230/" target="_blank" rel="external">微信,QQ这类IM app怎么做——谈谈Websocket</a></li>
<li><a href="http://betterexplained.com/articles/a-simple-introduction-to-computer-networking/" target="_blank" rel="external">A Simple Introduction To Computer Networking</a></li>
<li><code>array.splice(i, 1);</code> will remove one item from ith index in that array, namely, in this case, remove the ith item from array.</li>
<li><code>docuemnt.createTextNode(string) \ document.createElement(&#39;div&#39;); \  document.getElementById(&#39;SOMEID&#39;).appendChild(element);</code> are some common DOM objects munipulations example.</li>
<li>refer to this post: <a href="http://stackoverflow.com/questions/8894226/javascript-submit-textbox-on-enter" target="_blank" rel="external">send message by pressing enter</a>, by adding an eventlistener function to message-box, we listent on the keyCode we press, if it is 13(Enter key), then we trigger the message send function.</li>
<li>refer to this post: <a href="http://codepen.io/Founts/pen/gmhcl" target="_blank" rel="external">styling for chat bubble</a></li>
<li>Know how to create DOM elements in jquery: <code>$(&#39;&lt;div&gt;&lt;/div&gt;&#39;).addClass(&#39;headline&#39;).html(msg).appendTo($(&#39;#greeting&#39;));</code></li>
<li>create modal in a visually good-looking way, refer to this post: <a href="https://github.com/kylefox/jquery-modal" target="_blank" rel="external">jquery.modal.js</a></li>
<li>add user a good-looking avatar! <a href="https://github.com/adorableio/avatars-api" target="_blank" rel="external">adorable avatar!</a></li>
<li>change html input focus, refer to this post: <a href="https://api.jquery.com/focus/" target="_blank" rel="external">html input focus</a></li>
<li>auto-adjust the scrolling top to the latest message, refer to this post: <a href="http://stackoverflow.com/questions/15432691/css-overflow-value-for-chat" target="_blank" rel="external">srollTop = scrollHeight</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>用socket.io搭配express写的一个多人聊天室应用， 同时借这个机会复习了一下socket及TCP/IP的一些细节知识， 在UI上用jquery， 简洁而快速地完成一些基础前端样式的开发， 开发时用nodemon和browser-sync来辅助开发流程。<a href="http://52.20.64.23/chatroom">在线Demo-网页版</a>, <a href="https://github.com/chocoluffy/chatroom">github源代码</a>, 欢迎提交bug issue或者pull request~</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://chocoluffy.com/tags/AWS/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发工具库[第一期]-npm script]]></title>
    <link href="http://chocoluffy.com/2016/05/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BA%93-%E7%AC%AC%E4%B8%80%E6%9C%9F-npm-script/"/>
    <id>http://chocoluffy.com/2016/05/15/前端开发工具库-第一期-npm-script/</id>
    <published>2016-05-15T09:48:45.000Z</published>
    <updated>2016-10-24T03:05:23.000Z</updated>
    <content type="html"><![CDATA[<p>在自动构建工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>为什么我们需要自动构建工具？</p>
<p>在前端开发的时候，会遇到很多实际产品开发之外上的需求，比如开发者希望做到“所写即所得”，可以一边在编辑器里面修改和开发代码，浏览器可以同步更新而不需要我们手动去refresh页面； 比如我们希望可以压缩最后的成品代码， 图片资源的大小，让每次浏览器下载所需要的js代码的时间可以更短，或者考虑CDN； 比如我们希望我们写的scss可以适配任何类型的浏览器等等。</p>
<p>很多功能曾经是要开发者手动引入script文件的，但鉴于npm上活跃的开发者将很多需求的module开发并发布出来， 我们可以利用npm这个包管理器来配置使用这些方便的module，在能够达到同样功能的工具里面比如bower, grunt, gulp，我认为对于一个轻量的小项目， 个人项目来说, npm script是最方便的， 最容易上手的。<strong>没有最好的工具， 只有最合适的使用场景。</strong></p>
<p>而今天的主题：在配置工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p>
<p><strong>因为simplicity matters。</strong>没有必要在需要用的时候才去找那些数量有限的grunt, gulp plugins，而直接将node modules拿来用。对于个人开发和维护的小项目， 有没有必要花时间去研究Gruntfile.js怎么去配置， 或者说， 在配置上花的时间相对短期集中开发的时间来说值不值？不是说反对使用grunt, gulp和webpack等工具， 而是我们没有必要拿大炮去打蚊子， 我们想要agile development。 也正是simplicy， 所以才有RoR, meteor等全栈框架的出现来挑战java等较为臃肿的开发流程不是么？</p>
<p>下图是截止至今年1月为止的各平台的插件数量，仍在不断地增加中。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/f247d4b81bd3044a.png" alt="npm script"></p>
<h2 id="什么是npm_script">什么是npm script</h2><p>其实npm script就是希望执行的command的alias， 类似与command line里面的make， 通过提前设置希望执行的命令， 我们可以通过<code>npm run &lt;alias&gt;</code>来执行我们预先设置的命令。 还有一些特别方便的commands比如：</p>
<ul>
<li><code>npm home request</code>， 可以直接跳转到那个module的介绍页面；</li>
<li><code>npm install request --save</code>可以将我们使用的modules以“^”形式保存在package.json文件里面， 这意味着下一次用同一个package.json安装依赖模块时， 没有经过major version jump的模块可以下载到本地项目目录； </li>
<li><code>npm install --production</code>可以安装生产环境的模块， 同<code>NODE_ENV=production npm install</code></li>
</ul>
<h2 id="如何config你的npm_script">如何config你的npm script</h2><p>而目前npm上有很多很棒的module可以直接处理项目， 下面列出来的是我平时自己经常使用的module: </p>
<p>比如: browserfy将文件的各种文件和浏览器同步; postcss和autofixer可以将css文件添加适配各种浏览器的前缀同时进行压缩; js-lint用来检查js文件的各种格式细节; uglify用来压缩js文件的大小; imagemin用来压缩各种图片文件的大小， 在各种大型网站中， 图片的大小占据了大部分。</p>
<h3 id="node－sass">node－sass</h3><p>下面是一些具体使用的例子：比如我们想将sass compile成css。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev node-sass</span><br></pre></td></tr></table></figure>
<p>将<code>node-sass</code>这个module装在developing环境之后，可以直接<code>node-sass --output-style compressed -o dist/css src/scss</code>来将”src/scss“这个文件夹下面的sass文件compile出来并保存在”dist/css“文件夹下面； 或者一个更便捷的做法，是使用npm script：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"scss"</span>: <span class="string">"node-sass --output-style compressed -o dist/css src/scss"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在console里run <code>npm run scss</code>就可以执行这个相同命令了。和makefile的原理和使用习惯可以类比， 只不过使用场景和平台不同。</p>
<h3 id="autoprefixer">autoprefixer</h3><p>同理对上文提到的autoprefixer这个module， <code>npm install --save-dev postcss-cli autoprefixer</code>来安装， 然后配置script：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"autoprefixer"</span>: <span class="string">"postcss -u autoprefixer -r dist/css/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么<code>npm run autoprefixer</code>这个效果就相当于<code>postcss -u autoprefixer --autoprefixer.browsers &#39;&gt; 5%, ie 9&#39; -r dist/css/*</code>。</p>
<h3 id="eslint">eslint</h3><p>类似地还有eslint这个对js文件进行syntax testing的常用module：<code>npm install --save-dev eslint</code>或者使用shortcut：<code>npm i -D eslint</code>, 然后配置package.json的script部分：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"lint"</span>: <span class="string">"eslint src/js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目源代码示例">项目源代码示例</h2><p>一个实战项目的源代码使用在这里和大家分享：</p>
<p>考虑到开发和生产环境的不同，还需要配置不同的环境，这个项目在开发上有浏览器同步更新，语法检查，压缩源文件， 监听端口， s3同步备份的自动化优势， 还引入了前端的jade框架代替html， stylus框架代替css，mocha的testing框架和karma驱动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"npm-scripts-example"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"An example of how to use npm scripts"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"browserify"</span>: <span class="string">"^6.3.2"</span>,</span><br><span class="line">    <span class="string">"hashmark"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"http-server"</span>: <span class="string">"^0.7.3"</span>,</span><br><span class="line">    <span class="string">"jade"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="string">"jshint"</span>: <span class="string">"^2.5.10"</span>,</span><br><span class="line">    <span class="string">"karma"</span>: <span class="string">"^0.12.28"</span>,</span><br><span class="line">    <span class="string">"karma-browserify"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"karma-cli"</span>: <span class="string">"^0.0.4"</span>,</span><br><span class="line">    <span class="string">"karma-mocha"</span>: <span class="string">"^0.1.10"</span>,</span><br><span class="line">    <span class="string">"karma-phantomjs-launcher"</span>: <span class="string">"^0.1.4"</span>,</span><br><span class="line">    <span class="string">"live-reload"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="string">"minifyify"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="string">"nodemon"</span>: <span class="string">"^1.2.1"</span>,</span><br><span class="line">    <span class="string">"opener"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line">    <span class="string">"parallelshell"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"rimraf"</span>: <span class="string">"^2.2.8"</span>,</span><br><span class="line">    <span class="string">"s3-cli"</span>: <span class="string">"^0.11.1"</span>,</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"^0.49.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"clean"</span>: <span class="string">"rimraf dist/*"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"prebuild"</span>: <span class="string">"npm run clean -s"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"npm run build:scripts -s &amp;&amp; npm run build:styles -s &amp;&amp; npm run build:markup -s"</span>,</span><br><span class="line">    <span class="string">"build:scripts"</span>: <span class="string">"browserify -d assets/scripts/main.js -p [minifyify --compressPath . --map main.js.map --output dist/main.js.map] | hashmark -n dist/main.js -s -l 8 -m assets.json 'dist/&#123;name&#125;&#123;hash&#125;&#123;ext&#125;'"</span>,</span><br><span class="line">    <span class="string">"build:styles"</span>: <span class="string">"stylus assets/styles/main.styl -m -o dist/ &amp;&amp; hashmark -s -l 8 -m assets.json dist/main.css 'dist/&#123;name&#125;&#123;hash&#125;&#123;ext&#125;'"</span>,</span><br><span class="line">    <span class="string">"build:markup"</span>: <span class="string">"jade assets/markup/index.jade --obj assets.json -o dist"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"karma start --singleRun"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"watch"</span>: <span class="string">"parallelshell \"npm run watch:test -s\" \"npm run watch:build -s\""</span>,</span><br><span class="line">    <span class="string">"watch:test"</span>: <span class="string">"karma start"</span>,</span><br><span class="line">    <span class="string">"watch:build"</span>: <span class="string">"nodemon -q -w assets/ --ext '.' --exec 'npm run build'"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"open:prod"</span>: <span class="string">"opener http://example.com"</span>,</span><br><span class="line">    <span class="string">"open:stage"</span>: <span class="string">"opener http://staging.example.internal"</span>,</span><br><span class="line">    <span class="string">"open:dev"</span>: <span class="string">"opener http://localhost:9090"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"deploy:prod"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/prod-site/"</span>,</span><br><span class="line">    <span class="string">"deploy:stage"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/stage-site/"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"http-server -p 9090 dist/"</span>,</span><br><span class="line">    <span class="string">"live-reload"</span>: <span class="string">"live-reload --port 9091 dist/"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"npm run open:dev -s &amp;&amp; parallelshell \"npm run live-reload -s\" \"npm run serve -s\" \"npm run watch -s\""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很多时候就是因为准备的工具效率高， 开发者也因此得以集中精力于产品逻辑， 在更短的时间内开发出更好更稳定的产品。</p>
<h2 id="后记小结">后记小结</h2><p>npm script不是没有缺点的，就像我一再强调的，没有最好的工具， 只有最合适的使用场景， 在个人小项目适合的npm script，在大项目， 动辄几十万的前端项目的构建和测试下， npm script会显得特别臃肿和难以维护。 而目前大热的grunt\gulp\webpack也迎来了他们的舞台。下一期，集中介绍grunt和webpack，公司里使用的也是grunt，为什么它会在众多工具中脱颖而出。</p>
<h2 id="参考链接">参考链接</h2><ul>
<li><a href="https://www.zybuluo.com/yangfch3/note/249328" target="_blank" rel="external">用npm搭配脚本执行</a> npm 不仅可以用于模块管理，还可以用于执行脚本。对于多个任务的操作很方便！</li>
<li><a href="https://www.nczonline.net/blog/2016/03/mimicking-npm-script-in-node-js/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+nczonline+%28NCZOnline+-+The+Official+Web+Site+of+Nicholas+C.+Zakas%29" target="_blank" rel="external">Mimicking npm script in Node.js</a> The underlying mechanism of using npm script is that npm modifies the PATH environment variable so that it affects the lookup of executables. Run <code>npm install --save-dev eslint</code>, then do <code>npm run lint</code>, it works because npm script is actually running <code>node_modules/.bin/eslint</code>.</li>
<li><a href="http://gon.to/2015/02/26/gulp-is-awesome-but-do-we-really-need-it/" target="_blank" rel="external">Gulp is awesome, but do we really need it?</a></li>
<li><a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/" target="_blank" rel="external">How to Use npm as a Build Tool</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在自动构建工具grunt\webpack等红噪一时的背景下，为什么我想用npm script而不是grunt和gulp等其他工具?</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[另一种鼓声-读《途客圈》有感]]></title>
    <link href="http://chocoluffy.com/2016/05/13/%E5%8F%A6%E4%B8%80%E7%A7%8D%E9%BC%93%E5%A3%B0-%E8%AF%BB%E3%80%8A%E9%80%94%E5%AE%A2%E5%9C%88%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://chocoluffy.com/2016/05/13/另一种鼓声-读《途客圈》有感/</id>
    <published>2016-05-13T13:45:08.000Z</published>
    <updated>2016-05-27T19:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>“如果你清醒地知道你要去哪儿，脑海中还保留着那份憧憬，那么你就能逢山开路，遇水搭桥，所有的阻碍都将成为一个个里程碑，被踩在你的身后……”</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/7c3aa7a1e64bda62.png" alt="生命不能承受之重"></p>
<h2 id="前言">前言</h2><p>在<a href="http://chocoluffy.com/2016/04/25/%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%EF%BC%8C-%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/">关于创业, 那些不能说的秘密</a>里主要记录了阅读<the hard="" thing="" about="" things="">的阅读手记， 而另一本几乎同时完成的书&lt;途客圈创业记&gt;的阅读记录思考，在这里分享。</the></p>
<p>在一个充斥着来自CEO乃至风险投资人视角的创业回顾的环境下， 一个来自技术合伙人(CTO)的视角显得尤为可贵。 从最早的技术选型， 到带领其它技术人员的开发和维护， 到技术过渡和商业选择， 陈天给了一份很详细和真挚的参考选项。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/6ceefbf6929babac.png" style="display: block; margin: 0 auto;"></p>
<p>每本书， 每个文字对不同的人意义都是不同的。 下面纪录了我在看完这本书之后的想法。</p>
<h2 id="关于创业，那所有无关技术的事">关于创业，那所有无关技术的事</h2><p>一开始不要设置过高的期权池， 期权池的主要目的是未来吸引和留住人才。期权与股权不同，股权代表所有权，期权代表的则是在特定的时间、以特定的价格购买特定所有权的权利，它可被视作是员工与公司之间关于股权买卖的一份合同。行权之后员工获得的股份是普通股。</p>
<h3 id="在创新工场里的打拼">在创新工场里的打拼</h3><p>在和创新工场就入驻细节的交谈中：</p>
<ul>
<li><p>清算优先权</p>
</li>
<li><p>反稀释条款</p>
</li>
</ul>
<p>如何雇佣到最好的人， 的确拥有创新工场这个名字更容易发现更好的技术人员。</p>
<p>nanfang就是通过创新工厂的招聘进来的。同时alex的官方博客和知乎都可以用来获取人才的来源。</p>
<h3 id="技术选型和工具库">技术选型和工具库</h3><p>当时作者使用的是amazon的四台最小免费计算单元， 用4个账号注册的。一台用来跑翻译， 一台跑wordpress， 一台跑toureet.com， 和另一台。 现在国内的云服务可以考虑阿里云。</p>
<p>在UI上要直观和实用。 一定要在第一轮宣传之前完成UI的设计和构架， 毕竟第一轮宣传之后， 往后的宣传的力度和效果都将大大不如之前。</p>
<p>同时也需要考虑的就是域名和注册的问题!!</p>
<p>要把钱花在刀刃上， 要舍得去花钱。app的制作是必须的!!!!!!!!尽管大家使用web的时间很多， 但是下载了一个app就是护城河。</p>
<p><strong>对于一些特别优秀的人， 一定要和他们经常讨论产品的发展方向， 因为对于他们来说， 他们之所以加入你， 已经不是因为技术的吸引力了， 而是因为他的声音很可能在塑造他准备推出的产品， 因为从未有的对产品的掌控力。而这， 也是创业的魅力吧!</strong></p>
<h3 id="市场推广">市场推广</h3><p>历时一个月的推广大赛， 烧了30万（加上员工的工资）， 换来的是一次性的用户， 看热闹的用户， 注册了3万多人， 然而没有什么用。</p>
<p>如果你战略上不是很清晰，你再做什么也是没有用的，<strong>是在用战术性的疲劳掩盖战略上的懒惰</strong>。百场汇不停地在战略层面做一些调整，所以战术上大家不会那么辛苦。一年来，百场汇全公司只有一个人离职。这对初创公司来说是很不容易的。</p>
<h2 id="关于功能的实用和噱头">关于功能的实用和噱头</h2><p>有没有想过如果微信把朋友圈的功能作为每一次打开的初始页面？而不是一直以来的群组或者单聊？首屏一定要放你最最核心的功能， 而社交是最为用户粘性的方式之一， 绝对不能喧宾夺主。或者说， 所有的工具式网站， 都应该考虑围绕那个工具所最最合适的社交场景。</p>
<p>比如微信的工具属性是：即时通讯和群聊， 那么聊天的社交场景就应该是： 让更多的人发现聊天的内容， 也从纯文字转换到图片和视频和直播， 乃至可以让更多的人加入和感受到聊天的这个场景里面。</p>
<p>比如网易云音乐的工具属性是： 发现和享受高品质音乐， 那么找音乐和听音乐的社交场景就应该是： 让更多的人去发现你喜欢和收藏的音乐， 并基于这些音乐进行进一步的交流。而我觉得一个非常非常棒的功能就是， 不仅仅允许用户分享他们自己创作的歌单， 而且允许把他们最常听的那25首歌显示出来。你不会欺骗你自己的耳朵。如果可以把这一栏更突出地显示会更好？！</p>
<h2 id="关于工具和社区的交叠和矛盾">关于工具和社区的交叠和矛盾</h2><p>每一个需求在被解决的时候， 产品是被工具化的， 而希望推广这种解决方案的时候， 产品是被社区化的。 现在大部分围绕工具性产品还是社区性产品的讨论， 如果被抽象出了产品本身要解决的问题的话， 基本都是废话和干扰。 拿两种使用场景和频率比较不同的方向做比较， 比如听音乐和旅游这两个商业方向。 </p>
<p>人们听音乐的两个需求， 在自己疲惫不爽的时候听到自己最喜欢的音乐， 和发现那些不认识却好听的音乐； 当然， 人们还会从分享自己组好的歌单或者评论里面得到分享和反馈的满足，但我认为这种行为是因为社区化带来的，因为在人群中， 所以也想得到人群的温暖和共鸣 ，但这种社会心理的需求我暂不归于听音乐本身的需求。 就拿网易云音乐APP作例子， 其本身在很多细节上做得很棒了， 但是我认为还可以提高的地方：</p>
<p>基于喜欢同一个专辑的乐众的社交兴趣小组。人们对自己喜欢的东西永远都有如数家珍般的热情。</p>
<p>从你不会骗自己的耳朵， 你最最经常听的25首歌。</p>
<p>同样发现别人最最经常听的25首歌。</p>
<p>用户对收集到歌曲的分类的自我重组。 应当支持双向的标记， 一是tag， 二是collection。像管理笔记一样去管理音乐， 同时将任何collection都注重社交化的分享， 像pinterest的理念学习。</p>
<p>评论分为两栏， 一栏是trending， 一栏是历史最热。 trending要像hackernews一样的不断让新事物涌现来代替旧评论， 而历史最热， 则是就硬碰硬的质量。原因？你不会去参加一个高低胜负已经分明的比赛。你之所倚评论， 你总会有被反馈的渴望， 而看见自己的文字被淹没是最最失落的， 哪怕你知道这的确不是最好的文字~</p>
<h2 id="关于期权池">关于期权池</h2><p>以下内容， 来源自知乎。可参考：<a href="http://zhuanlan.zhihu.com/p/20726127" target="_blank" rel="external">知乎专栏</a>, 作者：黄海, 著作权归作者所有。</p>
<p>可能有创业者会问了：我给了员工股份，他3个月以后就跳槽了，我不就亏了。当然不会，首先记住这是股权池，不是股份池。给的是股权，不是直接送股份。所谓股权，就是一定时候，可以以行使价格买入股票，这个行使价格由董事会决定，一般特别低。</p>
<h3 id="有股权的员工和创始人的区别">有股权的员工和创始人的区别</h3><p>你最早的员工可能和你一起度过了创业的全过程，而且还通过股权池获得股权，那你可能会问，那他们算创始人么？</p>
<p>答案是，他们与创始人还是有很大不同的。首先，如果他们不行使权利，他们甚至都不算是股东，话语权当然不一样。另外创始人开始都是、没有工资，甚至自己就是投资人，承担了所有的风险。员工就很不一样，依然是雇佣关系，除了失业风险较大，同时劳资可能相对低，但这些都是个人风险，而不是企业风险。所以还是有很大区别的。</p>
<p>越迟加入公司的员工需要冒的风险越低。</p>
<p>创始人应该最终拿整个公司大约50%的股份。首层下面的5层员工的每一层最终都分别分到大约10%的公司股份，每一层的员工都将平分这10%的股份。</p>
<p>现在，你搞定了一个公平的份股系统，但还有一个重要的原则：你必须执行“股份绑定”(vesting)。股份绑定期最好是 4 到 5 年。任何人都必须在公司做够起码 1 年才可持有股份（包括创始人）。好的股份绑定计划一般是头一年给 25%，然后接下来每个月落实 2%。否则，你的合作创始人将加入公司 3 个星期后跑掉，然后 7 年后又出现，并声称他拥有公司的 25% 的股份。</p>
<p>没有“股份绑定”条款，你派股份给任何人都是不靠谱的！</p>
<p>没有执行“股份绑定”是极其普遍的现象，后果可以十分严重。你看到有些公司的 3 个创始人没日没夜地工作了 5 年，然后你发现有些混蛋加入后 2 个星期就离开，这混蛋还以为他仍然拥有公司 25% 的股份，就因为他工作过的那 2 个星期。</p>
<p>好了，让我们清理一下整个设计蓝图中没搞定的小问题。</p>
<p>如果你的公司融资了，股份如何分割？</p>
<p>投资可以来自任何方向，一个天使投资人，一个风险投资公司，或者是某人的老爸。基本上，回答很简单：</p>
<p>新的投资将“稀释”所有人的股份。</p>
<p>千万不要用分配股权来解决这些问题。</p>
<p>其实，你只需要针对每位创始人拿的工资做好记帐：不拿工资创始人就给 她记着工资“欠条”。当公司有了足够现金，就根据这个工资欠条补发工资给她。接下来的几年中，当公司现金收入逐步增加，或者当完成第一轮风险投资后，你可 以给每一位创始人补发工资，以确保每一位创始人都可从公司得到完全一样的工资收入。</p>
<h3 id="创业构想提出者应该多拿股份吗？">创业构想提出者应该多拿股份吗？</h3><p>不拿。构想基本上是不值钱的。仅仅因为提出创业构想就获得更多股 权，因此导致纷争是不值得的。如果你们当中有人首先提出的创业构想，但你们都同时辞工并同时开始创业，你们应该拿同等的股份。为公司工作才是创造价值的原 因，而你洗澡的时候突发奇想的“创业点子”根本不值什么钱。</p>
<h3 id="创始人不全职投入工作？">创始人不全职投入工作？</h3><p>那么，他（们）就不能算是“创始人”。在我的概念中，如果 一个人不全职投入公司的工作就不能算是创始人。任何边干着他们其它的全职工作边帮公司干活的人只能拿工资或者工资“欠条”，但是不要给股份。如果这个“创 始人”一直干着某份全职工作直到公司拿到风投，然后辞工全职过来公司干活，他（们）和第一批员工相比好不了多少，毕竟他们并没有冒其他创始人一样的风险。</p>
<h3 id="如果有人给公司提供有价值的东西？">如果有人给公司提供有价值的东西？</h3><p>比如提供了设备， 专利或者是域名。</p>
<p>很好啊。按这些东西的价值支付现金或开个“欠条”咯，别给股份。你准确算一下他给公司带来的那台电脑的价值，或者他们自带的某个聪明的字处理专利的价格，给他们写下欠条，公司有钱后再偿还即可。在创业初期就用股权来购买某些公司需要的东西将导致不平等，纷争和不公平。</p>
<p><strong>再重复一遍!! 用欠条， 而不是股份解决问题!!!!解决大部分的资金纷争和各种帮助!!</strong></p>
<p>今天买来的用户，明天还是不会成为你的品牌用户。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>“如果你清醒地知道你要去哪儿，脑海中还保留着那份憧憬，那么你就能逢山开路，遇水搭桥，所有的阻碍都将成为一个个里程碑，被踩在你的身后……”</p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="商业评论" scheme="http://chocoluffy.com/tags/%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular入门-module和service]]></title>
    <link href="http://chocoluffy.com/2016/05/12/Angular%E5%85%A5%E9%97%A8-module%E5%92%8Cservice/"/>
    <id>http://chocoluffy.com/2016/05/12/Angular入门-module和service/</id>
    <published>2016-05-12T14:43:51.000Z</published>
    <updated>2016-05-27T19:03:20.000Z</updated>
    <content type="html"><![CDATA[<p>自己学习angular时候记录的学习笔记，这一篇主要讨论module和service。</p>
<a id="more"></a>
<h2 id="How_to_define_a_module?">How to define a module?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define a module</span></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>,</span><br><span class="line">    [<span class="string">'notesApp.ui'</span>, <span class="string">'thirdCompany.fusioncharts'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// look up a module.</span></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>);</span><br></pre></td></tr></table></figure>
<p>Also, make sure the file that defines the module is loaded first.</p>
<p>After defining the module, we use Angular to use these modules to bootstrap the application. <code>ng-app</code> takes an optional argument, the name of the modulr to load.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello AngularJS<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">      Hello &#123; &#123; 1 + 1 &#125; &#125;nd time AngularJS</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, []); </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Controller_in_Angular">Controller in Angular</h2><ul>
<li>fetching data from server to UI.</li>
<li>presentation logic.</li>
<li>user interaction, what will happen when user clicks something. </li>
</ul>
<p>An AngularJS controller is almost always directly linked to a view or HTML. We will <strong>never have a controller that is not used in the UI</strong> (that kind of business logic goes into services).</p>
<h3 id="HTML_code">HTML code</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, []) .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// Controller-specific code goes here</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'MainCtrl has been created'</span>);</span><br><span class="line">        &#125;]);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above code define a module that depends on nothing, and a controller and its dependencies in the second argument, an array(the last argument in that array is the actual function itself).</p>
<p>We also introduce a new directive, ng-controller. This is used to tell AngularJS to go instantiate an instance of the controller with the given name, and attach it to the DOM element. In this case, it would load MainCtrl, which would end up printing the console.log() statement.</p>
<h3 id="Angular_code">Angular code</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Notes App<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as ctrl"</span>&gt;</span></span><br><span class="line">      &#123; &#123; ctrl.helloMsg &#125; &#125; AngularJS.</span><br><span class="line">      <span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">      &#123; &#123; ctrl.goodbyeMsg &#125; &#125; AngularJS</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.helloMsg = <span class="string">'Hello '</span>;</span><br><span class="line">    <span class="keyword">var</span> goodbyeMsg = <span class="string">'Goodbye '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The reason why it only shows the the hello message it that: We <strong>defined the variable helloMsg on the controller’s instance</strong> (using the “this” keyword, and it is how we expose the data from controller to front-end UI), and the variable goodbyeMsg as a local inner variable in the controller’s in‐ stance (using the var keyword).</p>
<p>By using <code>ng-controller</code>, it allows us to associate an instance of controller with a UI element, in this case, the <body> tag.</body></p>
<p>“This” in javascipt, since it will be easily modified by whoever call the function, which causes the case that “this” inside and outside the function(the asychcronous function) may refer to two different objects. Thus, using a proxy variable will help!! Since with the help of the closure, that proxy varibale will always stay the same(pointing to “this”) inside the function.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> &#123; &#123; note.label &#125; &#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"status"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.done"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The two methods appear above are the same effect, but we recommend the second way, since the second one will be replaced before the the first one. </p>
<h2 id="Angular’s_working_flow">Angular’s working flow</h2><p>After the entire HTML is loaded, angular.js starts to find the <code>ng-app</code> directive, then using that directive, it looks for the angular modules defined and attached to that DOM element. </p>
<p>Then it starts to find other directive and binding elements inside the range. Every it meets <code>ng-controller</code> or <code>ng-repeat</code>, it creates a scope for that part of element. <strong>scopr is the context of that element</strong>, and it dictates what each DOM has access to in terms of functions, variables and so on.</p>
<p>Angular also adds <strong>watcher and listeners</strong> on HTML’s DOM element.</p>
<p>The way angular update the UI, only happens for a certain events including XHR, server calls, page loads and user interaction such clicks and type.</p>
<h3 id="what_is_XHR?">what is XHR?</h3><p>XMLHttpRequest (XHR) is an API available to web browser scripting languages such as JavaScript. It is used to send HTTP or HTTPS requests to a web server and load the server response data back into the script.</p>
<p>Data from the response can be used to alter the current document in the browser window without loading a new web page, and despite the name of the API, this data can be in the form of not only XML, but also JSON, HTML or plain text.</p>
<p>Ajax depends heavily on XHR.</p>
<h2 id="More_directive">More directive</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span> <span class="attribute">ng-class</span>=<span class="value">"ctrl.getNoteClass(note.done)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> &#123; &#123; note.label &#125; &#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"assignee"</span> <span class="attribute">ng-show</span>=<span class="value">"note.assignee"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.assignee"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.getNoteClass = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    done: status,</span><br><span class="line">    pending: !status</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>ng-show</code> and <code>ng-hide</code> can help display or hide the DOM element. <code>ng-class</code> will add class to DOM element depending on the [1] if it is string [2] it is a json object, assign the key by the value of that key. <code>ng-switch on=&quot;&lt;some variable value in scopr&gt;&quot;</code> with <code>ng-switch-when=&quot;&lt;the conditional value of that variable&gt;&quot;</code> will create the if-else effect directly in html.</p>
<h2 id="Testing_in_Angularjs">Testing in Angularjs</h2><h3 id="Test_Runner_Versus_Testing_Framework">Test Runner Versus Testing Framework</h3><p>We have often noticed that developers can sometimes get confused between the test runner and the testing framework. This could be because the same library often handles both responsibilities.</p>
<p>When working with JS (and AngularJS), we have two separate tools/ libraries for each purpose. Karma, which is the test runner, is solely responsible for finding all the unit tests in our codebase, opening browsers, running the tests in them, and capturing results. It does not care what language or framework we use for writing the tests; it sim‐ ply runs them.</p>
<p>Jasmine is the testing framework we will use. Jasmine defines the syntax with which we write our tests, the APIs, and the way we write our assertions. It is possible to not use Jasmine, and instead use something like mocha or some other framework to write tests for AngularJS.</p>
<h2 id="Model_in_angular">Model in angular</h2><p>The <code>ng-bind</code> and “{ {  } }” we see in the above example demonstrates the one-way data-binding in angular, to use two-way data-binding, we opt for <code>ng-model</code>. As expected, such functionality is heavily used in user form.</p>
<h2 id="Angular’s_service">Angular’s service</h2><p>service refers to reuseable api that can be shared across the applications. One obvious difference between controllers and services is <strong>services are independent of views</strong>, while controllers drives UI.  </p>
<h3 id="Dependency_injection">Dependency injection</h3><p><strong>Dependency injection is a concept that started more on the server side.</strong> Dependency injection states that instead of creating an instance of the dependent service when we need it, the class or function should ask for it instead and the “injector” will be responsible for figuring out how to create it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Without Dependency Injection</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDashboardData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $http = <span class="keyword">new</span> HttpService();</span><br><span class="line">  <span class="keyword">return</span> $http.get(<span class="string">'my/url'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// With Dependency Injection</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDashboardData</span>(<span class="params">$http</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $http.get(<span class="string">'my/url'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The two probable ways to write service and why the latter is better? In the first example, we use “new” keyword, we have new instance everytime we use service while <strong>service in angular is singletons for the scope of our application, </strong> and two controllers ask for service A will get the vary same instance!</p>
<p>To use built-in services, we should remember that the built-in services are prefixed with “<code>$</code>“ sign like “<code>$log</code>“, “<code>$http</code>“ and so on.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myModule.controller(<span class="string">"MainCtrl"</span>, [<span class="string">"$log"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$log</span>) </span>&#123;&#125;]);</span><br><span class="line"></span><br><span class="line">myModule.controller(<span class="string">"MainCtrl"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$log</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>And here are the two ways we usually inject services, but why we prefer the former one, the one with safe style of dependency injection. </p>
<p>Because of the “uglify” procedure. During the uglifing process, the variable will be shortened to some random string, while at that time, we won’t be able to tell which service it is using! Also, since the “uglify” won’t change string constant, it will help to identify which service we are using. </p>
<p>Why we call “injection”? because the way we use those services like <code>myModule.controller(&quot;MainCtrl&quot;, [&quot;$log&quot;, &quot;$window&quot;, function($l, $w) {}]);</code> is similar to injecting those services for the function to use. </p>
<h3 id="Some_common_services">Some common services</h3><h4 id="$location">$location</h4><p>The <code>$location</code> service in AngularJS allows us to interact with the URL in the browser bar, and get and manipulate its value. Any changes made to the <code>$location</code> service get reflected in the browser, and any changes in the browser are im‐ mediately captured in the <code>$location</code> service. The <code>$location</code> service has the fol‐ lowing functions, which allow us to work with the URL:</p>
<ul>
<li>absUrl. A getter that gives us the absolute URL in the browser (called <code>$location</code>. absUrl()).</li>
<li>url. A getter and setter that gets or sets the URL. If we give it an argument, it will set the URL; otherwise, it will return the URL as a string.</li>
<li>path. Again, a getter and setter that sets the path of the URL. Automatically adds the forward slash at the beginning. So <code>$location.path()</code> would give us the current path of the application, and <code>$location.path(&quot;/new&quot;)</code> would set the path to /new.</li>
<li>search. Sets or gets the search or query string of the current URL. Calling <code>$location.search()</code> without any arguments returns the search parameter as an ob‐ ject. Calling <code>$location.search(&quot;test&quot;)</code> removes the search parameter from the URL, and calling <code>$location.search(&quot;test&quot;, &quot;abc&quot;);</code> sets the search parameter test to abc.</li>
</ul>
<h4 id="$http">$http</h4><p>We will deal with <code>$http</code> extensively in Chapter 6, but it is the core AngularJS service used to make XHR requests to the server from the application. Using the <code>$http</code> service, we can make GET and POST requests, set the headers and caching, and deal with server responses and failures.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.tab = <span class="string">'first'</span>;</span><br><span class="line">    self.open = <span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">      self.tab = tab;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;])</span><br><span class="line">  .controller(<span class="string">'SubCtrl'</span>, [<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ItemService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>; self.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ItemService.list(); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    self.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ItemService.add(&#123;</span><br><span class="line">        id: self.list().length + <span class="number">1</span>,</span><br><span class="line">        label: <span class="string">'Item '</span> + self.list().length</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// we created ItemService using angular's module function: factory. </span></span><br><span class="line">  .factory(<span class="string">'ItemService'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> items = [</span><br><span class="line">      &#123;id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>&#125;,</span><br><span class="line">      &#123;id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items; </span><br><span class="line">      &#125;,</span><br><span class="line">      add: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        items.push(item);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>The point in the above example is that if we add one more item in one of the tabs, we can also see that item in the other tab, because the itemService instance in both tabs are the same. To summerize:</p>
<p>AngularJS guarantees the following:</p>
<ul>
<li>The service will be lazily instantiated. The very first time a controller, service, or directive asks for the service, it will be created.</li>
<li>The service definition function will be called once, and the instance stored. Every caller of this service will get this same, singleton instance handed to them.</li>
</ul>
<h3 id="Factory,_provider_and_service">Factory, provider and service</h3><p><strong>There are several ways to defining a service: factory, provider and service.</strong></p>
<p>we use “factory” if we define the service in a more functional way, like in the previous example, we return an object that contains functions; or we can use “service” if we define the service in a classic class\OO way, which doesn’t return anything. </p>
<p>An example of using “serive” is followed:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ItemService</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [</span><br><span class="line">        &#123;id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>&#125;,</span><br><span class="line">        &#123;id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>&#125;</span><br><span class="line">      ];</span><br><span class="line">  <span class="keyword">this</span>.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        items.push(item);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .service(<span class="string">'ItemService'</span>, [ItemService])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.tab = <span class="string">'first'</span>; self.open = <span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">          self.tab = tab;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;])</span><br><span class="line">  .controller(<span class="string">'SubCtrl'</span>, [<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ItemService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>; self.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ItemService.list(); </span><br><span class="line">    &#125;;</span><br><span class="line">    self.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ItemService.add(&#123;</span><br><span class="line">            id: self.list().length + <span class="number">1</span>,</span><br><span class="line">            label: <span class="string">'Item '</span> + self.list().length</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="Communication_with_server">Communication with server</h3><p><code>$http</code> is a core AngularJS service that allows us to communicate with server endpoints using XHR. Like XHR such tedious task, we usually instantiate a XMLHttpRequest Object and read the response, check the error codes and so on, or using jquery’s <code>$.ajax</code> syntax. </p>
<p>Also, it follows the Promise interface.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'resourceApp'</span>, [<span class="string">'ngResource'</span>])</span><br><span class="line">    .factory(<span class="string">'ProjectService'</span>, [<span class="string">'$resource'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$resource</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $resource(<span class="string">'/api/project/:id'</span>); </span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure>
<p><strong>use <code>ngResource</code> to handle RESTful API </strong> as it will make it extremely easy to send the “GET”\”POST” request to the server. In the above example, we produce a service called “ProjectService”, which depends on the built-in module called “<code>$resource</code>“, which wraps the RESTful endpoint to make our life easier as we can then use:</p>
<ul>
<li>ProjectService.query() to get a list of projects.</li>
<li>ProjectService.save({id: 15}, projectObj) to update a project with ID 15.</li>
<li>ProjectService.get({id: 19}) to get an individual project with ID 19.</li>
</ul>
<p>The following is a full-fledged example, showing how to use <code>ngResource</code> in front end to cooperate with the back end.</p>
<div style="text-align:center" markdown="1"><br>  <iframe src="http://angular-example-dev.us-east-1.elasticbeanstalk.com/http-post-example.html" width="100%" height="500"><br>    <p>Your browser does not support iframes.</p><br>  </iframe><br></div>

<p>The source code is listed as followed:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js (Express 4.0)</span></span><br><span class="line"><span class="keyword">var</span> express        = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> morgan         = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser     = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"><span class="keyword">var</span> app            = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>)); <span class="comment">// this line is important as we will serve those html file directly in screen as option, in those html front-end example, we will use angular's ngResource to create http request for the backend of this server.js (the endpoint we just created using express's router).</span></span><br><span class="line">app.use(morgan(<span class="string">'dev'</span>)); 					<span class="comment">// log every request to the console</span></span><br><span class="line">app.use(bodyParser()); 						<span class="comment">// pull information from html in POST</span></span><br><span class="line">app.use(methodOverride()); 					<span class="comment">// simulate DELETE and PUT</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = [</span><br><span class="line">  &#123;id: <span class="number">1</span>, label: <span class="string">'First Note'</span>, author: <span class="string">'Shyam'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">2</span>, label: <span class="string">'Second Note'</span>, author: <span class="string">'Brad'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">3</span>, label: <span class="string">'Middle Note'</span>, author: <span class="string">'Someone'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">4</span>, label: <span class="string">'Last Note'</span>, author: <span class="string">'Shyam'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">5</span>, label: <span class="string">'Really the last Note'</span>, author: <span class="string">'Shyam'</span>&#125;</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> lastId = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/note'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(notes);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">'/note'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> note = req.body;</span><br><span class="line">  note.id = lastId; <span class="comment">// An smart way to keep track of the last id.</span></span><br><span class="line">  lastId++;</span><br><span class="line">  notes.push(note);</span><br><span class="line">  res.send(note);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/note/:id/done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> noteId = req.params.id;</span><br><span class="line">  <span class="keyword">var</span> note = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; notes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes[i].id == req.params.id) &#123;</span><br><span class="line">      note = notes[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  note.label = <span class="string">'Done - '</span> + note.label;</span><br><span class="line">  res.send(notes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/note/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; notes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes[i].id == req.params.id) &#123;</span><br><span class="line">      res.send(notes[i]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(&#123;msg: <span class="string">'Note not found'</span>&#125;, <span class="number">404</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/note/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; notes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes[i].id == req.params.id) &#123;</span><br><span class="line">      notes[i] = req.body;</span><br><span class="line">      notes[i].id = req.params.id;</span><br><span class="line">      res.send(notes[i]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(&#123;msg: <span class="string">'Note not found'</span>&#125;, <span class="number">404</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'API LOGIN FOR '</span>, req.body);</span><br><span class="line">  res.send(&#123;msg: <span class="string">'Login successful for '</span> + req.body.username&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, router);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Open http://localhost:8000 to access the files now'</span>); <span class="comment">// shoutout to the user</span></span><br></pre></td></tr></table></figure>
<p>And the front-end part code is:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- File: chapter6/public/http-post-example.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>HTTP Post Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">    <span class="class">.item</span> <span class="rules">&#123;</span><br><span class="line">      <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello Servers!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"todo in mainCtrl.items"</span></span><br><span class="line">       <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"todo.label"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>- by <span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"todo.author"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"todo.messege"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">name</span>=<span class="value">"addForm"</span></span><br><span class="line">          <span class="attribute">ng-submit</span>=<span class="value">"mainCtrl.add()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span></span><br><span class="line">             <span class="attribute">placeholder</span>=<span class="value">"Label"</span></span><br><span class="line">             <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.newTodo.label"</span></span><br><span class="line">             <span class="attribute">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span></span><br><span class="line">             <span class="attribute">placeholder</span>=<span class="value">"Author"</span></span><br><span class="line">             <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.newTodo.author"</span></span><br><span class="line">             <span class="attribute">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">placeholder</span>=<span class="value">"messege"</span> <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.newTodo.messege"</span> <span class="attribute">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span></span><br><span class="line">             <span class="attribute">value</span>=<span class="value">"Add"</span></span><br><span class="line">             <span class="attribute">ng-disabled</span>=<span class="value">"addForm.$invalid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span></span><br><span class="line">  <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.11/angular.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">  angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">    .controller(<span class="string">'MainCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      self.items = [];</span><br><span class="line">      self.newTodo = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> fetchTodos = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/note'</span>).then(</span><br><span class="line">            <span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">              self.items = response.data; <span class="comment">// set the items to be the return data.</span></span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span><span class="params">(errResponse)</span> </span>&#123;</span><br><span class="line">              console.error(<span class="string">'Error while fetching notes'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      fetchTodos();</span><br><span class="line"></span><br><span class="line">      self.add = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $http.post(<span class="string">'/api/note'</span>, self.newTodo)</span><br><span class="line">            .then(fetchTodos) <span class="comment">// update items.</span></span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">              self.newTodo = &#123;&#125;; <span class="comment">// clear the form.</span></span><br><span class="line">            &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;]);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="$http_in_detail">$http in detail</h3><p>Promise-style syntax.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'notesApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'MainCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.items = [];</span><br><span class="line">    $http.get(<span class="string">'/api/note'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      self.items = response.data;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">errResponse</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">'Error while fetching notes'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>why Promise is better? try thinking about a case when we have to make 3 http request in a row, when the latter ones will depend on the information from the first ones. If using callbacks, we will need to nest them all together!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$http.get(<span class="string">'/api/server-config'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">configResponse</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/api/'</span> + configResponse.data.USER_END_POINT);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">userResponse</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/api/'</span> + userResponse.data.id + <span class="string">'/items'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">itemResponse</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// Display items here</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Common error handling</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Additional_information">Additional information</h2><h3 id="difference_between_Promise_and_callback_in_js?">difference between Promise and callback in js?</h3><p>As for their effect, they are pretty like the same in terms of being asynchronous while Promise’s syntax looks far more clear than nested callbacks.</p>
<p>Promises provide a more succinct and clear way of representing sequential asynchronous operations in javascript. They are effectively a different syntax for achieving the same effect as callbacks. The advantage is increased readability. Something like this</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aAsync()</span><br><span class="line">  .then(bAsync)</span><br><span class="line">  .then(cAsync)</span><br><span class="line">  .done(finish);</span><br><span class="line"><span class="comment">// Promise is much more readable then the equivalent of passing each of those individual functions as callbacks, like:</span></span><br><span class="line"></span><br><span class="line">Async(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bAsync(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cAsync(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            finish()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>简单来说， Promise就是syntactic sugar。Everything that can be written in Promise can be written in nested callbacks.</p>
<h3 id="difference_between_websocket_and_RESTful_API?">difference between websocket and RESTful API?</h3><p>It really depends on the context, whether it requires less interaction like reading a blog, or requires time browsing; or it requires rich interaction and messege sending. For the former, close the connection during reading or browsing may actually save resources, which is exactly what HTTP does, while the latter one calls for websocket!!</p>
<p><strong>HTTP is a pull service, while websocket is bidirectional.</strong></p>
<p>参考<a href="https://www.pubnub.com/blog/2015-01-05-websockets-vs-rest-api-understanding-the-difference/" target="_blank" rel="external">这篇博客</a>介绍得非常详细!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己学习angular时候记录的学习笔记，这一篇主要讨论module和service。</p>]]>
    
    </summary>
    
      <category term="angularjs" scheme="http://chocoluffy.com/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一派胡言[第三期]-民主的不满]]></title>
    <link href="http://chocoluffy.com/2016/05/07/%E4%B8%80%E6%B4%BE%E8%83%A1%E8%A8%80-%E7%AC%AC%E4%B8%89%E6%9C%9F-%E6%B0%91%E4%B8%BB%E7%9A%84%E4%B8%8D%E6%BB%A1/"/>
    <id>http://chocoluffy.com/2016/05/07/一派胡言-第三期-民主的不满/</id>
    <published>2016-05-07T13:07:37.000Z</published>
    <updated>2016-05-12T18:12:40.000Z</updated>
    <content type="html"><![CDATA[<p>我不清楚我的选择会是什么， 但这并不是我拒绝去看这个问题的理由， 或许在相信他们针锋相对的背后， 就是我的立场。</p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/772fc5772b052551.jpeg" alt="flower"></div>

<p>自由， 就在于人们选择他们价值与目标的能力。</p>
<p>我们在政治生活中公民的或者塑造性的一面在很大程度上， 已经让位于自由主义。 而这正是我们现在参与政治活动的困境， 政治， 或者说， 公共哲学， 是否应该具有塑造性。</p>
<p>古代的政治理论， 比如亚里士多德， 认为政治的目标就是培养德行和达到某种的善。而这种达到某种善的观点， 在现在非常容易被反驳， 我们很容易说， 这是价值判断， 什么是善呢？什么是你认为的善的呢？先抛开价值判断的这种做法来说， 毕竟如果在情愿对一件事， 一种态度深入了解之前就放弃了解它的机会的话， 我们会错过很宝贵的东西。回到这种良善的想法， 其实这种观念自然地会发展出一种社会契约论， 而这个契约的目的正是保证人们往那种善的方向发展。它要求人们需要有对公共事务的知识， 归属感， 对集体的关系， 和共同道德的维系， 一种公民的参与感（相比于现在的自由主义）。</p>
<p>对一个共同方向的认可， 意味着牺牲某些个人意愿。这是我们都能想到的， 而这种取舍， 或许就是其中一个定义了自由主义和上述共和主义的区别之一。自由主义的宣扬者会说， 政治理论不是某种特定的良善生活观念， 而是坚持宽容、公正的程序以及尊重个人权利， 从各种美国最高法院的判决案例我们也能看出一些倾向性， 自由言论的权利是被美国人民镌刻在心的一种inborn权利， 法官对任何有可能伤害到这种自由的嗅觉是异常灵敏， 或许也是缘因美国人心里对大政府天生的反感。</p>
<p>我们能不能用之前所说的价值判断这种说法， 来指出共和主义的问题而支持自由主义呢？ 其实仔细想想， 这种价值判断的论断核心是相对主义。 相对主义的一个明显的标志就是， 不去主张什么， 而是变现为质问“谁来判断？谁来决定？”。 他们会问， 什么是良善？什么是高雅和污秽？ 然而我们也可由此问回他们“什么才是他们口中的宽容、自由和公平呢？”。以相对主义来为自由主义辩护根本就算不上是一种辩护。</p>
<p>但仔细去追究自由主义和共和主义， 我们会发现一个经常提出的问题， 权利和善哪个更重要？这里的善， 我们可以想为是一种道德上的义务， 和认同。我们究竟是一副无负荷自我（the unencumbered self）的自由主义形象, 还是为我们家庭、民族、文化的身份所赋予的目标所束缚？在很多情况下， 也正是这些束缚带给我们困境和痛苦。</p>
<p>举一个栗子， 内战前的罗伯特李大将军， 身为联邦军队的一名高级将领， 李将军反对分裂， 然后再战争迫近的时候， 他认为他对弗吉尼亚州的责任超过了他对联邦的责任， 于是他毅然会到家乡， 和他的家乡人民共患难。一个让人心酸的困境。如果我们认为，与自己人民站在一起的召唤是一种道德要求而不是情感表达的话， 这正是印证了前文关于良善， 关于道德义务上的困境。相反， 一个自由主义者， 他们没有这样子的束缚， 他们只为他们选择去承担的责任所约束， 也只去承担他们选择去承担的部分。仔细想想， 我们其实常常崇敬这些像李将军一样的人，不一定是因为他们做出的选择， 而是因为他们的考虑所反映的特质－－作为能够反思自身处境的存在者， 看清楚自己的生命处境并担当起来， 自己深深卷入其中的特定生活对自己有所要求， 而自己又意识到这种生活的特殊性， 也就是说意识到存在更加广阔的世界， 另外的生活方式。</p>
<p>书摘 摘自《民主的不满》</p>
<p>2015.7.26</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我不清楚我的选择会是什么， 但这并不是我拒绝去看这个问题的理由， 或许在相信他们针锋相对的背后， 就是我的立场。</p>]]>
    
    </summary>
    
      <category term="公众号文章" scheme="http://chocoluffy.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="社会人物" scheme="http://chocoluffy.com/tags/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E7%89%A9/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AWS elastic beanstalk使用体验]]></title>
    <link href="http://chocoluffy.com/2016/05/04/AWS-elastic-beanstalk%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>http://chocoluffy.com/2016/05/04/AWS-elastic-beanstalk使用体验/</id>
    <published>2016-05-04T13:03:58.000Z</published>
    <updated>2016-05-13T17:55:01.000Z</updated>
    <content type="html"><![CDATA[<p>本文对目前市面上的主流Paas(platform as a service)提供商进行了比较， 比如heroku和amazon家的新星elastic beanstalk。并以一个nodejs爬虫的实例部署在了eb的服务器上。很多关于服务器端的概念也因此理清了， 比如reverse proxy server, dynamic IP addressing和后端的一些配置。也在文章中做个小结， 分享给感兴趣的大家。</p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/de08e7610183200c.png" alt="aws"></div>

<h2 id="概览">概览</h2><p>将之前用nodejs写的对<a href="https://cnodejs.org/?tab=good" target="_blank" rel="external">cnode社区精华帖</a>的爬虫放在AWS的EC2 instance下管理， 利用elastic beanstalk来对AWS资源进行分配和调控， 由于使用的还是free-tier的single instance， 则elastic beanstalk所特有的load-balancing的优势没有办法享受到。</p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/69662ed94ae1f3ff.png" alt="ebean"></div>

<p>一开始如果直接按照AWS给的方法, <code>eb init</code>初始化一个elastic beanstalk的项目， <code>eb create</code>创建一个environment和一个EC2实例, 然后<code>eb deploy</code>将.git里面committed的改动push到elastic beanstalk的生产环境里面， 然后用<code>eb open</code>来打开这个IP address， 如果之后需要终止这个app的话， 就<code>eb terminate</code>就好了。</p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/143c21d61cd3cf33.png" alt="heroku"></div>

<p>如果之前有使用heroku的经验的话， 其实你会发现其实amazon elastic beanstalk和heroku提供的服务非常相似， 实际上， 就这两家服务的定位而言， 都是platform as a service（Paas）， 也就是让developer可以将网站， 移动端部署在云端(cloud)不需要顾虑backend server和database的configuration。 而heroku本身相对于其他市面上的Paas在auto-scaling上做得更加出色， 它的computing resources(dyno)可以按照计算的需求而叠加从而满足在高流量下的网站后端流畅运行。而近几年amazon的elastic beanstalk的出现， 在这个Paas的市场给我们developer多一个很好的选择。就自己的使用而言， 感觉两者的command line interface其实设计得差不多， 都很简洁方便， 不过相比heroku， amazon的AWS还涉及租用到计算单元EC2, 就配置的操作来说， 你在配置AWS的服务上需要花更多的时间去设置环境变量和考虑密钥存储， 毕竟你可能有时候有ssh远程登陆amazon linux服务器的需求。相比之下， heroku的配置就是很简单的在<code>~/.bashrc</code>文件里面添加toolbelt文件夹的路径了。</p>
<blockquote>
<p> 其实heroku它本身就是deploy在了AWS上的呀😂， 所以理论上在performance上不会有太大的差别。</p>
</blockquote>
<p>而在pricing上， 我认为AWS的价格和服务会更加的实惠， 毕竟考虑到你有一张信用卡就可以申请到你一年的free-tier的single instance的使用权利， 而single instance对一些小型的side project来说完完全全是够用的呀。即便不够用， 换成large instance也是several clicks away， 反正也是按用量收费， 经济实惠!</p>
<h2 id="遇到的问题">遇到的问题</h2><p>第一个使用EB部署的应用是一个nodejs爬虫， 负责爬去cnode社区的精华帖， 然后返回一个json object收集精华帖的link, 标题和作者avatar， 为了显示的直观， 我并没有写前端的样式， 而是直接<code>JSON.stringify(json)</code>然后send会浏览器。之后如果仅仅作为REST API使用的话， 还需要在router上修饰一下URL。目前还是有点粗糙的。<a href="https://github.com/AirLoft/web-scraper" target="_blank" rel="external">github链接</a></p>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/9fd7dd3d203d2d91.png" alt="demo"></div>

<p>一开始我直接将在本地localhost运行的版本deploy到了elastic beanstalk上， 由于缺少了这一行配置<code>var port = process.env.PORT || 3000;</code>， 我直接把port定在了3000， 而elastic beanstalk是有应该占用的port的， 所以得到了“502 bad gateway error”。</p>
<p>还有一点需要注意的是<code>npm start</code>这个npm script里面的配置， AWS elastic beanstalk会找到这条指令并去执行来执行相应的js文件， 比如我把写cnode网站的爬虫写在了cnode.js里面， 那么我需要</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node cnode.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>来保证服务器执行的是我对cnode这个网站的爬虫。</p>
<h2 id="Q&amp;A">Q&amp;A</h2><p>以下内容是我在自己折腾Elastic Beanstalk的时候收集的一些比较简练而准确的总结， 在这里分享给大家。 其实amazon的AWS教程写得非常详细的， 大家自己如果有能力最好去尝试自己阅读和实践它给的例子!</p>
<p><strong>How elastic beanstalk works?</strong><br>Now you have a web app running in AWS Elastic Beanstalk. As Elastic Beanstalk creates your environment, it <strong>interacts with several other AWS services</strong> to create the resources required to run your web app securely and resiliently.</p>
<p><strong>How EC2 instance works?</strong><br>EC2 instance – A virtual machine that runs Amazon Linux or Microsoft Windows Server and that is configured to run web apps on the platform that you choose.<br>Each platform runs a different set of software, configuration files, and scripts to support a specific language version, framework, web container, or combination thereof. Most platforms <strong>use either Apache or nginx as a reverse proxy</strong> that sits in front of your web app, forwards requests to it, serves static assets, and generates access and error logs.</p>
<p><strong>What is reverse proxy server?</strong><br>A proxy server is a go-between or intermediary server that forwards requests for content from multiple clients to different servers across the Internet. A reverse proxy server is a type of proxy server that typically <strong>sits behind the firewall in a private network</strong> and directs client requests to the appropriate backend server. A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.</p>
<p>Common uses for a reverse proxy server include:</p>
<ul>
<li>Load balancing – A reverse proxy server can act as a “traffic cop,” sitting in front of your backend servers and distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer redirects traffic to the remaining online servers.</li>
<li>Web acceleration – Reverse proxies can compress inbound and outbound data, as well as cache commonly requested content, both of which speed up the flow of traffic between clients and servers. They can also perform additional tasks such as SSL encryption to take load off of your web servers, thereby boosting their performance.</li>
<li>Security and anonymity – By intercepting requests headed for your backend servers, a reverse proxy server protects their identities and acts as an additional defense against security attacks. It also ensures that multiple servers can be accessed from a single record locator or URL regardless of the structure of your local area network.</li>
</ul>
<p><strong>What is amazon s3 bucket?</strong><br>Amazon S3 bucket – A storage location for your source code, logs, and other artifacts that are created when you use Elastic Beanstalk.</p>
<p><strong>How your domain will look like?</strong><br>Domain name – A domain name that routes to your web app in the form subdomain.region.elasticbeanstalk.com.</p>
<p><strong>When should I use AWS Lambda versus Amazon EC2?</strong></p>
<p>Amazon Web Services offers a set of compute services to meet a range of needs.</p>
<p>Amazon EC2 offers flexibility, with a wide range of instance types and the option to customize the operating system, network and security settings, and the entire software stack, allowing you to easily move existing applications to the cloud. With Amazon EC2 you are responsible for provisioning capacity, monitoring fleet health and performance, and designing for fault tolerance and scalability. AWS Elastic Beanstalk offers an easy-to-use service for deploying and scaling web applications in which you retain ownership and full control over the underlying EC2 instances. Amazon EC2 Container Service is a scalable management service that supports Docker containers and allows you to easily run distributed applications on a managed cluster of Amazon EC2 instances.<br>AWS Lambda makes it easy to execute code in response to events, such as changes to Amazon S3 buckets, updates to an Amazon DynamoDB table, or custom events generated by your applications or devices. With Lambda you do not have to provision your own instances; Lambda performs all the operational and administrative activities on your behalf, including capacity provisioning, monitoring fleet health, applying security patches to the underlying compute resources, deploying your code, running a web service front end, and monitoring and logging your code. AWS Lambda provides easy scaling and high availability to your code without additional effort on your part.</p>
<p><strong>To create a hosted zone in Amazon Route 53</strong></p>
<ul>
<li>Open the Amazon Route 53 management console.</li>
<li>Choose Hosted Zones.</li>
<li>Choose Create Hosted Zone.</li>
</ul>
<p>For Domain Name, type the domain name that you own. For example: example.com.</p>
<p>Choose Create.</p>
<p>Next, add a CNAME record to the hosted zone. A CNAME record registers a domain name that you own as an alias of your web app environment’s elasticbeanstalk.com subdomain.</p>
<p>When an Amazon Route 53 DNS server receives a name request for your custom domain name, it resolves to the elasticbeanstalk.com subdomain, which resolves to the public DNS name of your Elastic Load Balancing load balancer, which resolves to your web app’s IP address.</p>
<p>Note<br>In a single-instance environment, the elasticbeanstalk.com subdomain resolves to an Elastic IP address attached to the instance running your web app.</p>
<p><strong>关于elastic beanstalk的价格</strong><br>有小伙伴在comment里面提问， 如果用完了一年的free-tier的话， 价格怎么计算呢? 可以参考下amazon的<a href="https://aws.amazon.com/elasticbeanstalk/pricing/" target="_blank" rel="external">这篇介绍</a>里面详细记录了EC2, S3, DB等等AWS相关服务的价格。如果是个人的side project, 对CPU和图片等用户信息存储的需求不是特别大的话， 免费的plan或者是micro的instance是完全够用的， 如果是在某方面的需求特别大， 比如说unsplash这个高清摄影图片分享的社区。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/bb0b5ef1d0298d11.png" alt="unsplash"></p>
<p> unsplash将用户上传的照片存储在Amazon的S3服务上会比较安全和便捷，(搭配着Imgix这个service使用)， 具体的网站花销可以参考<a href="http://backstage.crew.co/what-does-unsplash-cost/" target="_blank" rel="external">这篇博文</a>， 里面记录了unsplash一个月网站使用的各种服务的明细记录， 也可以给一些希望做图片分享社区的创业者们一个参考。一个值得注意的点是， unsplash的花销是比较适合借鉴的， 因为unsplash和目前许多的创业公司一样， 选择将自己的主服务host在heroku这个平台， 选择S3等等主流的服务， 不像一些更geeky的公司可能为了省钱就自己来搭建和管理自己的服务器和数据库。 当然， 管理成本和维护成本都要考虑进去， 所以综上我才认为unsplash的例子是非常值得借鉴的!</p>
<h2 id="参考链接">参考链接</h2><p>下面的链接是我在自己尝试搭建环境时参考的内容， 以及我选择free-tier的configuration的页面。其中就有以express为例子的服务端环境搭建。</p>
<ul>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html#set_aes_home_linux" target="_blank" rel="external">setting up EC2 cli on mac</a> we store EC2 api tool, aws-access-key and aws-secret-key in <code>~/.bashrc</code>, so that we can use the shortcut commands to do <code>init\create\deploy\open</code>. The common commands are listed as followed.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eb init</span><br><span class="line">eb create</span><br><span class="line">eb deploy</span><br><span class="line">eb open</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://docs.aws.amazon.com/quickstarts/latest/webapp/welcome.html" target="_blank" rel="external">A high level explanation of what EB does and what can we config</a> trying to give a high-level description of what is the use and purpost of each AWS service, including EC2, the reverse proxy server sitting in front of servers, router 53 and so on so forth.</li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html" target="_blank" rel="external">A detailed explanation of how to host an express app on EB full-step tutorial</a> The tutorial uses an express app to explain how to use EB.</li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs.html" target="_blank" rel="external">How to deploy a nodejs project to EB</a> similar to the previous tutorial post.</li>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html" target="_blank" rel="external">how to connect to EC2 instance using ssh</a><br>by using <code>ec2-describe-instances</code>, we can get the id of my instance.</li>
</ul>
<p>So after we have created an project, we go to the elastic beanstalk console, we will see the dashboard of all the application I host on EB such as the recent one(webscraper). The following is a screen capture of the configuration of that application on EB as in a free-tier plan:<br><img src="http://ac-TC2Vc5Tu.clouddn.com/7c3a33a6cfab0843.png" alt="configuration"> In this page, we can set the scaling option from single instance to load-balanced configuration, and when we add a load-balancer, it will automatically adjust the number of instances depending on the need.</p>
<p>When you turn on load balancing, Elastic Beanstalk creates a load balancer, deletes the Elastic IP address from your environment, and provisions a new EC2 instance. Elastic Beanstalk also updates DNS records to point the web app’s domain name to the load balancer instead of to the IP address of a single instance.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文对目前市面上的主流Paas(platform as a service)提供商进行了比较， 比如heroku和amazon家的新星elastic beanstalk。并以一个nodejs爬虫的实例部署在了eb的服务器上。很多关于服务器端的概念也因此理清了， 比如reverse proxy server, dynamic IP addressing和后端的一些配置。也在文章中做个小结， 分享给感兴趣的大家。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://chocoluffy.com/tags/AWS/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://chocoluffy.com/tags/nodejs/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[第一期]AirLoft组织动员宣言]]></title>
    <link href="http://chocoluffy.com/2016/04/27/%E7%AC%AC%E4%B8%80%E6%9C%9F-AirLoft%E7%BB%84%E7%BB%87%E5%8A%A8%E5%91%98%E5%AE%A3%E8%A8%80/"/>
    <id>http://chocoluffy.com/2016/04/27/第一期-AirLoft组织动员宣言/</id>
    <published>2016-04-27T13:46:44.000Z</published>
    <updated>2016-04-28T01:49:28.000Z</updated>
    <content type="html"><![CDATA[<p>The best education comes from inside. </p>
<a id="more"></a>
<div style="text-align:center" markdown="1"><img src="http://ac-TC2Vc5Tu.clouddn.com/b000a844b66d48d1.jpg" alt="pink"></div>

<h2 id="Orientation">Orientation</h2><p>这个ada内部组织airloft成立的目的， 是我希望大家能在一个更加紧密和熟悉的环境下分享和学习课外知识， 采用github托管的形式是因为它管理代码的高协作效率和peer review的便捷。</p>
<p>为了保证大家自学步骤的一致性和自由发挥的空间， 我决定采取的是任务发布形式。 <strong>每周会由我或我指定的负责人发布1-2篇的教程或任务</strong>， 任务内容从刚入门的git的使用与协作， 到之后的网站样式布局， 移动端，动效设计，后端编程都会涉及， 而教程则主要来源于<strong>所有有心人对某些创意点子的实现过程无论成败的记录(任何人都可以发布)</strong>。 我不会在任务完成度上给大家太多压力， 但是所有的任务都会指向最终AirLoft移动端APP及一系列配套web app的诞生， 能够深入互动参与每个方向讨论和实践并自己动手coding的人， 也会收获远比完成一个作品， 一个产品更多也更重要的东西， being insightful and clear of what you really want to do。</p>
<p>组织内部大致的方向：<br>我主导的 - AirLoft reactive native的开发， 并将Airloft网站端从angular1.4全部由react重写。<br>朱子宁主导的 - 爬虫scripts， 对于校园内部热门活动消息，教务信息和周边消息的收集和呈现。<br>Joyce主导的 - 走进多大的web app及html5微信移动页面。<br>Jerry主导的 - 基于GPS的餐饮外卖信息呈现和成交平台。</p>
<p>每个方向都由不同的coding侧重点， 每个人可自由参与任意方向， <strong>不强制任务进度， 但强制定期分享。</strong>就最终成果而言， 作品与作品之间可以相互配合和改善， 举个例子， 我会使用服务器端的爬虫来收集兴趣小组的讯息， 会在之后的宣传阶段用html5写移动端的宣传页面， 而基于GPS本身就是AirLoft的功能基础。</p>
<p>而需要再强调一遍的是， <strong>任何人， 在任何时候， 都可以提出新的开发方向和想法， 无论关乎技术还是设计还是美工还是用户体验。</strong>我会欢迎脑洞， 折腾些好玩却可能“无用”的东西， 比如哪一周主题或许就是自学Sketch来给AirLoft换个图标？或者就开个repo去参加HackerRank？能带你自己一直走下去的， 不是压力， 是兴趣。</p>
<p>很多人会好奇我自己的成长轨迹， 而如果真的往回看， 我是在2015年3月29号那天， 在交换时期参加的一次hacker meeting上， 第一次见识到html\css\js， 那天的主题是用meteor.js和mongo在5min内搭建一个todo应用， 嘉宾是伯克利大二的一个学生。到现在学CS大概有1年了吧， 从一开始写javascript各种运动框架开始， 到用ruby on rails自己前后端折腾了5， 6个中型blogging, social或者API网站， 到上学期用react重写各种网站及耗时一个月的SPA应用Airloft， 和现在react native。 我并不觉得自己已经有能力开始回顾自己过去的作品和荣誉， 只是最近挺多人问我“如果想做课外的项目应该学些什么的问题”， 我把我自己的轨迹拿出来给大家参考。永远没有一步登天的成就， 去凭着兴趣摸索， 因为好奇而坚持， 是我能给的最好的建议。</p>
<p>Orientation动员会的最后， 和大家分享两句话， 第一句来自自己的体会， 第二句来自ECE516 prof: Steve Mann：</p>
<ul>
<li>the best education comes from inside.</li>
<li>the best way to learn is to teach.</li>
</ul>
<h2 id="第一期任务">第一期任务</h2><p>学会git的简单使用, 直接在org内创建一个新的repo， 添加一个readme.md文件， 在里面写上你对两件事的想法， <strong>1、关于社区建造。 你认为应该怎样打造一个经久不衰的社区？举个现实生活中的例子？为什么？ 怎么设计回馈和奖励机制能够造就一个好的社区？哪些设计体现或者暗示了这些机制？2、你对哪个具体开发方向感兴趣？如果在这方面有充足的能力， 你可以怎样贡献到哪个任务里？做出怎样的作品？</strong>， 或者直接在github网页端操作创建新的repo和添加新文件， 或者更佳推荐的方式是本地代码备份然后关联到github的相关repo再push你的本地修改。</p>
<p>创建好之后， 做第三件事， <strong>3、至少在其他一个别人的repo里面的issue panel提出你对他这个想法的看法和补充</strong>。</p>
<blockquote>
<p>任务解释， 比如我喜欢看hackernews， 我对它的投票机制特别感兴趣， 我就拿这个社区的各种机制来举例， 又或者我喜欢B站， 去尝试分析B站哪些设计是特别有用户吸引力的， 记录下来， 新创repo分享。所有可能遇到的问题， 尝试记录下来自己解决， 找不到办法， open一个新的issue然后在微信群里讨论讨论。</p>
</blockquote>
<p>参考的链接， 我在第二期任务发布的时候公布。开始折腾起来吧。</p>
<h2 id="题外话">题外话</h2><ul>
<li>暑假就是要好好浪的。周末去骑trail， 打球， 聚餐什么的都要约起来啊。</li>
<li>我喜欢爱折腾的小伙伴。 有什么想说的话都可以私戳我。</li>
<li>认真对待梦想。 可能这个时代最一文不值和被轻易低估的， 就是梦想了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The best education comes from inside. </p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="日记" scheme="http://chocoluffy.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于创业, 那些不能说的秘密]]></title>
    <link href="http://chocoluffy.com/2016/04/25/%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%EF%BC%8C-%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://chocoluffy.com/2016/04/25/关于创业，-那些不能说的秘密/</id>
    <published>2016-04-25T15:39:01.000Z</published>
    <updated>2016-12-07T04:35:31.000Z</updated>
    <content type="html"><![CDATA[<p>每个人， 在每个阶段， 都会有个不容分说的理由。</p>
<a id="more"></a>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/88dd510b8366b952.jpg" alt="preface image"></p>
<p>趁着考完期末考的一段自由时间， 把之前一直积压着的两本书给读完了。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/e98f89a56b7989aa.jpeg" style="display: block; margin: 0 auto;"></p>
<p>第一本是来自Ben Horowitz的创业维艰， 前半段描述了他管理Loudcloud到Opsware将一个濒临破产的公司带到最后以16亿美元的价格被惠普收购的传奇经历， 后半段则记录下了他对公司管理的各个细节的心得思考。巧合的时， 就在我阅读这本书的期间， 曾任多家上市公司董事， Ben的精神导师Bill Campbell逝世了。 他对Ben说的那句， “要和员工一起宣布这个消息”的告诫仿佛还历历在目， 通过Ben的描述， 看得出Campbell极其富有同理心(empathy)的领袖气质。 向Campbell致敬。</p>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/6ceefbf6929babac.png" style="display: block; margin: 0 auto;"></p>
<p> 第二本书是硅谷创业者陈天的随笔。 在一个充斥着来自CEO乃至风险投资人视角的创业回顾的环境下， 一个来自技术合伙人(CTO)的视角显得尤为可贵。 从最早的技术选型(为什么用Django)， 到带领其它技术人员的开发和维护(4台EC2)， 到技术过渡和商业选择， 陈天给了一份很详细和真挚的参考选项， 也让一个非商圈的学生， 慢慢了解到国内白手起家创业的一条非常有代表性的道路。感激陈天老师的分享。</p>
<p>曾经一直以为， 创业是一件离自己很远的事情。直到一个月前， 一个多伦多大学毕业的直系师兄找到我来聊聊创业的可能。 他希望我能够以技术合伙人的身份帮他做出一个类似airbnb的网站和移动端， 已经有另外两个商科毕业已经工作的学姐愿意参与市场营销和推广， 万事具备， 就差个程序员了。</p>
<p>也是第一次， 我感觉到创业， 其实也只是一种选择罢了， 突然想到一句微博上看到的话， “对有能力的人来说， 很多事情不是机会， 而是选择。”， 我当然不觉得我自己有能力和把握在这个阶段就合适技术合伙人的身份， 只是当我在一个旁观者的角度去看我身边的故事时， 好像创业， 也并没有倾家荡产， 孤注一掷般的惊天动地， 好像创业， 更像是创始人在生命某个时期赴的一场约， 选择了一条人迹罕至的路， 也由此义无反顾。</p>
<p>下面是我在阅读时记录下的文字， 从我的角度出发， 或摘录， 或直接是自己的感受， 像《金蔷薇》里那个收集着金色尘土的老人， 我把它们留在这里：</p>
<h2 id="The_hard_thing_about_hard_things">The hard thing about hard things</h2><ul>
<li>在团队有十几个人的时候， 我招了一个人力管理人员， 专门帮我们招聘最聪明的人从硅谷。</li>
<li>Ben从一个同事分享的mosaic浏览器， 发现这就是未来， 于是第二天就去面试mosaic公司。</li>
<li><strong>究竟为什么要上市？</strong> 在文中， 作者是在2000年互联网泡沫的时候， 发现私人资金已经没有出路的时候， 想到公开上市， 认为公开市场， 会有更多的人来给自己投资， 而不是一直以来私人投资者的钱。</li>
<li><strong>如何做资产重组？</strong> 在Ben即将破产的时候， 他问他自己， 如果要退出， 他会怎么做， 他说他会把opsware带出来卖给别人用， 因为这是他自己开发的， 他知道这个特别好用， 但是基于当时的情况， 这个软件被限制住， 没法和loudcloud分离开用， 于是他回去分配了一个精英小组去尝试从现有软件分离出来。</li>
<li>在紧急情况的时候， 有很有多人议论你， 他们有些人是因为同情， 因为关心， 也可能是想摧毁你。 也会有很多人想帮你， 想帮你摆脱困境， 给出各种各样的建议。 永远从数据和具体情况出发， 没有任何一个旁观者有这个耐心帮你理顺所有的商业策略， 如果你任凭那些根本不了解具体情况的人对公司指手画脚， 那公司就无药可救了。</li>
</ul>
<p><img src="http://ac-TC2Vc5Tu.clouddn.com/93c8d666c10be4ba.png" alt="pied piper"></p>
<p><strong>很多时候， 我们都会评论那些伟大的CEO， 很自恋自大， narcisist， 专制。 然而他们只是没有听进去那些愚蠢的建议吧了， 又有谁比他们更清楚公司发展的每一个细节呢？</strong></p>
<ul>
<li><p>EPS真正想要的是tangram这家公司的软件， 而opsware在tangram比较低股价的时候收购了tangram， 让主要负责融洽opsware的EPS负责任frank特别高兴。也就是Ben他的要求， 弄清楚买方到底想要什么， 去提供他最想要的东西， 而不是一个劲地夸自己好。</p>
</li>
<li><p>同时非常重要的也是团队会议， Ben在两次会议中表现都超出了我的意料。第一次在计划从loudcloud中分离出opsware的时候， Ben将新公司的股票送给所有人， 同时允许有人决定退出。 “我不会送你出门， 但我汇帮你找份新的工作。要明确自己此刻所站的位置， 哪些人可以依靠。告诉大家你的决定。”<br>第二次， 在遇到bladelogic这个强劲的对手的时候， Ben再次开了一个全体的会议， 和大家说明白， 他需要大家， 在未来的6个月里面卯足了劲， “我要你们和你们最关心的人认真地谈一次话， 我们需要一次达成目标。”</p>
</li>
<li><p>研发出好产品是创新者的职责， 而不是客户。 <strong>客户只知道根据现在的产品体验来判断自己想要什么。</strong></p>
</li>
<li><p>在会议中添加一项， “我现在没有做什么” 的议程。而大家觉得的还没有做到的事， 都是一致的。那就是自动化。在公司慢慢做大的时候， 会有很多收购的声音， 其中， 你也会<strong>仅仅因为别人打算收购的意愿而得到股票的溢价</strong>， 要看清楚自己的价值。 同时， 也充分了解自己的直系下属他们的意愿。</p>
</li>
<li><p>而对于一个CEO能力的最好的考量， 是逆境不是顺境， 是专心致志的能力， 和在走投无路的时候选择最佳路线的能力。不是去如何不犯错误， 而是在犯错误之后如何去深刻理解那些你必须要做的事。</p>
</li>
<li><p>当你意识到一个CEO的职责就是为公司解决问题的时候， 你就知道， 有些没有用的空话可以省去了。</p>
</li>
<li><p><strong>在人类的所有交往中， 沟通量和信任程度成反比。</strong>现在很多的公司文化会阻碍坏消息的传播， 真相如果永远只能被戏谑地说出来， 那么等到采取行动的时候就晚了。建立一个奖励文化， 对找到问题症结和解决方案的人给予奖励。于此同时， 公司的任何决策必须当机立断， 比如像裁员这一类的重大决定， 如果不小心走漏风声， 当员工过来质问管理层的时候， 管理者就只有两种选择了， 要么表现出不知情， 要么就是撒谎， 而这其中任何的一个行为都会破坏公司文化。</p>
</li>
<li><p>对待裁员。 裁员对公司的最大伤害就是士气。而士气低下的主要表现症状就是怀疑， 所以越是困难的时候， 就越要坦诚相待你的员工。同时， 这是一个非常严重和严肃的时刻， 需要一名直接亲属上司去温和地解决这个事情， 你只要记住， 你的员工可能并无法记得他在这里工作的每一天， 但是他一定会记住他被辞掉的那一天。 <strong>永远记得， 聪明是一种天赋， 而善良是一种选择。</strong> 但是有一点也很重要， <strong>话是说给留下来的人听的</strong>， 你怎么对待那些被辞去的员工， 在困难时候， 就会是留下来的员工的一次自我映照。</p>
</li>
<li><p>一定要明晰什么时候笨办法最有用， 不是欺骗自己说， “产品是完美的， 是没有问题的， 问题出在销售人员， 问题出在用户的三分钟热度。”， 不， 问题是， 产品不够好。</p>
</li>
<li><p>不让这个公司最精英的人才去参与最棘手的问题， 完全就是浪费。<strong>一个人， 无论多出色， 都解决不了他不了解的问题。也就像开源社区所倡导的一样， 只有有足够多的眼镜， 就可以让所有问题浮出水面。</strong></p>
</li>
<li><p>很多时候， 你会吩咐很多指令给你的下属， 但他们并不一定会严格执行， 甚至不会执行这些要求。 而这种现象的背后原因是， <strong>你只告诉了他们应该怎么做， 他们却不知道为什么要这么做。</strong>一个好的工作环境就是， 每个人早上一睁开眼睛就知道自己所做的工作高效有用。管理层需要和每个员工有一对一的会面。当然就有人问了， 好的工作环境和坏的工作环境有什么区别， 是的， 在一切顺利的时候， 没有区别， 你的亮眼成绩会遮住所有可能质疑声的嘴， 问题不是没有， 而是让解决问题的人自我怀疑了。 但是一旦在事情不顺利的时候， 好与坏就是生与死的差别。</p>
</li>
<li><p><strong>如何对生产力进行直观的测量？</strong></p>
</li>
<li><p>好的产品经理会将一些重要问题以书面形式纪录下来， 竞争中的良策， 艰难的架构选择， 艰难的产品选择。而差的产品经理， 只会以口头的方式表达自己的意见。</p>
</li>
<li><p>大公司的主管都是应答式的, 当有事情要实例， 接受到命令之后， 才会去执行。而小公司的主管， 创业公司的管理者， 你不自己主动承担起很多的责任这个公司就倒了啊。一种很危险的情况就是， 在创业公司艰难的时期， 你雇用了一个认股数还不小的高薪高管， 他好像并没有干什么事， 却能够占到一定比例的利润。这就是并不适应节奏的管理层， 对创业公司的奋斗员工有很大的打击。</p>
</li>
<li><p><strong>关于招聘</strong>。 永远要提醒自己， 我们是找谁拥有解决问题的能力， 而不是谁看上去最适合。每个人都会有或多或少的缺点， 他可能不善于表达， 他可能有点自大， 有点脾气躁， 这些特质都不应该迷惑你真正找寻的目标。 尤其是在国内这个鱼龙混杂的招聘市场， 明明优秀的人就已经是凤毛麟角了， 如果你还只关注缺点， 只希望站在高处评论一番自我麻醉的话， 这对公司就太可惜了。<strong>写下你认为检验人才最好的几个问题， 形成面试的规范。</strong></p>
</li>
<li><p>一个好的管理者思考问题从是会有两个角度， 一个是我想怎么做， 另一个是员工会怎么想。</p>
</li>
<li><p>办公室政治</p>
<ul>
<li>如果你的员工给你提加薪的要求？ 拒绝， 如果你接受了这个要求， 其他员工会认为你加薪是因为你提出了这个要求而不是因为你出色的业绩。 这个会让其他人更加跃跃欲试。坏处二， 那些办公室里老实沉默， 或者对这种政治手段不敏感的人， 是不是就错过了加薪的机会呢？其中一个避免的方法就是<strong>保证员工收入和公司收入之间的一致性</strong>。</li>
<li>如果你的员工给你提希望扩大权力范围的要求？一个绝对不能触碰的底线是， 你给他一个口头承诺， 给了小道消息一次机会。 记住， 在公司的决策方案是， <strong>决策即出， 立即执行， 不要在交谈的时候流露出任何口头承诺的倾向</strong>。</li>
</ul>
</li>
</ul>
<ul>
<li><p>不要因为你在业务上缺乏经验就降低对他们工作的要求。很多年经轻轻的CEO， 会因为在公司创立之初媒体发布的几篇正面报道而喜出望外。这个标准太低了。</p>
</li>
<li><p>管理一家创业公司就像驾驶着一辆高速行驶的汽车， 当你以一个高速过弯的时候， 千万别看墙， 如果你看着墙， 你就直接撞上去， 盯着路， 你就安然无恙。</p>
</li>
<li><p>Ben他们建立一个风投公司的初衷， 就是发现了技术性创始人CEO和职业CEO的区别， 那些伟大的技术型驱动的公司都是由创始人经营的， 然而技术型创始人在管理上， 人脉上和营销宣传上有很大的不足。</p>
</li>
</ul>
<blockquote>
<p>后记:对于《途客圈》一书的总结回顾将会分开在另外一篇博文中， 主要探讨工具性和社交性产品的比较和更多创始人必须注意的具体股权结构， 敬请期待。</p>
<p>Edit:《途客圈》一书的阅读手记已完成，👉<a href="http://chocoluffy.com/2016/05/13/%E5%8F%A6%E4%B8%80%E7%A7%8D%E9%BC%93%E5%A3%B0-%E8%AF%BB%E3%80%8A%E9%80%94%E5%AE%A2%E5%9C%88%E3%80%8B%E6%9C%89%E6%84%9F/">另一种鼓声-读《途客圈》有感</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>每个人， 在每个阶段， 都会有个不容分说的理由。</p>]]>
    
    </summary>
    
      <category term="创业" scheme="http://chocoluffy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="读书笔记" scheme="http://chocoluffy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="原创" scheme="http://chocoluffy.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创意视频分屏 - HTML5 & JS]]></title>
    <link href="http://chocoluffy.com/2016/04/23/%E5%88%9B%E6%84%8F%E8%A7%86%E9%A2%91%E5%88%86%E5%B1%8F-HTML5-JS/"/>
    <id>http://chocoluffy.com/2016/04/23/创意视频分屏-HTML5-JS/</id>
    <published>2016-04-23T13:53:56.000Z</published>
    <updated>2016-08-27T20:40:00.000Z</updated>
    <content type="html"><![CDATA[<p>和朋友聊天时无意间发现的一个创意视频分屏的想法， 来自<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#at-a-glance" target="_blank" rel="external">beoplay</a>这个高端耳机的宣传页面， 在自己实现的过程中， 也发现了视频自适应居中的这个设计细节， 自己也捣鼓了出来， 话说在之后产品的宣传主页视频可以一试的， 从两个视角去诠释同一个故事， 就是对这样有心思的设计细节没有任何抵抗力呢。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/s/09k1efohvmdkphu/beoplay%20demo.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<h2 id="目标">目标</h2><p>仿造beoplay这款耳机<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#video" target="_blank" rel="external">主页的宣传视频</a>来实现一个类似的视频分屏的效果。</p>
<h2 id="版本1-0（不加视频自适应居中）">版本1.0（不加视频自适应居中）</h2><p><img src="https://dl.dropboxusercontent.com/s/zppojylzfsyk6in/screensplit1.0.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<p>right video是静止的不动的， 同时位于最底层。 目前所有的伸缩都是在控制left video， 同时由于我们设置了left video的<code>z-index</code>为3， 那么左边的视频会覆盖在右边的视频上。接下来的目标就很明确了， 我们需要追踪鼠标在整个container里面的位置(我们会用占宽度的百分比来表示)， 然后， 通过改变左边视频的宽度， 同时也就把位于下面的右边视频暴露出来了， 来达到切换的效果。</p>
<p>理解到这一步之后，目标就是<strong>如何改变视频宽度</strong>了。</p>
<h3 id="如何改变视频宽度">如何改变视频宽度</h3><p>这里其实隐藏着一个陷阱， 就是因为我们不可以直接改变<strong>视频本身的宽度</strong>，因为视频的高宽比在拍摄的时候就决定了， 我们如果只拉长视频而不同时提高高度的话， 就会使得在纵轴上部分内容被遮盖到， 大致意思如图：</p>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f37ixae23nj219e0oe77a.jpg" alt="" style="display: block; margin: 0 auto;"></p>
<p>而这并不是我们想要的效果， 我们希望， 视频可以维持在同一个大小，而改变的只是<strong>视窗的横向移动</strong>，<br>这一步我用到了一个trick， 就是<code>overflow: hidden;</code>， 我们在左边的视频外面包住了一层<code>div</code>， 因为我们控制的就是左边的视频， 然后我们来改变这个“wrapper”的宽度（同时保证保证里面的left video的宽度占比仍然占最外面container的100%）， 来改变我们的视窗， 所以这个wrapper在网页上所包住的部分， 加上了<code>overflow: hidden;</code>遮去了超出部分后， 显示的就是左边的视频了。</p>
<p>比如一开始， 我们希望两个视频都各占一半， 那么左边的视窗一开始就会是占比原container的宽度的50%， 而原视频本身的宽度应该不变， 即container的宽度的100%， 所以我们需要给left video赋上200%的宽度， 理由是这个属性是对其直接父级的div起作用的。</p>
<h3 id="引入视窗">引入视窗</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* clipper 即左侧视频的视窗 */</span></span><br><span class="line"><span class="id">#clipper</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该属性作用于左侧视频  */</span></span><br><span class="line"><span class="id">#clipper</span> <span class="tag">video</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">10</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/c5ee78b5gw1f37j53tshej21a20o643j.jpg" alt="init"></p>
<p>之后的事情就清楚了， 我们只需要改变<strong>左边视窗的宽度， 并同时保证视频本身相对原容器的宽度不变</strong>。写的js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = videoContainer.getBoundingClientRect(),</span><br><span class="line">offset = e.pageX - videoContainer.offsetLeft,</span><br><span class="line">position = ((e.pageX - videoContainer.offsetLeft) / videoContainer.offsetWidth) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (position &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">	videoClipper.style.width = position+<span class="string">"%"</span>;</span><br><span class="line">	leftVideo.style.width = ((<span class="number">100</span>/position)*<span class="number">100</span>)+<span class="string">"%"</span>;</span><br><span class="line">	leftVideo.style.zIndex = <span class="number">3</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单地说， 只需保证<code>videoClipper.style.width * leftVideo.style.width = 100%</code>即可。</p>
</blockquote>
<p>那最后一个改变<code>z-index</code>的目的， 就是确保左边的视频一直叠加在右边的视频之上。</p>
<h2 id="版本2-0（增加了自适应居中）">版本2.0（增加了自适应居中）</h2><p><img src="https://dl.dropboxusercontent.com/s/8y6fr3ib87yz9h7/screensplit2.0.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<p>初衷： 因为从拍摄的角度， 大部分的时间， 我们都会把拍摄的主体放在视频的中间位置， 而如果我们只是简单地移动视窗而不改变视窗的主角位置的话， 我们在鼠标移动的时候， 就只能看到边边角的视频内容了， 这违反设计直觉。</p>
<p>因此我们希望在移动视窗的同时， <strong>同时移动视频本身的位置来弥补视窗的偏差</strong>。相应的js代码是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">offset = e.pageX - videoContainer.offsetLeft,</span><br><span class="line">offsetRight = videoContainer.offsetWidth - offset,</span><br><span class="line"></span><br><span class="line"><span class="comment">// for adaptive resizing:</span></span><br><span class="line">rightVideo.style.webkitTransform = <span class="string">"translate("</span> + offset / <span class="number">2</span> + <span class="string">"px, 0)"</span>;</span><br><span class="line">leftVideo.style.webkitTransform = <span class="string">"translate(-"</span> + offsetRight / <span class="number">2</span> + <span class="string">"px, 0)"</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>画外音： 使用<code>transform</code>来改变DOM元素的位置相比直接改写他们的”定位属性“有很多好处， 其中最突出的就是， transform使用的是GPU， 而那些<code>top\left</code>等的定位元素使用的是CPU， 我们希望充分利用GPU和它提供的硬件加速， 同时<code>transform</code>也不会触发网页的repaint， 从而在渲染上更加的smooth和fast。</p>
</blockquote>
<p>那这个地方，<code>offset</code>就是鼠标在container里面距离左边边框的距离， 那么我们同时根据这个距离， 让左边的视频在视窗移动时， <strong>往相反的方向以一半的速度移动来弥补视窗偏差</strong>。使得可以在视窗移动的时候， 始终保持视频本身拍摄的主体视角也处于该视窗的主体视角! 原理可以参考这个图：</p>
<p><img src="https://dl.dropboxusercontent.com/s/t99wbc4n3s8c4r7/screensplit3.0.gif?dl=0" alt="" style="display: block; margin: 0 auto;"></p>
<p>那么也就大功告成啦!</p>
<h2 id="总结">总结</h2><p>HTML5对media文件更多功能上的支持使得我们可以更好的操作media文件， 包括视频的开始暂停， 以及各种音量的调节， 而这个程序实例， 是一个很好的对相关API的使用的一个示范和一个小小的创意细节。这个项目， 也是饭后和朋友聊天聊出来的实现方案，也希望看到更多的创意脑洞和美的设计!</p>
<p>这个是这个项目的<a href="https://github.com/chocoluffy/screen-split-video" target="_blank" rel="external">github repo</a>, 这个是项目的展示<a href="http://chocoluffy.com/screen-split-video/">demo</a> 欢迎评论和pull request~</p>
<h2 id="Q&amp;A">Q&amp;A</h2><p>后续的一些疑问和解答：(基于V2ex和微博的评论)</p>
<p><strong>跟<a href="http://www.mi.com/hezi3s/" target="_blank" rel="external">这个链接</a>中间的 2K－4K 对比差不多一个意思？</strong><br>A: 哈哈在分屏效果上是类似的， 不过那个对图片的处理就会简单很多啦， 感觉就是在某个位置以左叠加一个高斯模糊的滤镜就可以了~ 相比之下， 对视频的处理还要考虑到视窗和视频本身的移动呢! 不过谢谢分享啦!</p>
<p><strong>多个声音怎么办？两个声音会重叠嘛？</strong><br>A: 我做了音轨的渐变处理， 也就是根据视频的相对大小来相对改变音量， 也就是说， 当某个视频占主体位置的时候， 另一个视频的声音是会渐弱的， 这样可能使用体验更好吧! 在博文最后有 demo 的网址， 你可以试试， 我 host 在了 github pages 上， 对了， 这个 demo 只在桌面端 work ， 在手机端还是实现不了这个效果呢， 有点可惜啦， 如果有改进的建议的话， 希望能提出来啦~</p>
<p><strong>快速拉扯的时候边缘缝隙比较大?</strong><br>A: 啊对的！我调试的时候也发现是有， 原因也很明显， 我只对整个 container 绑定了 mousemove 事件， 而 html 页面其他元素是不会监听 mousemove 的， 因此当鼠标快速移出 container 的时候， 就会发现边缘缝隙较大了， 我现在就改改 code ， 加个 condition ， 如果鼠标在 container 之外， 就把视频宽度订死为全屏~谢谢啦!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>和朋友聊天时无意间发现的一个创意视频分屏的想法， 来自<a href="http://www.beoplay.com/products/beoplayh7?_ga=1.127614725.969767543.1461077943#at-a-glance">beoplay</a>这个高端耳机的宣传页面， 在自己实现的过程中， 也发现了视频自适应居中的这个设计细节， 自己也捣鼓了出来， 话说在之后产品的宣传主页视频可以一试的， 从两个视角去诠释同一个故事， 就是对这样有心思的设计细节没有任何抵抗力呢。</p>]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://chocoluffy.com/tags/HTML5/"/>
    
      <category term="javascript" scheme="http://chocoluffy.com/tags/javascript/"/>
    
      <category term="web design" scheme="http://chocoluffy.com/tags/web-design/"/>
    
      <category term="用户体验" scheme="http://chocoluffy.com/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="技术" scheme="http://chocoluffy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
